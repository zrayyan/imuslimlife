{"version":3,"file":"static/js/63.5272b110.chunk.js","mappings":"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","sources":["utils/formatters.js","components/prayer-times/LocationForm.js","components/prayer-times/CalculationMethodForm.js","components/prayer-times/PrayerTimesDisplay.js","components/prayer-times/PrayerClock.js","components/prayer-times/CountdownClock.js","components/prayer-times/EnhancedPrayerTimesDisplay.js","components/prayer-times/PrayerTimeline.js","components/prayer-times/AthanPlayer.js","components/PersonalizedReminders.js","components/AthanSettings.js","pages/PrayerTimesPage.js","hooks/useGeolocation.js"],"sourcesContent":["/**\n * Format coordinates to a readable string\n * @param {number} latitude - Latitude\n * @param {number} longitude - Longitude\n * @param {number} decimals - Number of decimal places\n * @returns {string} - Formatted coordinates\n */\nexport const formatCoordinates = (latitude, longitude, decimals = 4) => {\n   if (latitude === undefined || longitude === undefined) {\n      return '';\n   }\n\n   const lat = parseFloat(latitude).toFixed(decimals);\n   const lng = parseFloat(longitude).toFixed(decimals);\n\n   const latDir = lat >= 0 ? 'N' : 'S';\n   const lngDir = lng >= 0 ? 'E' : 'W';\n\n   return `${Math.abs(lat)}° ${latDir}, ${Math.abs(lng)}° ${lngDir}`;\n};\n\n/**\n * Formats a time string in 12-hour format\n * @param {string} time - Time string in 24-hour format (HH:MM)\n * @returns {string} Time in 12-hour format with AM/PM\n */\nexport const formatTime12Hour = (time) => {\n   if (!time) return '';\n\n   const [hours, minutes] = time.split(':').map(Number);\n\n   let period = 'AM';\n   let displayHours = hours;\n\n   if (hours >= 12) {\n      period = 'PM';\n      if (hours > 12) {\n         displayHours = hours - 12;\n      }\n   }\n\n   if (displayHours === 0) {\n      displayHours = 12;\n   }\n\n   return `${displayHours}:${String(minutes).padStart(2, '0')} ${period}`;\n};\n\n/**\n * Formats a time string in 24-hour format\n * @param {string} time - Time string in 24-hour format (HH:MM)\n * @returns {string} Time in 24-hour format with leading zeros\n */\nexport const formatTime24Hour = (time) => {\n   if (!time) return '';\n\n   const [hours, minutes] = time.split(':').map(Number);\n   return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\n};\n\n/**\n * Formats milliseconds into hours, minutes, seconds\n * @param {number} ms - Milliseconds\n * @returns {string} Formatted time string (e.g., \"2h 30m 15s\")\n */\nexport const formatTimeRemaining = (ms) => {\n   if (ms <= 0) return \"0m 0s\";\n\n   const seconds = Math.floor((ms / 1000) % 60);\n   const minutes = Math.floor((ms / (1000 * 60)) % 60);\n   const hours = Math.floor(ms / (1000 * 60 * 60));\n\n   let result = '';\n   if (hours > 0) result += `${hours}h `;\n   if (hours > 0 || minutes > 0) result += `${minutes}m `;\n   result += `${seconds}s`;\n\n   return result;\n};\n\n/**\n * Format timezone to a readable string\n * @param {string} timezone - Timezone identifier (e.g., 'America/New_York')\n * @returns {string} - Formatted timezone\n */\nexport const formatTimezone = (timezone) => {\n   if (!timezone) return '';\n\n   // Try to format the timezone in a more readable way\n   try {\n      // Remove continent/region prefix and replace underscores with spaces\n      return timezone.split('/').pop().replace(/_/g, ' ');\n   } catch (e) {\n      return timezone;\n   }\n};\n\n/**\n * Format calculation method to a readable name\n * @param {number} methodId - Calculation method ID\n * @returns {string} - Method name\n */\nexport const formatCalculationMethod = (methodId) => {\n   const methods = {\n      0: 'Shia Ithna Ashari',\n      1: 'University of Islamic Sciences, Karachi',\n      2: 'Islamic Society of North America (ISNA)',\n      3: 'Muslim World League',\n      4: 'Umm al-Qura, Makkah',\n      5: 'Egyptian General Authority of Survey',\n      7: 'Institute of Geophysics, Tehran',\n      8: 'Gulf Region',\n      9: 'Kuwait',\n      10: 'Qatar',\n      11: 'Majlis Ugama Islam Singapura',\n      12: 'Union Organization Islamic de France',\n      13: 'Diyanet İşleri Başkanlığı, Turkey',\n      14: 'Spiritual Administration of Muslims of Russia',\n      15: 'Moonsighting Committee Worldwide',\n      16: 'Dubai',\n      17: 'JAKIM, Malaysia',\n      18: 'Tunisia',\n      19: 'Algeria',\n      20: 'KEMENAG, Indonesia',\n      21: 'Morocco',\n      22: 'Comunidade Islamica de Lisboa',\n      23: 'Ministry of Awqaf, Jordan',\n      99: 'Custom'\n   };\n\n   return methods[methodId] || 'Unknown Method';\n};\n\n/**\n * Format a number with leading zero if needed\n * @param {number} num - Number to format\n * @returns {string} - Formatted number with leading zero if < 10\n */\nexport const padZero = (num) => {\n   return num < 10 ? `0${num}` : num.toString();\n};\n\n/**\n * Format bytes to a human-readable string\n * @param {number} bytes - Number of bytes\n * @param {number} decimals - Number of decimal places\n * @returns {string} - Formatted bytes (e.g., \"1.5 MB\")\n */\nexport const formatBytes = (bytes, decimals = 2) => {\n   if (bytes === 0) return '0 Bytes';\n\n   const k = 1024;\n   const dm = decimals < 0 ? 0 : decimals;\n   const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n   const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n   return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\n/**\n * Format minutes to hours and minutes string\n * @param {number} totalMinutes - Minutes to format\n * @returns {string} - Formatted time (e.g., \"1h 30m\")\n */\nexport const formatMinutesToHoursAndMinutes = (totalMinutes) => {\n   if (!totalMinutes && totalMinutes !== 0) return '';\n\n   // Handle negative minutes\n   const isNegative = totalMinutes < 0;\n   const absMinutes = Math.abs(totalMinutes);\n\n   const hours = Math.floor(absMinutes / 60);\n   const minutes = absMinutes % 60;\n\n   let result = '';\n\n   if (hours > 0) {\n      result += `${hours}h `;\n   }\n\n   result += `${minutes}m`;\n\n   return isNegative ? `-${result}` : result;\n};","import React, { useState, useEffect } from 'react';\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    FormControl,\n    FormLabel,\n    RadioGroup,\n    Radio,\n    FormControlLabel,\n    TextField,\n    Button,\n    InputAdornment,\n    Box,\n    Typography,\n    Alert,\n    CircularProgress,\n    Collapse\n} from '@mui/material';\nimport {\n    ExpandMore as ExpandMoreIcon,\n    LocationOn as LocationOnIcon,\n    MyLocation as MyLocationIcon,\n    Search as SearchIcon,\n    CalendarMonth as CalendarMonthIcon\n} from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport { usePrayerTimes } from '../../contexts/PrayerTimesContext';\nimport useGeolocation from '../../hooks/useGeolocation';\nimport { DEFAULT_LOCATION } from '../../utils/constants';\n\nconst LocationForm = ({ onSubmit }) => {\n    // Location type: coordinates or address\n    const [locationType, setLocationType] = useState('coordinates');\n\n    // Form fields\n    const [latitude, setLatitude] = useState(DEFAULT_LOCATION.latitude.toString());\n    const [longitude, setLongitude] = useState(DEFAULT_LOCATION.longitude.toString());\n    const [address, setAddress] = useState(DEFAULT_LOCATION.address);\n\n    // Use a simple date string instead of date picker\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [dateString, setDateString] = useState(format(new Date(), 'yyyy-MM-dd'));\n\n    // UI state\n    const [error, setError] = useState(null);\n    const [expanded, setExpanded] = useState(true);\n\n    // Get geolocation hook\n    const { location, loading: geoLoading, error: geoError, getCurrentPosition } = useGeolocation();\n\n    // Prayer times context\n    const { params, updateParams } = usePrayerTimes();\n\n    // Update form when location is obtained via geolocation\n    useEffect(() => {\n        if (location) {\n            setLatitude(location.latitude.toFixed(6));\n            setLongitude(location.longitude.toFixed(6));\n            setLocationType('coordinates');\n\n            // Update params in context\n            updateParams({\n                latitude: location.latitude,\n                longitude: location.longitude\n            });\n        }\n    }, [location, updateParams]);\n\n    // Handle location type change\n    const handleLocationTypeChange = (event) => {\n        setLocationType(event.target.value);\n    };\n\n    // Handle date change\n    const handleDateChange = (event) => {\n        const newDateStr = event.target.value;\n        setDateString(newDateStr);\n\n        // Convert to Date object if valid\n        const dateObj = new Date(newDateStr);\n        if (!isNaN(dateObj.getTime())) {\n            setSelectedDate(dateObj);\n        }\n    };\n\n    // Handle form submission\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setError(null);\n\n        try {\n            // Validate inputs\n            if (locationType === 'coordinates') {\n                const lat = parseFloat(latitude);\n                const lng = parseFloat(longitude);\n\n                if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {\n                    throw new Error('Please enter valid coordinates. Latitude must be between -90 and 90, longitude between -180 and 180.');\n                }\n\n                // Update params\n                updateParams({\n                    latitude: lat,\n                    longitude: lng\n                });\n\n                // Call onSubmit if provided\n                if (onSubmit) {\n                    onSubmit({\n                        type: 'coordinates',\n                        data: { latitude: lat, longitude: lng },\n                        date: selectedDate\n                    });\n                }\n            } else {\n                // Address validation\n                if (!address || address.trim() === '') {\n                    throw new Error('Please enter a valid address.');\n                }\n\n                // Call onSubmit if provided\n                if (onSubmit) {\n                    onSubmit({\n                        type: 'address',\n                        data: { address },\n                        date: selectedDate\n                    });\n                }\n            }\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    // Handle geolocation button click\n    const handleUseMyLocation = () => {\n        getCurrentPosition();\n    };\n\n    // Toggle form expansion\n    const toggleExpanded = () => {\n        setExpanded(!expanded);\n    };\n\n    return (\n        <Card elevation={2}>\n            <CardHeader\n                title={\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <LocationOnIcon sx={{ mr: 1, color: 'primary.main' }} />\n                        <Typography variant=\"h6\" component=\"span\">Location</Typography>\n                        <Button\n                            size=\"small\"\n                            onClick={toggleExpanded}\n                            sx={{ ml: 'auto' }}\n                            endIcon={<ExpandMoreIcon sx={{\n                                transform: expanded ? 'rotate(180deg)' : 'rotate(0deg)',\n                                transition: 'transform 0.3s'\n                            }} />}\n                        >\n                            {expanded ? 'Hide' : 'Show'}\n                        </Button>\n                    </Box>\n                }\n                sx={{\n                    bgcolor: 'background.default',\n                    borderBottom: '1px solid',\n                    borderColor: 'divider'\n                }}\n            />\n            <Collapse in={expanded}>\n                <CardContent>\n                    <form onSubmit={handleSubmit}>\n                        <FormControl component=\"fieldset\" sx={{ mb: 2, width: '100%' }}>\n                            <FormLabel component=\"legend\">Location Method</FormLabel>\n                            <RadioGroup\n                                row\n                                name=\"location-type\"\n                                value={locationType}\n                                onChange={handleLocationTypeChange}\n                            >\n                                <FormControlLabel\n                                    value=\"coordinates\"\n                                    control={<Radio />}\n                                    label=\"Coordinates\"\n                                />\n                                <FormControlLabel\n                                    value=\"address\"\n                                    control={<Radio />}\n                                    label=\"Address / City\"\n                                />\n                            </RadioGroup>\n                        </FormControl>\n\n                        {geoError && (\n                            <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                                {geoError.message || 'Unable to get your location. Please enter it manually.'}\n                            </Alert>\n                        )}\n\n                        {error && (\n                            <Alert severity=\"error\" sx={{ mb: 2 }}>\n                                {error}\n                            </Alert>\n                        )}\n\n                        <Box sx={{ display: locationType === 'coordinates' ? 'block' : 'none' }}>\n                            <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n                                <TextField\n                                    label=\"Latitude\"\n                                    value={latitude}\n                                    onChange={(e) => setLatitude(e.target.value)}\n                                    type=\"number\"\n                                    inputProps={{ step: 0.000001 }}\n                                    fullWidth\n                                    required={locationType === 'coordinates'}\n                                    helperText=\"Between -90 and 90\"\n                                    InputLabelProps={{ shrink: true }}\n                                    placeholder=\"e.g., 28.6694\"\n                                />\n                                <TextField\n                                    label=\"Longitude\"\n                                    value={longitude}\n                                    onChange={(e) => setLongitude(e.target.value)}\n                                    type=\"number\"\n                                    inputProps={{ step: 0.000001 }}\n                                    fullWidth\n                                    required={locationType === 'coordinates'}\n                                    helperText=\"Between -180 and 180\"\n                                    InputLabelProps={{ shrink: true }}\n                                    placeholder=\"e.g., -81.4279\"\n                                />\n                            </Box>\n                            <Button\n                                startIcon={geoLoading ? <CircularProgress size={20} /> : <MyLocationIcon />}\n                                onClick={handleUseMyLocation}\n                                disabled={geoLoading}\n                                variant=\"outlined\"\n                                size=\"small\"\n                                fullWidth\n                                sx={{ mb: 2 }}\n                            >\n                                {geoLoading ? 'Getting Location...' : 'Use My Current Location'}\n                            </Button>\n                        </Box>\n\n                        <Box sx={{ display: locationType === 'address' ? 'block' : 'none', mb: 2 }}>\n                            <TextField\n                                label=\"Address or City\"\n                                value={address}\n                                onChange={(e) => setAddress(e.target.value)}\n                                required={locationType === 'address'}\n                                fullWidth\n                                placeholder=\"e.g., Orlando, FL\"\n                                InputLabelProps={{ shrink: true }}\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment position=\"start\">\n                                            <SearchIcon />\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </Box>\n\n                        <TextField\n                            label=\"Date\"\n                            type=\"date\"\n                            value={dateString}\n                            onChange={handleDateChange}\n                            fullWidth\n                            margin=\"normal\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <CalendarMonthIcon />\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            fullWidth\n                            size=\"large\"\n                            sx={{ mt: 2 }}\n                            startIcon={<LocationOnIcon />}\n                        >\n                            Set Location\n                        </Button>\n                    </form>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n};\n\nexport default LocationForm;","import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Card,\n    CardContent,\n    Typography,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Button,\n    Grid\n} from '@mui/material';\nimport {\n    CALCULATION_METHODS,\n    JURISTIC_METHODS,\n    HIGH_LATITUDE_METHODS,\n    MIDNIGHT_MODES\n} from '../../utils/constants';\nimport { usePrayerTimes } from '../../contexts/PrayerTimesContext';\n\nconst CalculationMethodForm = ({ onSubmit }) => {\n    const { params } = usePrayerTimes();\n\n    // Initialize form state from context params\n    const [formData, setFormData] = useState({\n        method: params.method || 2, // Default to ISNA if not set\n        school: params.school || 0, // Default to Standard\n        latitudeAdjustmentMethod: params.latitudeAdjustmentMethod || 3, // Default to ANGLE_BASED (3)\n        midnightMode: params.midnightMode || 0 // Default to STANDARD (0)\n    });\n\n    // Update form when params change externally\n    useEffect(() => {\n        setFormData({\n            method: params.method || 2,\n            school: params.school || 0,\n            // Convert string values to numeric for MUI Select\n            latitudeAdjustmentMethod: convertLatitudeMethodToNumeric(params.latitudeAdjustmentMethod),\n            midnightMode: convertMidnightModeToNumeric(params.midnightMode)\n        });\n    }, [params]);\n\n    // Helper function to convert string latitude method to numeric for MUI Select\n    function convertLatitudeMethodToNumeric(methodString) {\n        const methodMap = {\n            'NONE': 0,\n            'NIGHT_MIDDLE': 1,\n            'ONE_SEVENTH': 2,\n            'ANGLE_BASED': 3\n        };\n        return methodString && methodMap[methodString] !== undefined ? methodMap[methodString] : 3;\n    }\n\n    // Helper function to convert numeric latitude method back to string\n    function convertLatitudeMethodToString(methodNumeric) {\n        const methodMap = {\n            0: 'NONE',\n            1: 'NIGHT_MIDDLE',\n            2: 'ONE_SEVENTH',\n            3: 'ANGLE_BASED'\n        };\n        return methodNumeric !== undefined ? methodMap[methodNumeric] : 'ANGLE_BASED';\n    }\n\n    // Helper function to convert string midnight mode to numeric for MUI Select\n    function convertMidnightModeToNumeric(modeString) {\n        const modeMap = {\n            'STANDARD': 0,\n            'JAFARI': 1\n        };\n        return modeString && modeMap[modeString] !== undefined ? modeMap[modeString] : 0;\n    }\n\n    // Helper function to convert numeric midnight mode back to string\n    function convertMidnightModeToString(modeNumeric) {\n        const modeMap = {\n            0: 'STANDARD',\n            1: 'JAFARI'\n        };\n        return modeNumeric !== undefined ? modeMap[modeNumeric] : 'STANDARD';\n    }\n\n    const handleChange = (e) => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // Convert numeric values back to strings for API\n        const submissionData = {\n            ...formData,\n            latitudeAdjustmentMethod: convertLatitudeMethodToString(formData.latitudeAdjustmentMethod),\n            midnightMode: convertMidnightModeToString(formData.midnightMode)\n        };\n\n        onSubmit(submissionData);\n    };\n\n    return (\n        <Card>\n            <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                    Calculation Settings\n                </Typography>\n\n                <Box component=\"form\" onSubmit={handleSubmit}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <FormControl fullWidth margin=\"normal\">\n                                <InputLabel id=\"method-label\">Calculation Method</InputLabel>\n                                <Select\n                                    labelId=\"method-label\"\n                                    id=\"method\"\n                                    name=\"method\"\n                                    value={formData.method}\n                                    label=\"Calculation Method\"\n                                    onChange={handleChange}\n                                >\n                                    {CALCULATION_METHODS.map((method) => (\n                                        <MenuItem key={method.id} value={method.id}>\n                                            {method.name}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth margin=\"normal\">\n                                <InputLabel id=\"school-label\">Juristic Method</InputLabel>\n                                <Select\n                                    labelId=\"school-label\"\n                                    id=\"school\"\n                                    name=\"school\"\n                                    value={formData.school}\n                                    label=\"Juristic Method\"\n                                    onChange={handleChange}\n                                >\n                                    {JURISTIC_METHODS.map((method) => (\n                                        <MenuItem key={method.id} value={method.id}>\n                                            {method.name}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth margin=\"normal\">\n                                <InputLabel id=\"latitude-method-label\">High Latitude Method</InputLabel>\n                                <Select\n                                    labelId=\"latitude-method-label\"\n                                    id=\"latitudeAdjustmentMethod\"\n                                    name=\"latitudeAdjustmentMethod\"\n                                    value={formData.latitudeAdjustmentMethod}\n                                    label=\"High Latitude Method\"\n                                    onChange={handleChange}\n                                >\n                                    {/* Use numeric IDs for MUI Select */}\n                                    <MenuItem value={0}>None</MenuItem>\n                                    <MenuItem value={1}>Middle of Night</MenuItem>\n                                    <MenuItem value={2}>1/7th of Night</MenuItem>\n                                    <MenuItem value={3}>Angle Based</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth margin=\"normal\">\n                                <InputLabel id=\"midnight-mode-label\">Midnight Mode</InputLabel>\n                                <Select\n                                    labelId=\"midnight-mode-label\"\n                                    id=\"midnightMode\"\n                                    name=\"midnightMode\"\n                                    value={formData.midnightMode}\n                                    label=\"Midnight Mode\"\n                                    onChange={handleChange}\n                                >\n                                    {/* Use numeric IDs for MUI Select */}\n                                    <MenuItem value={0}>Standard (Mid Sunset to Sunrise)</MenuItem>\n                                    <MenuItem value={1}>Jafari (Mid Sunset to Fajr)</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <Box sx={{ mt: 2 }}>\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    fullWidth\n                                >\n                                    Apply Settings\n                                </Button>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default CalculationMethodForm;","import React, { memo } from 'react';\nimport {\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    Typography,\n    Skeleton,\n    Card,\n    CardContent,\n    CircularProgress\n} from '@mui/material';\nimport { usePrayerTimes } from '../../contexts/PrayerTimesContext';\nimport {\n    CALCULATION_METHODS,\n    HIGH_LATITUDE_METHODS,\n    JURISTIC_METHODS,\n    MIDNIGHT_MODES\n} from '../../utils/constants';\n\n// Helper functions defined outside component to prevent recreation on each render\nconst formatLatitudeMethod = (methodValue) => {\n    // If it's a number, convert to string representation\n    if (typeof methodValue === 'number') {\n        const methods = {\n            0: 'NONE',\n            1: 'NIGHT_MIDDLE',\n            2: 'ONE_SEVENTH',\n            3: 'ANGLE_BASED'\n        };\n        return methods[methodValue] ? methods[methodValue].replace('_', ' ') : 'ANGLE BASED';\n    }\n\n    // Now that we have a string, format it for display\n    return methodValue ? methodValue.replace('_', ' ') : 'ANGLE BASED';\n};\n\nconst formatMidnightMode = (modeValue) => {\n    // If it's a number, convert to string representation\n    if (typeof modeValue === 'number') {\n        const modes = {\n            0: 'STANDARD',\n            1: 'JAFARI'\n        };\n        return modes[modeValue] || 'STANDARD';\n    }\n\n    return modeValue || 'STANDARD';\n};\n\nconst getMethodName = (methodId) => {\n    const method = CALCULATION_METHODS.find(m => m.id === methodId);\n    return method ? method.name : 'Unknown';\n};\n\nconst getJuristicName = (juristicId) => {\n    const method = JURISTIC_METHODS.find(m => m.id === juristicId);\n    return method ? method.name : 'Standard';\n};\n\nconst formatIslamicDate = (hijriDate) => {\n    if (!hijriDate) return '';\n    return `${hijriDate.day} ${hijriDate.month.en} ${hijriDate.year} AH`;\n};\n\n// Use memo to prevent unnecessary re-renders\nconst PrayerTimesDisplay = memo(({ prayerTimes, loading }) => {\n    const { params, hijriDate } = usePrayerTimes();\n\n    // If prayer times are loading or unavailable, show loading indicator\n    if (loading || !prayerTimes || Object.keys(prayerTimes).length === 0) {\n        return (\n            <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n                <CircularProgress />\n                <Typography variant=\"body1\" sx={{ ml: 2 }}>\n                    Loading prayer times...\n                </Typography>\n            </Box>\n        );\n    }\n\n    // Filter unwanted prayers once\n    const filteredPrayers = Object.entries(prayerTimes)\n        .filter(([key]) => !['Sunset', 'Imsak', 'Firstthird', 'Lastthird'].includes(key));\n\n    // Pre-calculate values to avoid doing it in JSX\n    const locationText = params.address || `${params.latitude}, ${params.longitude}`;\n    const dateText = hijriDate ? formatIslamicDate(hijriDate) : '';\n    const calculationMethod = getMethodName(params.method);\n    const juristicMethod = getJuristicName(params.school);\n\n    // Try-catch to safely handle any potential errors in formatting\n    let latitudeMethodText, midnightModeText;\n    try {\n        latitudeMethodText = formatLatitudeMethod(params.latitudeAdjustmentMethod);\n        midnightModeText = formatMidnightMode(params.midnightMode);\n    } catch (error) {\n        console.error(\"Error formatting params:\", error);\n        latitudeMethodText = \"Angle Based\";\n        midnightModeText = \"Standard\";\n    }\n\n    return (\n        <Box>\n            {/* Prayer times table */}\n            <Card sx={{ mb: 4 }}>\n                <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>Prayer Times</Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                        {locationText}\n                        {dateText && ` - ${dateText}`}\n                    </Typography>\n\n                    <TableContainer component={Paper} variant=\"outlined\">\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell><strong>Prayer</strong></TableCell>\n                                    <TableCell align=\"right\"><strong>Time</strong></TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {filteredPrayers.map(([prayer, time]) => (\n                                    <TableRow key={prayer}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {prayer}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{time}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </CardContent>\n            </Card>\n\n            {/* Calculation settings info */}\n            <Card>\n                <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>Calculation Settings</Typography>\n                    <TableContainer component={Paper} variant=\"outlined\">\n                        <Table size=\"small\">\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell component=\"th\" scope=\"row\">Calculation Method</TableCell>\n                                    <TableCell align=\"right\">{calculationMethod}</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component=\"th\" scope=\"row\">Juristic Method (Asr)</TableCell>\n                                    <TableCell align=\"right\">{juristicMethod}</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component=\"th\" scope=\"row\">High Latitude Adjustment</TableCell>\n                                    <TableCell align=\"right\">{latitudeMethodText}</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component=\"th\" scope=\"row\">Midnight Mode</TableCell>\n                                    <TableCell align=\"right\">{midnightModeText}</TableCell>\n                                </TableRow>\n                                {params.timezone && (\n                                    <TableRow>\n                                        <TableCell component=\"th\" scope=\"row\">Timezone</TableCell>\n                                        <TableCell align=\"right\">{params.timezone}</TableCell>\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </CardContent>\n            </Card>\n        </Box>\n    );\n});\n\nPrayerTimesDisplay.displayName = 'PrayerTimesDisplay';\n\nexport default PrayerTimesDisplay;","import React, { useRef, useEffect, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { formatTime12Hour } from '../../utils/formatters';\n\nconst PrayerClock = ({\n    prayerTime,\n    remaining,\n    progress,\n    prayerName,\n    cityName,\n    islamicDate,\n    isCompact = false,\n    isNearPrayer = false,\n    clockSize = 180,\n}) => {\n    const theme = useTheme();\n    const canvasRef = useRef(null);\n    const [currentTime, setCurrentTime] = useState(new Date());\n    const [fadeIn, setFadeIn] = useState(0);\n    const [rotation, setRotation] = useState(-0.1);\n    const [scale, setScale] = useState(isCompact ? 1 : 0.8);\n\n    // Animation frame reference\n    const animationRef = useRef();\n\n    // Set up the clock and animations\n    useEffect(() => {\n        // Start fade-in animation\n        const fadeTimer = setTimeout(() => {\n            setFadeIn(1);\n            setRotation(0);\n        }, 100);\n\n        // Set up pulse animation for large clock\n        if (!isCompact) {\n            let direction = 1;\n            let currentScale = 1;\n\n            const animatePulse = () => {\n                if (currentScale >= 1.2) direction = -1;\n                if (currentScale <= 0.8) direction = 1;\n\n                currentScale += direction * 0.005;\n                setScale(currentScale);\n\n                animationRef.current = requestAnimationFrame(animatePulse);\n            };\n\n            animationRef.current = requestAnimationFrame(animatePulse);\n        }\n\n        // Update the current time every second\n        const timer = !isCompact ? setInterval(() => {\n            setCurrentTime(new Date());\n        }, 1000) : null;\n\n        // Clean up animations and timer\n        return () => {\n            clearTimeout(fadeTimer);\n            if (timer) clearInterval(timer);\n            if (animationRef.current) cancelAnimationFrame(animationRef.current);\n        };\n    }, [isCompact]);\n\n    // Update the useEffect for drawing the clock\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const ctx = canvas.getContext('2d');\n        const timeToShow = isCompact ? new Date(prayerTime) : currentTime;\n\n        // Set canvas size based on clockSize prop and device pixel ratio\n        const dpr = window.devicePixelRatio || 1;\n        // Use clockSize directly here instead of hardcoded values\n        const size = clockSize;\n        canvas.width = size * dpr;\n        canvas.height = size * dpr;\n        ctx.scale(dpr, dpr);\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // Draw clock\n        drawClock(ctx, size, timeToShow, theme.palette.primary.main, theme.palette.divider);\n\n        // Draw progress ring\n        drawProgressRing(ctx, size, progress, theme.palette.primary.main, theme.palette.divider);\n\n    }, [currentTime, prayerTime, progress, isCompact, isNearPrayer, theme, clockSize]); // Add clockSize to deps\n\n    // Helper function to draw the clock face\n    const drawClock = (ctx, size, time, color, bgColor) => {\n        const center = { x: size / 2, y: size / 2 };\n        const radius = (size / 2) - (size * 0.02); // Scale border with size\n        \n        // Scale lineWidths with size\n        const mainLineWidth = size * 0.02;\n        const hourLineWidth = size * 0.02;\n        const minuteLineWidth = size * 0.01;\n        const secondLineWidth = size * 0.005;\n        \n        // Draw clock face\n        ctx.beginPath();\n        ctx.arc(center.x, center.y, radius, 0, 2 * Math.PI);\n        ctx.strokeStyle = bgColor;\n        ctx.lineWidth = mainLineWidth;\n        ctx.stroke();\n        \n        // Draw hour markers - scale with size\n        for (let i = 0; i < 12; i++) {\n            const angle = i * Math.PI / 6;\n            const isMainMarker = i % 3 === 0;\n            \n            ctx.beginPath();\n            ctx.strokeStyle = isMainMarker ? color : `${color}B3`;\n            ctx.lineWidth = isMainMarker ? size * 0.015 : size * 0.005;\n            \n            const markerLength = isMainMarker ? size * 0.08 : size * 0.04;\n            const outerX = center.x + (radius - size * 0.04) * Math.cos(angle);\n            const outerY = center.y + (radius - size * 0.04) * Math.sin(angle);\n            const innerX = center.x + (radius - size * 0.04 - markerLength) * Math.cos(angle);\n            const innerY = center.y + (radius - size * 0.04 - markerLength) * Math.sin(angle);\n            \n            ctx.moveTo(innerX, innerY);\n            ctx.lineTo(outerX, outerY);\n            ctx.stroke();\n        }\n        \n        // Draw hour hand - scale with size\n        const hours = time.getHours() % 12;\n        const minutes = time.getMinutes();\n        const hourAngle = (hours + minutes / 60) * Math.PI / 6 - Math.PI / 2;\n        \n        ctx.beginPath();\n        ctx.lineWidth = hourLineWidth;\n        ctx.strokeStyle = color;\n        ctx.moveTo(center.x, center.y);\n        ctx.lineTo(\n            center.x + radius * 0.4 * Math.cos(hourAngle),\n            center.y + radius * 0.4 * Math.sin(hourAngle)\n        );\n        ctx.stroke();\n        \n        // Draw minute hand - scale with size\n        const minuteAngle = minutes * Math.PI / 30 - Math.PI / 2;\n        \n        ctx.beginPath();\n        ctx.lineWidth = minuteLineWidth;\n        ctx.strokeStyle = color;\n        ctx.moveTo(center.x, center.y);\n        ctx.lineTo(\n            center.x + radius * 0.6 * Math.cos(minuteAngle),\n            center.y + radius * 0.6 * Math.sin(minuteAngle)\n        );\n        ctx.stroke();\n        \n        // Rest of the function remains similar but with scaled values\n        const seconds = time.getSeconds();\n        const secondAngle = seconds * Math.PI / 30 - Math.PI / 2;\n\n        // Draw glow effect for seconds hand\n        ctx.beginPath();\n        ctx.lineWidth = secondLineWidth * 2;\n        ctx.strokeStyle = `${color}4D`; // 30% opacity\n        ctx.lineCap = 'round';\n        ctx.shadowColor = color;\n        ctx.shadowBlur = size * 0.02;\n        ctx.moveTo(center.x, center.y);\n        ctx.lineTo(\n            center.x + radius * 0.7 * Math.cos(secondAngle),\n            center.y + radius * 0.7 * Math.sin(secondAngle)\n        );\n        ctx.stroke();\n        ctx.shadowBlur = 0; // Reset shadow\n\n        // Draw the actual second hand\n        ctx.beginPath();\n        ctx.lineWidth = secondLineWidth;\n        ctx.strokeStyle = color;\n        ctx.moveTo(center.x, center.y);\n        ctx.lineTo(\n            center.x + radius * 0.7 * Math.cos(secondAngle),\n            center.y + radius * 0.7 * Math.sin(secondAngle)\n        );\n        ctx.stroke();\n\n        // Draw glowing center dot\n        ctx.beginPath();\n        ctx.fillStyle = `${color}66`; // 40% opacity\n        ctx.shadowColor = color;\n        ctx.shadowBlur = size * 0.02;\n        ctx.arc(center.x, center.y, size * 0.02, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.shadowBlur = 0; // Reset shadow\n\n        // Draw solid center dot - scale with size\n        ctx.beginPath();\n        ctx.fillStyle = color;\n        ctx.arc(center.x, center.y, isCompact ? size * 0.01 : size * 0.015, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n\n    // Helper function to draw the progress ring - scale with size\n    const drawProgressRing = (ctx, size, progress, color, bgColor) => {\n        const center = { x: size / 2, y: size / 2 };\n        const radius = (size / 2) - (isCompact ? size * 0.02 : size * 0.04);\n        const strokeWidth = isCompact ? size * 0.02 : size * 0.04;\n\n        // Draw background circle\n        ctx.beginPath();\n        ctx.arc(center.x, center.y, radius, 0, 2 * Math.PI);\n        ctx.strokeStyle = `${bgColor}1A`; // 10% opacity\n        ctx.lineWidth = strokeWidth;\n        ctx.stroke();\n\n        // Create gradient for progress arc\n        const gradient = ctx.createLinearGradient(\n            center.x - radius, center.y,\n            center.x + radius, center.y\n        );\n        gradient.addColorStop(0, `${color}B3`); // 70% opacity\n        gradient.addColorStop(1, color);\n\n        // Draw progress arc\n        ctx.beginPath();\n        ctx.arc(\n            center.x, center.y, radius,\n            -Math.PI / 2, // Start at the top\n            -Math.PI / 2 + (2 * Math.PI * progress), // End based on progress\n            false // Counter-clockwise = false\n        );\n        ctx.strokeStyle = gradient;\n        ctx.lineWidth = strokeWidth;\n        ctx.lineCap = 'round';\n        ctx.stroke();\n    };\n\n    // Helper function to render time boxes (hours, minutes)\n    const renderTimeBox = (value) => {\n        // Calculate size based on clockSize but with minimum/maximum boundaries\n        const fontSize = isCompact ? \n            Math.min(Math.max(clockSize * 0.09, 9), 14) : // Min 9px, max 14px for compact\n            Math.min(Math.max(clockSize * 0.12, 12), 20); // Min 12px, max 20px for full\n            \n        const padding = isCompact ? \n            `${Math.min(Math.max(clockSize * 0.01, 2), 4)}px ${Math.min(Math.max(clockSize * 0.02, 4), 8)}px` : \n            `${Math.min(Math.max(clockSize * 0.013, 3), 6)}px ${Math.min(Math.max(clockSize * 0.027, 6), 12)}px`;\n\n        const borderRadius = isCompact ? \n            Math.min(Math.max(clockSize * 0.01, 2), 4) : \n            Math.min(Math.max(clockSize * 0.02, 4), 8);\n\n        return (\n            <Box\n                sx={{\n                    padding,\n                    backgroundColor: `${theme.palette.primary.main}1A`,\n                    borderRadius,\n                    display: 'inline-block'\n                }}\n            >\n                <Typography\n                    sx={{\n                        color: theme.palette.text.primary,\n                        fontSize,\n                        fontWeight: 'bold',\n                        lineHeight: 1,\n                    }}\n                >\n                    {String(value).padStart(2, '0')}\n                </Typography>\n            </Box>\n        );\n    };\n\n    // Format remaining time for display\n    const formatRemaining = () => {\n        const hours = Math.floor(remaining / 3600000);\n        const minutes = Math.floor((remaining % 3600000) / 60000);\n        return `${hours}h ${minutes}m`;\n    };\n\n    const timeToShow = isCompact ? new Date(prayerTime) : currentTime;\n\n    return (\n        <Box\n            sx={{\n                opacity: fadeIn,\n                transform: `rotate(${rotation}deg) scale(${scale})`,\n                transition: 'opacity 0.5s ease, transform 0.5s ease-out',\n                position: 'relative',\n                width: clockSize,\n                height: clockSize,\n                margin: '0 auto',\n                \n            }}\n        >\n            \n            {/* Clock Canvas */}\n            <canvas\n                ref={canvasRef}\n                style={{\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: clockSize,\n                    height: clockSize,\n                }}\n            />\n\n            {/* Digital Time and Info */}\n            <Box\n                sx={{\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    textAlign: 'center',\n                    width: clockSize * 0.8, // Scale with clock size\n                    maxWidth: '90%', // Prevent overflow\n                }}\n            >\n                {!isCompact && (\n                    <>\n                        <Typography\n                            variant=\"caption\"\n                            sx={{\n                                color: `${theme.palette.text.secondary}B3`,\n                                fontSize: clockSize * 0.045, // Scale with clock size\n                                display: 'block',\n                            }}\n                        >\n                            {islamicDate}\n                        </Typography>\n                        <Typography\n                            variant=\"caption\"\n                            sx={{\n                                color: `${theme.palette.text.secondary}B3`,\n                                fontSize: clockSize * 0.055, // Scale with clock size\n                                fontWeight: 500,\n                                display: 'block',\n                                mb: clockSize * 0.008, // Scale with clock size\n                            }}\n                        >\n                            {cityName}\n                        </Typography>\n                    </>\n                )}\n                \n\n                {/* Digital Time Display */}\n                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                    {renderTimeBox(timeToShow.getHours())}\n                    <Typography\n                        sx={{\n                            color: theme.palette.text.primary,\n                            fontSize: isCompact ? clockSize * 0.11 : clockSize * 0.14, // Scale with clock size\n                            mx: 0.5,\n                            lineHeight: 1,\n                        }}\n                    >:</Typography>\n                    {renderTimeBox(timeToShow.getMinutes())}\n                </Box>\n\n                {/* Prayer Name or Countdown */}\n                {isCompact ? (\n                    <Typography\n                        variant=\"body2\"\n                        sx={{\n                            color: `${theme.palette.text.primary}E6`,\n                            fontSize: clockSize * 0.067, // Scale with clock size\n                            fontWeight: 500,\n                            mt: 0.5,\n                        }}\n                    >\n                        {prayerName}\n                    </Typography>\n                ) : (\n                    <Typography\n                        variant=\"body2\"\n                        sx={{\n                            color: `${theme.palette.text.secondary}B3`,\n                            fontSize: clockSize * 0.067, // Scale with clock size\n                            mt: 0.5,\n                        }}\n                    >\n                        {formatRemaining()}\n                    </Typography>\n                )}\n            </Box>\n        </Box>\n    );\n};\n\nexport default PrayerClock;","import React, { useRef, useEffect, useState } from 'react';\nimport { Box, Typography, Card, CardContent, useMediaQuery } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nconst CountdownClock = ({\n    targetTime,\n    title,\n    subtitle,\n    description\n}) => {\n    const theme = useTheme();\n    const canvasRef = useRef(null);\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n    const [scale, setScale] = useState(1);\n\n    // Responsive breakpoints\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n    const isMedium = useMediaQuery(theme.breakpoints.down('md'));\n\n    // Animation frame ref\n    const animationFrameRef = useRef(null);\n\n    // Calculate time left between now and target time\n    function calculateTimeLeft() {\n        const difference = targetTime - new Date();\n\n        if (difference <= 0) {\n            return {\n                hours: 0,\n                minutes: 0,\n                seconds: 0,\n                total: 0\n            };\n        }\n\n        return {\n            hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n            minutes: Math.floor((difference / 1000 / 60) % 60),\n            seconds: Math.floor((difference / 1000) % 60),\n            total: difference\n        };\n    }\n\n    // Set up pulse animation and timer\n    useEffect(() => {\n        // Update countdown every second\n        const timer = setInterval(() => {\n            setTimeLeft(calculateTimeLeft());\n        }, 1000);\n\n        // Set up pulse animation\n        let direction = 1;\n        let currentScale = 1;\n\n        const animatePulse = () => {\n            if (currentScale >= 1.05) direction = -1;\n            if (currentScale <= 0.95) direction = 1;\n\n            currentScale += direction * 0.002;\n            setScale(currentScale);\n\n            animationFrameRef.current = requestAnimationFrame(animatePulse);\n        };\n\n        animationFrameRef.current = requestAnimationFrame(animatePulse);\n\n        return () => {\n            clearInterval(timer);\n            if (animationFrameRef.current) {\n                cancelAnimationFrame(animationFrameRef.current);\n            }\n        };\n    }, [targetTime]);\n\n    // Draw clock face and countdown\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        // Determine appropriate size based on screen size\n        const size = isMobile ? 240 : 300;\n\n        const ctx = canvas.getContext('2d');\n\n        // Set canvas size accounting for device pixel ratio\n        const dpr = window.devicePixelRatio || 1;\n        canvas.width = size * dpr;\n        canvas.height = size * dpr;\n        ctx.scale(dpr, dpr);\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // Calculate progress for clock face\n        const totalSeconds = 60 * 60; // 1 hour standard\n        const remainingSeconds = (timeLeft.hours * 3600) + (timeLeft.minutes * 60) + timeLeft.seconds;\n        const progress = Math.min(remainingSeconds / totalSeconds, 1);\n\n        // Draw countdown clock\n        drawCountdownClock(ctx, size, progress);\n\n    }, [timeLeft, isMobile]);\n\n    // Draw the countdown clock face\n    const drawCountdownClock = (ctx, size, progress) => {\n        const center = { x: size / 2, y: size / 2 };\n        const radius = (size / 2) - 10;\n        const strokeWidth = isMobile ? 6 : 8;\n\n        // Draw background circle\n        ctx.beginPath();\n        ctx.arc(center.x, center.y, radius, 0, 2 * Math.PI);\n        ctx.strokeStyle = `${theme.palette.divider}4D`; // 30% opacity\n        ctx.lineWidth = strokeWidth;\n        ctx.stroke();\n\n        // Draw progress arc\n        ctx.beginPath();\n        ctx.arc(\n            center.x, center.y, radius,\n            -Math.PI / 2, // Start at the top\n            -Math.PI / 2 + (2 * Math.PI * progress), // End based on progress\n            false // Counter-clockwise = false\n        );\n\n        // Create gradient for progress arc\n        const gradient = ctx.createLinearGradient(\n            center.x - radius, center.y,\n            center.x + radius, center.y\n        );\n        gradient.addColorStop(0, theme.palette.secondary.main);\n        gradient.addColorStop(1, theme.palette.primary.main);\n\n        ctx.strokeStyle = gradient;\n        ctx.lineWidth = strokeWidth;\n        ctx.lineCap = 'round';\n        ctx.stroke();\n\n        // Draw tick marks for hours\n        for (let i = 0; i < 12; i++) {\n            const angle = i * Math.PI / 6;\n            const isMainMarker = i % 3 === 0;\n\n            ctx.beginPath();\n            ctx.strokeStyle = isMainMarker ? theme.palette.primary.main : `${theme.palette.primary.main}99`;\n            ctx.lineWidth = isMainMarker ? 3 : 1;\n\n            const markerLength = isMainMarker ? 15 : 8;\n            const outerX = center.x + (radius + 5) * Math.cos(angle);\n            const outerY = center.y + (radius + 5) * Math.sin(angle);\n            const innerX = center.x + (radius + 5 + markerLength) * Math.cos(angle);\n            const innerY = center.y + (radius + 5 + markerLength) * Math.sin(angle);\n\n            ctx.moveTo(outerX, outerY);\n            ctx.lineTo(innerX, innerY);\n            ctx.stroke();\n        }\n    };\n\n    // Helper function to pad digits with leading zeros\n    const padDigit = (num) => {\n        return num.toString().padStart(2, '0');\n    };\n\n    // Determine size based on screen size\n    const clockSize = isMobile ? 240 : 300;\n    const fontSize = {\n        // Responsive font sizes\n        xs: isMobile ? 38 : (isMedium ? 42 : 58),\n        sm: isMobile ? 16 : 20,\n        md: isMobile ? 22 : 28\n    };\n\n    return (\n        <Card>\n            <CardContent sx={{ textAlign: 'center', p: isMobile ? 2 : 3 }}>\n                {title && (\n                    <Typography variant=\"h5\" gutterBottom color=\"primary\">\n                        {title}\n                    </Typography>\n                )}\n\n                {subtitle && (\n                    <Typography variant=\"subtitle1\" gutterBottom color=\"text.secondary\">\n                        {subtitle}\n                    </Typography>\n                )}\n\n                <Box\n                    sx={{\n                        position: 'relative',\n                        width: clockSize,\n                        height: clockSize,\n                        margin: '0 auto',\n                        transform: `scale(${scale})`,\n                        transition: 'transform 0.2s ease-in-out'\n                    }}\n                >\n                    {/* Clock Canvas */}\n                    <canvas\n                        ref={canvasRef}\n                        style={{ position: 'absolute', top: 0, left: 0 }}\n                    />\n\n                    {/* Digital Countdown */}\n                    <Box\n                        sx={{\n                            position: 'absolute',\n                            top: '50%',\n                            left: '50%',\n                            transform: 'translate(-50%, -50%)',\n                            width: '100%',\n                            textAlign: 'center'\n                        }}\n                    >\n                        <Typography\n                            sx={{\n                                fontWeight: 700,\n                                lineHeight: 1.1,\n                                mb: 1,\n                                fontSize: fontSize.xs,  // Smaller font size\n                                fontFamily: 'monospace',  // Fixed-width font for better alignment\n                                letterSpacing: '-0.05em'  // Tighter letter spacing\n                            }}\n                        >\n                            {padDigit(timeLeft.hours)}:{padDigit(timeLeft.minutes)}:{padDigit(timeLeft.seconds)}\n                        </Typography>\n\n                        {description && (\n                            <Typography\n                                variant=\"subtitle1\"\n                                sx={{\n                                    color: theme.palette.text.secondary,\n                                    mt: 1,\n                                    fontSize: fontSize.sm\n                                }}\n                            >\n                                {description}\n                            </Typography>\n                        )}\n                    </Box>\n                </Box>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default CountdownClock;","import React, { useState, useEffect } from 'react';\nimport { Box, Grid, Card, CardContent, Typography, Divider, CircularProgress, Paper } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { usePrayerTimes } from '../../contexts/PrayerTimesContext';\nimport PrayerClock from './PrayerClock';\nimport CountdownClock from './CountdownClock';\nimport { formatTime12Hour } from '../../utils/formatters';\n\n// Enable this for debugging\nconst DEBUG = true;\n\nconst EnhancedPrayerTimesDisplay = () => {\n    const theme = useTheme();\n    const { prayerTimes, hijriDate, params, loading, fetchPrayerTimesByCoordinates } = usePrayerTimes();\n\n    const [currentTime, setCurrentTime] = useState(new Date());\n    const [nextPrayer, setNextPrayer] = useState(null);\n    const [remainingTime, setRemainingTime] = useState(null);\n    const [progress, setProgress] = useState(0);\n    const [calculationState, setCalculationState] = useState('initial');\n\n    // Debug logging\n    useEffect(() => {\n        if (DEBUG) {\n            console.log(\"Prayer Times State:\", {\n                prayerTimes,\n                loading,\n                nextPrayer,\n                calculationState\n            });\n        }\n    }, [prayerTimes, loading, nextPrayer, calculationState]);\n\n    // Update current time every second\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setCurrentTime(new Date());\n        }, 1000);\n\n        return () => clearInterval(timer);\n    }, []);\n\n    // Try to refresh data if it's not available\n    useEffect(() => {\n        if (!prayerTimes && !loading && typeof fetchPrayerTimesByCoordinates === 'function') {\n            if (DEBUG) console.log(\"No prayer times available, attempting to fetch...\");\n            fetchPrayerTimesByCoordinates();\n        }\n    }, [prayerTimes, loading, fetchPrayerTimesByCoordinates]);\n\n    // Calculate next prayer time and countdown\n    useEffect(() => {\n        if (!prayerTimes) {\n            if (DEBUG) console.log(\"No prayer times data available\");\n            return;\n        }\n\n        try {\n            setCalculationState('calculating');\n\n            if (DEBUG) {\n                console.log(\"Starting prayer time calculation with:\", prayerTimes);\n            }\n\n            // Main prayer times\n            const mainPrayers = [\n                { name: 'Fajr', time: prayerTimes.Fajr },\n                { name: 'Dhuhr', time: prayerTimes.Dhuhr },\n                { name: 'Asr', time: prayerTimes.Asr },\n                { name: 'Maghrib', time: prayerTimes.Maghrib },\n                { name: 'Isha', time: prayerTimes.Isha }\n            ];\n\n            // Check for valid prayer times\n            const validPrayers = mainPrayers.filter(p => p.time && typeof p.time === 'string');\n\n            if (validPrayers.length === 0) {\n                if (DEBUG) console.error(\"No valid prayer times found:\", mainPrayers);\n                setCalculationState('no-valid-prayers');\n                return;\n            }\n\n            const now = currentTime;\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n            const currentTotalMinutes = currentHour * 60 + currentMinute;\n\n            if (DEBUG) {\n                console.log(\"Current time:\", {\n                    currentHour,\n                    currentMinute,\n                    currentTotalMinutes\n                });\n            }\n\n            // Find next prayer\n            let nextPrayerInfo = null;\n            let previousPrayerInfo = null;\n\n            for (const prayer of mainPrayers) {\n                // Skip if time is not available or invalid\n                if (!prayer.time) {\n                    if (DEBUG) console.log(`Skipping prayer ${prayer.name}, no time available`);\n                    continue;\n                }\n\n                try {\n                    const [prayerHour, prayerMinute] = prayer.time.split(':').map(Number);\n\n                    if (isNaN(prayerHour) || isNaN(prayerMinute)) {\n                        if (DEBUG) console.log(`Invalid time for ${prayer.name}: ${prayer.time}`);\n                        continue;\n                    }\n\n                    const prayerTotalMinutes = prayerHour * 60 + prayerMinute;\n\n                    if (DEBUG) {\n                        console.log(`Processing ${prayer.name}`, {\n                            time: prayer.time,\n                            prayerHour,\n                            prayerMinute,\n                            prayerTotalMinutes,\n                            isAfterCurrent: prayerTotalMinutes > currentTotalMinutes\n                        });\n                    }\n\n                    if (prayerTotalMinutes > currentTotalMinutes) {\n                        if (!nextPrayerInfo || prayerTotalMinutes < nextPrayerInfo.totalMinutes) {\n                            nextPrayerInfo = {\n                                ...prayer,\n                                totalMinutes: prayerTotalMinutes,\n                                dateTime: new Date(\n                                    now.getFullYear(),\n                                    now.getMonth(),\n                                    now.getDate(),\n                                    prayerHour,\n                                    prayerMinute\n                                )\n                            };\n                            if (DEBUG) console.log(`Found next prayer: ${prayer.name}`);\n                        }\n                    } else {\n                        if (!previousPrayerInfo || prayerTotalMinutes > previousPrayerInfo.totalMinutes) {\n                            previousPrayerInfo = {\n                                ...prayer,\n                                totalMinutes: prayerTotalMinutes\n                            };\n                            if (DEBUG) console.log(`Found previous prayer: ${prayer.name}`);\n                        }\n                    }\n                } catch (err) {\n                    console.error(`Error processing prayer ${prayer.name}:`, err);\n                }\n            }\n\n            // After processing all prayers, ensure we have previous prayer info\n            if (nextPrayerInfo && !previousPrayerInfo) {\n                // If we have a next prayer but no previous prayer, create one\n                if (DEBUG) console.log(\"Found next prayer but no previous prayer, creating synthetic previous...\");\n\n                // Find the prayer that would logically come before the next prayer\n                const prayerOrder = ['Fajr', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'];\n                const nextPrayerBaseName = nextPrayerInfo.name.replace(' (Tomorrow)', '');\n                const nextIndex = prayerOrder.indexOf(nextPrayerBaseName);\n\n                // If next is first in order or not found, previous is the last one\n                const prevIndex = nextIndex > 0 ? nextIndex - 1 : prayerOrder.length - 1;\n                const prevPrayerName = prayerOrder[prevIndex];\n\n                // Find this prayer in mainPrayers\n                const prevPrayer = mainPrayers.find(p => p.name === prevPrayerName);\n\n                if (prevPrayer && prevPrayer.time) {\n                    const [prevHour, prevMinute] = prevPrayer.time.split(':').map(Number);\n                    if (!isNaN(prevHour) && !isNaN(prevMinute)) {\n                        previousPrayerInfo = {\n                            ...prevPrayer,\n                            totalMinutes: prevHour * 60 + prevMinute\n                        };\n\n                        if (DEBUG) console.log(`Created synthetic previous prayer: ${prevPrayerName}`);\n                    }\n                }\n                // If we still don't have a previous prayer, try using the last prayer in order\n                else if (!previousPrayerInfo) {\n                    for (let i = prayerOrder.length - 1; i >= 0; i--) {\n                        const alternatePrayer = mainPrayers.find(p => p.name === prayerOrder[i]);\n                        if (alternatePrayer && alternatePrayer.time) {\n                            const [altHour, altMinute] = alternatePrayer.time.split(':').map(Number);\n                            if (!isNaN(altHour) && !isNaN(altMinute)) {\n                                previousPrayerInfo = {\n                                    ...alternatePrayer,\n                                    totalMinutes: altHour * 60 + altMinute\n                                };\n                                if (DEBUG) console.log(`Created alternate previous prayer: ${alternatePrayer.name}`);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If no next prayer found, it's Fajr tomorrow\n            if (!nextPrayerInfo && mainPrayers[0].time) {\n                try {\n                    const fajr = mainPrayers[0];\n                    const [fajrHour, fajrMinute] = fajr.time.split(':').map(Number);\n\n                    if (!isNaN(fajrHour) && !isNaN(fajrMinute)) {\n                        const tomorrow = new Date(now);\n                        tomorrow.setDate(tomorrow.getDate() + 1);\n                        tomorrow.setHours(fajrHour, fajrMinute, 0, 0);\n\n                        nextPrayerInfo = {\n                            ...fajr,\n                            name: 'Fajr (Tomorrow)',\n                            totalMinutes: fajrHour * 60 + fajrMinute,\n                            dateTime: tomorrow\n                        };\n\n                        if (DEBUG) console.log(\"Set next prayer to tomorrow's Fajr\");\n\n                        if (!previousPrayerInfo && mainPrayers[4].time) {\n                            const [ishaHour, ishaMinute] = mainPrayers[4].time.split(':').map(Number);\n                            if (!isNaN(ishaHour) && !isNaN(ishaMinute)) {\n                                previousPrayerInfo = {\n                                    ...mainPrayers[4],\n                                    totalMinutes: ishaHour * 60 + ishaMinute\n                                };\n                                if (DEBUG) console.log(\"Set previous prayer to today's Isha\");\n                            }\n                        }\n                    } else {\n                        if (DEBUG) console.error(\"Invalid Fajr time format:\", fajr.time);\n                    }\n                } catch (err) {\n                    console.error(\"Error setting tomorrow's Fajr:\", err);\n                }\n            }\n\n            // If we have at least nextPrayerInfo, we can proceed with calculations\n            if (nextPrayerInfo) {\n                try {\n                    // Set the next prayer regardless of calculation success\n                    setNextPrayer(nextPrayerInfo);\n\n                    if (nextPrayerInfo.dateTime) {\n                        const msUntilNextPrayer = nextPrayerInfo.dateTime - now;\n                        setRemainingTime(msUntilNextPrayer);\n                    }\n\n                    // If we have both prayers, calculate progress accurately\n                    if (previousPrayerInfo) {\n                        const totalInterval = (nextPrayerInfo.totalMinutes - previousPrayerInfo.totalMinutes +\n                            (nextPrayerInfo.name && nextPrayerInfo.name.includes('Tomorrow') ? 24 * 60 : 0));\n\n                        // Adjust for crossing midnight\n                        let elapsed;\n                        if (previousPrayerInfo.totalMinutes > nextPrayerInfo.totalMinutes &&\n                            !nextPrayerInfo.name.includes('Tomorrow')) {\n                            // Next prayer is tomorrow, but not marked as such\n                            elapsed = currentTotalMinutes - previousPrayerInfo.totalMinutes + (24 * 60);\n                        } else if (previousPrayerInfo.totalMinutes > currentTotalMinutes &&\n                            nextPrayerInfo.name.includes('Tomorrow')) {\n                            // Crossing midnight scenario\n                            elapsed = currentTotalMinutes + (24 * 60) - previousPrayerInfo.totalMinutes;\n                        } else {\n                            // Normal scenario\n                            elapsed = currentTotalMinutes - previousPrayerInfo.totalMinutes;\n                        }\n\n                        const calculatedProgress = Math.min(Math.max(elapsed / totalInterval, 0), 1);\n\n                        if (DEBUG) {\n                            console.log(\"Final calculation results:\", {\n                                msUntilNextPrayer: nextPrayerInfo.dateTime - now,\n                                totalInterval,\n                                elapsed,\n                                calculatedProgress\n                            });\n                        }\n\n                        setProgress(calculatedProgress);\n                        setCalculationState('complete');\n                    } else {\n                        // Fallback progress - show half progress if previous prayer unknown\n                        if (DEBUG) console.log(\"Missing previous prayer, using default progress\");\n                        setProgress(0.5);\n                        setCalculationState('partial-data');\n                    }\n                } catch (err) {\n                    console.error(\"Error in prayer time calculation:\", err);\n                    setCalculationState('calculation-error');\n\n                    // Fallback - still show the prayer even if calculation failed\n                    if (!nextPrayer) {\n                        setNextPrayer(nextPrayerInfo);\n                        if (nextPrayerInfo.dateTime) {\n                            setRemainingTime(nextPrayerInfo.dateTime - now);\n                        }\n                        setProgress(0.5); // Default progress\n                    }\n                }\n            } else {\n                // No next prayer found - severe problem with the data\n                setCalculationState('no-next-prayer');\n                if (DEBUG) console.error(\"No next prayer could be determined\");\n            }\n        } catch (error) {\n            console.error(\"Error calculating prayer times:\", error);\n            setCalculationState('error');\n            // Fall back to default/partial values if possible\n            if (prayerTimes && prayerTimes.Fajr) {\n                // Create a simple next prayer object\n                const [hour, minute] = prayerTimes.Fajr.split(':').map(Number);\n                if (!isNaN(hour) && !isNaN(minute)) {\n                    const fajrTime = new Date();\n                    fajrTime.setHours(hour, minute, 0, 0);\n\n                    // If Fajr is in the past, set it to tomorrow\n                    if (fajrTime < currentTime) {\n                        fajrTime.setDate(fajrTime.getDate() + 1);\n                    }\n\n                    setNextPrayer({\n                        name: 'Fajr',\n                        time: prayerTimes.Fajr,\n                        dateTime: fajrTime\n                    });\n                    setRemainingTime(fajrTime - currentTime);\n                    setProgress(0.5); // Default progress\n                    if (DEBUG) console.log(\"Using fallback values after error\");\n                }\n            }\n        }\n    }, [prayerTimes, currentTime]);\n\n    // Display loading or error state if data is not available\n    if (!prayerTimes) {\n        return (\n            <Paper elevation={3} sx={{ p: 4, textAlign: 'center', mb: 4 }}>\n                <Typography variant=\"h6\" color=\"text.secondary\">\n                    {loading ? (\n                        <>\n                            <CircularProgress size={24} sx={{ mr: 2, verticalAlign: 'middle' }} />\n                            Loading prayer times...\n                        </>\n                    ) : (\n                        'Prayer times not available'\n                    )}\n                </Typography>\n                {!loading && (\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n                        Please set your location to view prayer times.\n                    </Typography>\n                )}\n            </Paper>\n        );\n    }\n\n    // Display loading for nextPrayer not being calculated yet\n    if (!nextPrayer) {\n        return (\n            <Paper elevation={3} sx={{ p: 4, textAlign: 'center', mb: 4 }}>\n                <CircularProgress size={24} sx={{ mr: 2, verticalAlign: 'middle' }} />\n                <Typography variant=\"h6\" color=\"text.secondary\">\n                    Calculating prayer times... ({calculationState})\n                </Typography>\n                {DEBUG && (\n                    <Typography variant=\"body2\" color=\"error\" sx={{ mt: 2 }}>\n                        Debug info: Prayer data received but calculation incomplete.\n                        Check console for details.\n                    </Typography>\n                )}\n            </Paper>\n        );\n    }\n\n    // Format Islamic date for display\n    const formattedIslamicDate = hijriDate ?\n        `${hijriDate.day} ${hijriDate.month.en} ${hijriDate.year} AH` : '';\n\n    // Get location name\n    const locationName = params.address ||\n        `${params.latitude.toFixed(4)}°, ${params.longitude.toFixed(4)}°`;\n\n    // Main prayer times with icons\n    const mainPrayers = [\n        { name: 'Fajr', time: prayerTimes.Fajr, icon: '🌅' },\n        { name: 'Sunrise', time: prayerTimes.Sunrise, icon: '☀️' },\n        { name: 'Dhuhr', time: prayerTimes.Dhuhr, icon: '🌞' },\n        { name: 'Asr', time: prayerTimes.Asr, icon: '🌇' },\n        { name: 'Maghrib', time: prayerTimes.Maghrib, icon: '🌆' },\n        { name: 'Isha', time: prayerTimes.Isha, icon: '🌙' }\n    ];\n\n    // Filter out prayers with no time\n    const validPrayers = mainPrayers.filter(prayer => prayer && prayer.time);\n\n    return (\n        <Box sx={{ mb: 4 }}>\n            {/* Primary layout grid */}\n            <Grid container spacing={4}>\n                {/* Left side: Countdown Clock */}\n                <Grid item xs={12} md={6}>\n                    <CountdownClock\n                        targetTime={nextPrayer.dateTime}\n                        title={`${nextPrayer.name} Prayer`}\n                        subtitle={`at ${formatTime12Hour(nextPrayer.time)}`}\n                        description={locationName}\n                    />\n                </Grid>\n\n                {/* Right side: Next prayer clock */}\n                <Grid item xs={12} md={6}>\n                    <Card>\n                        <CardContent sx={{ textAlign: 'center' }}>\n                            <Typography variant=\"h5\" color=\"primary\" gutterBottom>\n                                Next Prayer\n                            </Typography>\n                            <Box sx={{ maxWidth: 315, mx: 'auto', my: 2 }}>\n                                <PrayerClock\n                                    prayerTime={nextPrayer.dateTime}\n                                    remaining={remainingTime}\n                                    progress={progress}\n                                    prayerName={nextPrayer.name}\n                                    cityName={locationName}\n                                    islamicDate={formattedIslamicDate}\n                                    isCompact={false}\n                                    isNearPrayer={remainingTime < 30 * 60 * 1000}\n                                    clockSize={315}  // Adjusted size for better visibility\n                                />\n                            </Box>\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Grid>\n\n            <Divider sx={{ my: 4 }} />\n\n            {/* All prayer times clocks */}\n            <Typography variant=\"h6\" gutterBottom sx={{ color: theme.palette.primary.main, mb: 3 }}>\n                Today's Prayer Times\n            </Typography>\n\n            <Grid container spacing={2}> {/* Reduced spacing from 3 to 2 */}\n                {validPrayers.map((prayer) => {\n                    try {\n                        if (!prayer.time) return null;\n\n                        const isObligatory = ['Fajr', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'].includes(prayer.name);\n\n                        const [hours, minutes] = prayer.time.split(':').map(Number);\n                        if (isNaN(hours) || isNaN(minutes)) return null;\n\n                        const prayerDateTime = new Date();\n                        prayerDateTime.setHours(hours, minutes, 0, 0);\n\n                        const isPassed = prayerDateTime < currentTime;\n                        const isNext = nextPrayer?.name === prayer.name ||\n                            (nextPrayer?.name === 'Fajr (Tomorrow)' && prayer.name === 'Fajr');\n\n                        return (\n                            <Grid\n                                item\n                                xs={6} // Change from xs={12} to xs={6} for 2 columns on mobile\n                                sm={6}\n                                md={4}\n                                key={prayer.name}\n                            >\n                                <Card\n                                    sx={{\n                                        height: '100%',\n                                        textAlign: 'center',\n                                        transform: isNext ? 'scale(1.05)' : 'scale(1)',\n                                        transition: 'transform 0.3s ease',\n                                        opacity: isPassed && !isNext ? 0.7 : 1,\n                                        border: isNext ? `1px solid ${theme.palette.secondary.main}` : 'none',\n                                        boxShadow: isNext ? 3 : 1,\n                                        bgcolor: isObligatory ? 'background.paper' : 'background.default',\n                                        p: { xs: 1, sm: 2 }, // Smaller padding on mobile\n                                        overflow: 'visible', // Change from hidden to visible\n                                        boxSizing: 'border-box',\n                                        mx: 'auto',\n                                    }}\n                                >\n                                    <CardContent \n                                        sx={{ \n                                            p: { xs: 0.5, sm: 1 },\n                                            '&:last-child': { pb: { xs: 0.5, sm: 1 } },\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            alignItems: 'center'\n                                        }}\n                                    >\n                                        <Typography \n                                            variant=\"subtitle2\" // Change from subtitle1 to subtitle2 on mobile\n                                            sx={{ \n                                                mb: 0.5, // Reduce margin\n                                                fontWeight: 'medium',\n                                                fontSize: { xs: '0.7rem', sm: '0.9rem' } // Smaller on mobile\n                                            }}\n                                        >\n                                            {prayer.icon} {prayer.name}\n                                        </Typography>\n                                        \n                                        <Box \n                                            sx={{ \n                                                display: 'flex', \n                                                justifyContent: 'center',\n                                                width: '100%',\n                                                transform: { xs: 'scale(0.8)', sm: 'scale(1)' } // Scale down on mobile\n                                            }}\n                                        >\n                                            <PrayerClock\n                                                prayerTime={prayerDateTime}\n                                                remaining={0}\n                                                progress={0}\n                                                prayerName={prayer.name}\n                                                cityName={''}\n                                                islamicDate={''}\n                                                isCompact={true}\n                                                isNearPrayer={isNext}\n                                                clockSize={170} // Reduce size from 80 to 60\n                                            />\n                                        </Box>\n                                        \n                                        <Typography\n                                            sx={{\n                                                mt: 0.5, // Reduce top margin\n                                                fontSize: { xs: '0.8rem', sm: '1rem' }, // Smaller font on mobile\n                                                color: isNext ? theme.palette.secondary.main : theme.palette.text.primary,\n                                                fontWeight: isNext ? 700 : 500\n                                            }}\n                                        >\n                                            {formatTime12Hour(prayer.time)}\n                                        </Typography>\n                                    </CardContent>\n                                </Card>\n                            </Grid>\n                        );\n                    } catch (error) {\n                        console.error(`Error rendering prayer: ${prayer.name}`, error);\n                        return null; // Skip rendering this prayer if there's an error\n                    }\n                })}\n            </Grid>\n        </Box>\n    );\n};\n\nexport default EnhancedPrayerTimesDisplay;","import React, { useState, useEffect } from 'react';\nimport { Box, Card, CardContent, Typography, useTheme, Paper } from '@mui/material';\nimport { usePrayerTimes } from '../../contexts/PrayerTimesContext';\nimport { formatTime12Hour } from '../../utils/formatters';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport NightlightIcon from '@mui/icons-material/Nightlight';\nimport WbTwilightIcon from '@mui/icons-material/WbTwilight';\nimport LightModeIcon from '@mui/icons-material/LightMode';\nimport { motion } from 'framer-motion';\n\n/**\n * A visual timeline showing prayer times and other significant times throughout the day\n */\nconst PrayerTimeline = () => {\n    const theme = useTheme();\n    const { prayerTimes } = usePrayerTimes();\n    const [currentTime, setCurrentTime] = useState(new Date());\n    const [timelineData, setTimelineData] = useState([]);\n    const [activePrayerIndex, setActivePrayerIndex] = useState(-1);\n    const [dayProgress, setDayProgress] = useState(0);\n\n    // Update current time every minute\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setCurrentTime(new Date());\n        }, 60000);\n        return () => clearInterval(timer);\n    }, []);\n\n    // Process prayer times into timeline data\n    useEffect(() => {\n        if (!prayerTimes) return;\n\n        const timeOrder = [\n            { key: 'Imsak', name: 'Imsak', isPrayer: false, icon: <WbTwilightIcon fontSize=\"small\" /> },\n            { key: 'Fajr', name: 'Fajr', isPrayer: true, icon: <WbTwilightIcon fontSize=\"small\" /> },\n            { key: 'Sunrise', name: 'Sunrise', isPrayer: false, icon: <LightModeIcon fontSize=\"small\" /> },\n            { key: 'Dhuhr', name: 'Dhuhr', isPrayer: true, icon: <AccessTimeIcon fontSize=\"small\" /> },\n            { key: 'Asr', name: 'Asr', isPrayer: true, icon: <AccessTimeIcon fontSize=\"small\" /> },\n            { key: 'Maghrib', name: 'Maghrib', isPrayer: true, icon: <WbTwilightIcon fontSize=\"small\" /> },\n            { key: 'Isha', name: 'Isha', isPrayer: true, icon: <NightlightIcon fontSize=\"small\" /> },\n            { key: 'Midnight', name: 'Midnight', isPrayer: false, icon: <NightlightIcon fontSize=\"small\" /> },\n            { key: 'Firstthird', name: '1st Third', isPrayer: false, icon: <NightlightIcon fontSize=\"small\" /> },\n            { key: 'Lastthird', name: 'Last Third', isPrayer: false, icon: <NightlightIcon fontSize=\"small\" /> }\n        ];\n\n        const timeline = [];\n\n        // Process each time point\n        timeOrder.forEach(item => {\n            if (prayerTimes[item.key]) {\n                const [hours, minutes] = prayerTimes[item.key].split(':').map(Number);\n                let date = new Date();\n\n                // For midnight and night portions which might be after midnight\n                if (item.key === 'Midnight' || item.key === 'Firstthird' || item.key === 'Lastthird') {\n                    const hour24 = parseInt(hours);\n                    // If the time is early morning (likely for these night times)\n                    if (hour24 < 6) {\n                        date.setDate(date.getDate() + 1); // Set to tomorrow\n                    }\n                }\n\n                date.setHours(hours, minutes, 0, 0);\n\n                timeline.push({\n                    name: item.name,\n                    key: item.key,\n                    time: date,\n                    formattedTime: formatTime12Hour(prayerTimes[item.key]),\n                    isPrayer: item.isPrayer,\n                    icon: item.icon\n                });\n            }\n        });\n\n        // Sort by time\n        const sortedTimeline = timeline.sort((a, b) => a.time - b.time);\n        setTimelineData(sortedTimeline);\n\n    }, [prayerTimes]);\n\n    // Calculate day progress and active prayer - separate effect\n    useEffect(() => {\n        if (!timelineData.length) return;\n\n        const now = currentTime;\n\n        // Calculate day progress percentage\n        const dayStart = new Date(now);\n        dayStart.setHours(0, 0, 0, 0);\n        const dayEnd = new Date(now);\n        dayEnd.setHours(23, 59, 59, 999);\n\n        const totalMillis = dayEnd - dayStart;\n        const elapsedMillis = now - dayStart;\n        const progress = Math.min(elapsedMillis / totalMillis, 1) * 100;\n        setDayProgress(progress);\n\n        // Find active time point (last time point before current time)\n        let activeIndex = -1;\n        for (let i = timelineData.length - 1; i >= 0; i--) {\n            if (timelineData[i].time <= now) {\n                activeIndex = i;\n                break;\n            }\n        }\n        setActivePrayerIndex(activeIndex);\n    }, [timelineData, currentTime]);\n\n    // Get a color for each time point based on its type\n    const getTimePointColor = (timePoint, isPast, isActive) => {\n        if (isActive) return theme.palette.secondary.main;\n        if (isPast) return theme.palette.success.main;\n\n        // Different colors for different types of time points\n        if (timePoint.key === 'Sunrise') return theme.palette.warning.main;\n        if (timePoint.isPrayer) return theme.palette.primary.main;\n        if (timePoint.key === 'Imsak') return theme.palette.info.main;\n        if (['Midnight', 'Firstthird', 'Lastthird'].includes(timePoint.key)) {\n            return theme.palette.text.secondary;\n        }\n\n        return theme.palette.text.secondary;\n    };\n\n    if (!prayerTimes || timelineData.length === 0) {\n        return null;\n    }\n\n    return (\n        <Card sx={{ mb: 4 }}>\n            <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                    Daily Prayer Timeline\n                </Typography>\n\n                {/* Timeline container */}\n                <Paper\n                    elevation={0}\n                    sx={{\n                        position: 'relative',\n                        height: 180, // Original height\n                        p: 3,\n                        backgroundColor: theme.palette.background.default\n                    }}\n                >\n                    {/* Main timeline line with original padding */}\n                    <Box\n                        sx={{\n                            position: 'relative',\n                            height: 4,\n                            backgroundColor: theme.palette.divider,\n                            mt: 6, // Original top margin/padding\n                            borderRadius: 2,\n                            overflow: 'visible'\n                        }}\n                    >\n                        {/* Day progress indicator (animated) */}\n                        <motion.div\n                            initial={{ width: 0 }}\n                            animate={{ width: `${dayProgress}%` }}\n                            transition={{ type: 'spring', stiffness: 80, damping: 20 }}\n                            style={{\n                                position: 'absolute',\n                                height: '100%',\n                                backgroundColor: theme.palette.primary.main,\n                                borderRadius: 8,\n                                opacity: 0.7\n                            }}\n                        />\n\n                        {/* Current time marker (animated with pulse) */}\n                        <motion.div\n                            initial={false}\n                            animate={{ left: `${dayProgress}%` }}\n                            transition={{ type: 'spring', stiffness: 80, damping: 20 }}\n                            style={{\n                                position: 'absolute',\n                                height: 16,\n                                width: 16,\n                                backgroundColor: theme.palette.secondary.main,\n                                borderRadius: '50%',\n                                top: '50%',\n                                transform: 'translate(-50%, -50%)',\n                                boxShadow: `0 0 0 4px ${theme.palette.background.paper}`,\n                                zIndex: 10\n                            }}\n                        >\n                            {/* Pulse effect */}\n                            <motion.div\n                                initial={{ scale: 1, opacity: 0.7 }}\n                                animate={{ scale: [1, 1.5, 1], opacity: [0.7, 0, 0.7] }}\n                                transition={{\n                                    duration: 1.5,\n                                    repeat: Infinity,\n                                    ease: 'easeInOut',\n                                }}\n                                style={{\n                                    position: 'absolute',\n                                    top: '50%',\n                                    left: '50%',\n                                    width: 32,\n                                    height: 32,\n                                    borderRadius: '50%',\n                                    backgroundColor: theme.palette.secondary.main,\n                                    opacity: 0.5,\n                                    transform: 'translate(-50%, -50%)',\n                                    zIndex: 1,\n                                }}\n                            />\n                        </motion.div>\n\n                        {/* Time points with icons and better visualization but original spacing */}\n                        {timelineData.map((timePoint, index) => {\n                            // Calculate position as percentage of day\n                            const timeOfDay = timePoint.time.getHours() * 3600 + timePoint.time.getMinutes() * 60;\n                            const percentage = (timeOfDay / 86400) * 100;\n\n                            const isActive = index === activePrayerIndex;\n                            const isPast = timePoint.time < currentTime;\n                            const timePointColor = getTimePointColor(timePoint, isPast, isActive);\n\n                            // Use original label positioning logic as the baseline\n                            const isLabelOnTop = index % 2 === 0;\n\n                            // Special case for Imsak and Sunrise to prevent overlap\n                            // If it's Imsak, always show on bottom; if it's Sunrise, always show on top\n                            let finalPosition;\n                            if (timePoint.key === 'Imsak') {\n                                finalPosition = 15; // Always bottom for Imsak\n                            } else if (timePoint.key === 'Sunrise') {\n                                finalPosition = -35; // Always top for Sunrise\n                            } else {\n                                finalPosition = isLabelOnTop ? -35 : 15; // Regular alternating pattern for others\n                            }\n\n                            return (\n                                <React.Fragment key={timePoint.key}>\n                                    {/* Glowing prayer dot (animated) */}\n                                    <motion.div\n                                        initial={{ scale: 0, opacity: 0 }}\n                                        animate={{\n                                            left: `${percentage}%`,\n                                            scale: isActive ? 1.3 : 1,\n                                            opacity: 1,\n                                            boxShadow: isActive || timePoint.isPrayer ? `0 0 12px 4px ${timePointColor}` : 'none',\n                                        }}\n                                        transition={{ type: 'spring', stiffness: 120, damping: 15 }}\n                                        style={{\n                                            position: 'absolute',\n                                            height: timePoint.isPrayer ? 14 : 10,\n                                            width: timePoint.isPrayer ? 14 : 10,\n                                            backgroundColor: timePointColor,\n                                            border: isActive ? `3px solid ${theme.palette.secondary.main}` : 'none',\n                                            borderRadius: '50%',\n                                            top: '50%',\n                                            transform: 'translate(-50%, -50%)',\n                                            zIndex: isActive ? 5 : 1,\n                                        }}\n                                    >\n                                        {/* Continuous glow animation for prayer dots */}\n                                        {timePoint.isPrayer && (\n                                            <motion.div\n                                                initial={{ scale: 1, opacity: 0.7 }}\n                                                animate={{ scale: [1, 1.7, 1], opacity: [0.7, 0, 0.7] }}\n                                                transition={{ duration: 2, repeat: Infinity, ease: 'easeInOut' }}\n                                                style={{\n                                                    position: 'absolute',\n                                                    top: '50%',\n                                                    left: '50%',\n                                                    width: 32,\n                                                    height: 32,\n                                                    borderRadius: '50%',\n                                                    backgroundColor: timePointColor,\n                                                    opacity: 0.4,\n                                                    transform: 'translate(-50%, -50%)',\n                                                    zIndex: 0,\n                                                }}\n                                            />\n                                        )}\n                                    </motion.div>\n\n                                    {/* Time point label (fade/slide in) with extra padding from progress bar */}\n                                    <motion.div\n                                        initial={{ opacity: 0, y: isLabelOnTop ? -10 : 10 }}\n                                        animate={{\n                                            left: `${percentage}%`,\n                                            opacity: 1,\n                                            y: 0,\n                                            scale: isActive ? 1.05 : 1\n                                        }}\n                                        transition={{ type: 'spring', stiffness: 100, damping: 18 }}\n                                        style={{\n                                            position: 'absolute',\n                                            top: finalPosition + (isLabelOnTop ? -16 : 16), // Add padding above/below progress bar\n                                            transform: 'translateX(-50%)',\n                                            textAlign: 'center',\n                                            minWidth: 70,\n                                            backgroundColor: (isLabelOnTop || timePoint.key === 'Sunrise') ?\n                                                theme.palette.background.default :\n                                                'transparent',\n                                            borderRadius: 4,\n                                            padding: '2px 4px',\n                                            border: isActive ?\n                                                `1px solid ${theme.palette.secondary.main}` :\n                                                (isLabelOnTop || timePoint.key === 'Sunrise') ? `1px solid ${theme.palette.divider}` : 'none',\n                                            zIndex: isActive ? 5 : (timePoint.key === 'Imsak' || timePoint.key === 'Sunrise') ? 3 : 2\n                                        }}\n                                    >\n                                        <Box sx={{\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            justifyContent: 'center',\n                                            color: isActive ? timePointColor : 'inherit',\n                                            mb: 0.5\n                                        }}>\n                                            {timePoint.icon &&\n                                                <Box component=\"span\" sx={{ mr: 0.5, color: timePointColor, display: 'flex' }}>\n                                                    {timePoint.icon}\n                                                </Box>\n                                            }\n                                            <Typography\n                                                variant=\"caption\"\n                                                component=\"span\"\n                                                sx={{\n                                                    fontWeight: isActive ? 'bold' : 'normal',\n                                                    whiteSpace: 'nowrap',\n                                                    fontSize: isActive ? '0.85rem' : '0.75rem'\n                                                }}\n                                            >\n                                                {timePoint.name}\n                                            </Typography>\n                                        </Box>\n\n                                        <Typography\n                                            variant=\"caption\"\n                                            sx={{\n                                                color: isActive ? timePointColor : theme.palette.text.secondary,\n                                                fontSize: isActive ? '0.8rem' : '0.75rem',\n                                                display: 'block',\n                                                lineHeight: 1.2\n                                            }}\n                                        >\n                                            {timePoint.formattedTime}\n                                        </Typography>\n                                    </motion.div>\n                                </React.Fragment>\n                            );\n                        })}\n                    </Box>\n\n                    {/* Current time display - improved styling but original positioning (animated) */}\n                    <motion.div\n                        initial={false}\n                        animate={{ left: `${dayProgress}%` }}\n                        transition={{ type: 'spring', stiffness: 80, damping: 20 }}\n                        style={{\n                            position: 'absolute',\n                            bottom: 10,\n                            transform: 'translateX(-50%)',\n                            textAlign: 'center',\n                            minWidth: 70,\n                            zIndex: 5\n                        }}\n                    >\n                        <Typography\n                            variant=\"caption\"\n                            sx={{\n                                backgroundColor: theme.palette.background.paper,\n                                px: 1.5,\n                                py: 0.5,\n                                borderRadius: 1,\n                                color: theme.palette.secondary.main,\n                                display: 'inline-block',\n                                boxShadow: 1,\n                                fontWeight: 'medium'\n                            }}\n                        >\n                            {currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                        </Typography>\n                    </motion.div>\n                </Paper>\n\n                {/* Enhanced legend with all time point types */}\n                <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 2, flexWrap: 'wrap' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Box\n                            sx={{\n                                width: 10,\n                                height: 10,\n                                borderRadius: '50%',\n                                backgroundColor: theme.palette.primary.main,\n                                mr: 1\n                            }}\n                        />\n                        <Typography variant=\"caption\">Prayers</Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Box\n                            sx={{\n                                width: 10,\n                                height: 10,\n                                borderRadius: '50%',\n                                backgroundColor: theme.palette.info.main,\n                                mr: 1\n                            }}\n                        />\n                        <Typography variant=\"caption\">Imsak</Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Box\n                            sx={{\n                                width: 10,\n                                height: 10,\n                                borderRadius: '50%',\n                                backgroundColor: theme.palette.warning.main,\n                                mr: 1\n                            }}\n                        />\n                        <Typography variant=\"caption\">Sunrise</Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Box\n                            sx={{\n                                width: 10,\n                                height: 10,\n                                borderRadius: '50%',\n                                backgroundColor: theme.palette.text.secondary,\n                                mr: 1\n                            }}\n                        />\n                        <Typography variant=\"caption\">Night times</Typography>\n                    </Box>\n                </Box>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default PrayerTimeline;","import React, { useState, useEffect, useRef } from 'react';\nimport {\n    Box,\n    Card,\n    CardContent,\n    Typography,\n    FormGroup,\n    FormControlLabel,\n    Checkbox,\n    Button,\n    IconButton,\n    Switch,\n    Slider,\n    Select,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Stack,\n    Alert,\n    Tooltip,\n    Snackbar,\n    Link,\n    Chip,\n    CircularProgress,\n    Paper,\n    FormHelperText,\n    Grid\n} from '@mui/material';\nimport VolumeUpIcon from '@mui/icons-material/VolumeUp';\nimport VolumeDownIcon from '@mui/icons-material/VolumeDown';\nimport VolumeOffIcon from '@mui/icons-material/VolumeOff';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport PauseIcon from '@mui/icons-material/Pause';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport NotificationsOffIcon from '@mui/icons-material/NotificationsOff';\nimport { usePrayerTimes } from '../../contexts/PrayerTimesContext';\nimport { useTheme } from '@mui/material/styles';\nimport { DateTime } from 'luxon'; // Make sure this dependency is installed\n\n// Athan audio files with external URLs\nconst ATHAN_OPTIONS = [\n    {\n        id: 'makkah',\n        name: 'Makkah - Sheikh Ali Mulla',\n        url: 'https://praytimes.org/audio/adhan/Sunni/Adhan%20Makkah.mp3'\n    },\n    {\n        id: 'madinah',\n        name: 'Madinah - Athan',\n        url: 'https://praytimes.org/audio/adhan/Sunni/Adhan%20Madina.mp3'\n    },\n    {\n        id: 'egyptian',\n        name: 'Egyptian - Sheikh Mohammed Rifat',\n        url: 'https://praytimes.org/audio/adhan/Sunni/Adhan%20Egypt.mp3'\n    },\n    {\n        id: 'abdulbasit',\n        name: 'Egyptian - Abdul Basit',\n        url: 'https://praytimes.org/audio/adhan/Sunni/Abdul-Basit.mp3'\n    },\n    {\n        id: 'hafez',\n        name: 'Hafez',\n        url: 'https://praytimes.org/audio/adhan/Sunni/Hafez.mp3'\n    },\n    {\n        id: 'mansour',\n        name: 'Mansour Zahrani',\n        url: 'https://dl.dropboxusercontent.com/scl/fi/lb57ysf7u4ss43pdxye3c/mansour_al_zahrani.mp3?rlkey=3wmv9aba0eb4rwiu58fva0iy0&st=sc8yfbzh&dl=1'\n    },\n    {\n        id: 'mansour-fajr',\n        name: 'Mansour Zahrani Fajr',\n        url: 'https://archive.org/download/adhan_fajr_mansour_zahrani/adhan_fajr_mansour_zahrani.mp3'\n    },\n    {\n        id: 'naseer-alqatami',\n        name: 'Naseer Al Qatami',\n        url: 'https://download.tvquran.com/download/TvQuran.com__Athan/TvQuran.com__08.athan.mp3'\n    },\n    {\n        id: 'ahmad-al-nafees',\n        name: 'Ahmad Al Nafees',\n        url: 'https://dl.dropboxusercontent.com/scl/fi/3jiy3o1hx19rss0hc9je7/ahmad_al_nafees.mp3?rlkey=doljk0aon9gdqt3tiayr1hgtu&st=naujvp66&dl=1'\n    },\n    {\n        id: 'hafiz-mustfa-ozcan',\n        name: 'Hafiz Mustfa Ozcan',\n        url: 'https://dl.dropboxusercontent.com/scl/fi/fd2tmxv0v84qnlobeqmhp/hafiz_mustafa_ozcan.mp3?rlkey=i0ao0cr1t0zosb37lc83hqhjh&st=knjy3z9q&dl=1'\n    },\n    {\n        id: 'karl-jenkins',\n        name: 'Karl Jenkins',\n        url: 'https://dl.dropboxusercontent.com/scl/fi/vlxw4ue8wos0sujhucfqi/karl_jenkins_mass.mp3?rlkey=9ca7gmildknq3vjqupguwh4cx&st=yni4511s&dl=1'\n    },\n    {\n        id: 'rashid-alafasy',\n        name: 'Mishary Rashid Alafasy',\n        url: 'https://dl.dropboxusercontent.com/scl/fi/di43o6wudlbqy04pg6vl3/mishary_rashid_alafassay.mp3?rlkey=0fszlwrb291xwaoxit8yo8trk&st=4i8wbuhk&dl=1'\n    },\n    {\n        id: 'rashid-alafasy-dubai',\n        name: 'Mishary Rashid Alafasy Dubai',\n        url: 'https://dl.dropboxusercontent.com/scl/fi/rfbkqp8b4o45pjuk679qo/mishary_rashid_dubai.mp3?rlkey=bsp0f4jbrbdzl3ecgq0tujpe9&st=8xcbvone&dl=1'\n    },\n];\n\n// Default settings\nconst DEFAULT_SETTINGS = {\n    athanEnabled: true,\n    selectedAthan: 'makkah',\n    volume: 70,\n    notificationsEnabled: true,\n    selectedPrayers: {\n        Fajr: true,\n        Dhuhr: true,\n        Asr: true,\n        Maghrib: true,\n        Isha: true\n    },\n    preAthanNotification: 10, // minutes before prayer\n};\n\n/**\n * Component to manage Athan (call to prayer) playback and notifications\n */\nconst AthanPlayer = () => {\n    const theme = useTheme();\n\n    // Get prayer times and params from context\n    const { prayerTimes, params } = usePrayerTimes();\n\n    // State for settings\n    const [settings, setSettings] = useState(() => {\n        // Try to load settings from localStorage\n        const savedSettings = localStorage.getItem('athanSettings');\n        return savedSettings ? JSON.parse(savedSettings) : DEFAULT_SETTINGS;\n    });\n\n    // Player state\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [audioError, setAudioError] = useState(null);\n    const [currentPrayer, setCurrentPrayer] = useState(null);\n    const [nextPrayer, setNextPrayer] = useState(null);\n    const [timeUntilNextPrayer, setTimeUntilNextPrayer] = useState(null);\n    const [showNotification, setShowNotification] = useState(false);\n    const [notificationMessage, setNotificationMessage] = useState('');\n    const [simulationActive, setSimulationActive] = useState(false);\n    const [simulationTimeRemaining, setSimulationTimeRemaining] = useState(0);\n    const [notificationComponent, setNotificationComponent] = useState(null);\n\n    // Refs\n    const audioRef = useRef(null);\n    const checkTimerRef = useRef(null);\n    const notificationTimerRef = useRef({});\n    const simulationTimerRef = useRef(null);\n    const simulationEndTimeRef = useRef(null);\n    const lastVisibilityChange = useRef(Date.now());\n\n    // Permission state for browser notifications\n    const [notificationPermission, setNotificationPermission] = useState(\n        'Notification' in window ? Notification.permission : 'denied'\n    );\n\n    // State for Web Worker\n    const [timerWorker, setTimerWorker] = useState(null);\n\n    // Add this function right after your state declarations\n    const getAthanForPrayer = (prayerName) => {\n        // Always use mansour-fajr for Fajr prayer\n        if (prayerName === 'Fajr') {\n            return 'mansour-fajr';\n        }\n\n        // For all other prayers, use the user's selected Athan\n        return settings.selectedAthan;\n    };\n\n    // Helper function to detect which browser the user is using\n    const detectBrowser = () => {\n        const userAgent = navigator.userAgent;\n        let name = \"Unknown\";\n\n        if (userAgent.indexOf(\"Firefox\") > -1) {\n            name = \"Firefox\";\n        } else if (userAgent.indexOf(\"Edge\") > -1) {\n            name = \"Edge\";\n        } else if (userAgent.indexOf(\"Chrome\") > -1) {\n            name = \"Chrome\";\n        } else if (userAgent.indexOf(\"Safari\") > -1) {\n            name = \"Safari\";\n        } else if (userAgent.indexOf(\"Opera\") > -1 || userAgent.indexOf(\"OPR\") > -1) {\n            name = \"Opera\";\n        } else if (userAgent.indexOf(\"MSIE\") > -1 || userAgent.indexOf(\"Trident\") > -1) {\n            name = \"Internet Explorer\";\n        }\n\n        return { name };\n    };\n\n    // Helper function to detect incognito mode\n    const checkIncognitoMode = () => {\n        return new Promise((resolve) => {\n            // Try to use IndexedDB as a test (often restricted in incognito)\n            const db = window.indexedDB.open('test');\n            db.onerror = () => resolve(true); // Likely incognito if error\n            db.onsuccess = () => resolve(false); // Likely normal mode\n\n            // Set a timeout in case the test is inconclusive\n            setTimeout(() => resolve(false), 1000);\n        });\n    };\n\n    // Request notification permission\n    const requestNotificationPermission = async () => {\n        if (!('Notification' in window)) {\n            setNotificationMessage('This browser does not support notifications');\n            setShowNotification(true);\n            return false;\n        }\n\n        try {\n            console.log(\"Requesting notification permission...\");\n\n            // Check if we're in incognito mode (permissions will behave differently)\n            const isIncognito = await checkIncognitoMode();\n\n            // For incognito mode, we need to handle permissions differently\n            if (isIncognito) {\n                setNotificationMessage(\n                    \"You appear to be in private browsing mode. Please enable notifications manually in your browser settings.\"\n                );\n                setShowNotification(true);\n\n                // Open a dialog to give better instructions for incognito mode\n                setTimeout(() => {\n                    alert(\n                        \"In private/incognito mode, you need to manually allow notifications:\\n\\n\" +\n                        \"1. Look for the notification icon in the address bar\\n\" +\n                        \"2. Click it and select 'Allow' for notifications\\n\" +\n                        \"3. Reload the page after changing the setting\"\n                    );\n                }, 500);\n\n                return false;\n            }\n\n            const permission = await Notification.requestPermission();\n            console.log(\"Permission result:\", permission);\n\n            // Update our state with the current permission status\n            setNotificationPermission(permission);\n\n            if (permission === 'granted') {\n                setSettings(prev => ({\n                    ...prev,\n                    notificationsEnabled: true\n                }));\n\n                // Show success message\n                setNotificationMessage(\"Notifications enabled successfully!\");\n                setShowNotification(true);\n                return true;\n            } else if (permission === 'denied') {\n                // Show message about denied permissions\n                setNotificationMessage(\n                    \"Notification permission was denied. You'll need to enable it in your browser settings.\"\n                );\n                setShowNotification(true);\n            } else {\n                // Default/unspecified state\n                setNotificationMessage(\n                    \"Notification permission wasn't granted. Some features may not work.\"\n                );\n                setShowNotification(true);\n            }\n\n            return false;\n        } catch (error) {\n            console.error('Error requesting notification permission:', error);\n            setNotificationMessage(\"Error requesting notification permission. Please try again.\");\n            setShowNotification(true);\n            return false;\n        }\n    };\n\n    // Check audio capabilities\n    const checkAudioCapabilities = async () => {\n        try {\n            // Check if context can be created\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n            // Simple check to see if we can play anything at all\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n\n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n\n            // Set the gain to near zero so it's not audible\n            gainNode.gain.value = 0.01;\n\n            // Start and then stop immediately\n            oscillator.start();\n            setTimeout(() => {\n                oscillator.stop();\n                audioContext.close();\n\n                setNotificationMessage(\"Audio system diagnostic: OK\");\n                setShowNotification(true);\n            }, 100);\n\n            return true;\n        } catch (error) {\n            console.error(\"Audio capabilities check failed:\", error);\n            setNotificationMessage(\"Audio system diagnostic: Failed - \" + error.message);\n            setShowNotification(true);\n            return false;\n        }\n    };\n\n    // Update the prayer time simulation function to use the Web Worker\n    const startPrayerTimeSimulation = (seconds = 120) => {\n        // Clear any existing simulation\n        if (simulationTimerRef.current) {\n            clearInterval(simulationTimerRef.current);\n            simulationTimerRef.current = null;\n        }\n\n        // Reset flags so we can play again\n        if (typeof clearPlayedFlags === 'function') {\n            clearPlayedFlags();\n        }\n\n        // Set initial state\n        setSimulationActive(true);\n        setSimulationTimeRemaining(seconds);\n\n        // Check if worker is available\n        if (timerWorker) {\n            // Use the Web Worker for reliable background timers\n            console.log(`Starting WebWorker timer for ${seconds} seconds`);\n\n            // Send start command to worker\n            timerWorker.postMessage({\n                command: 'start',\n                duration: seconds,\n                interval: 250  // Update 4 times per second\n            });\n        } else {\n            // Fallback to setTimeout if Web Worker is unavailable\n            console.log(\"Web Worker not available, using fallback timer\");\n            const endTime = Date.now() + seconds * 1000;\n\n            simulationTimerRef.current = setInterval(() => {\n                const remaining = Math.round((endTime - Date.now()) / 1000);\n                setSimulationTimeRemaining(remaining <= 0 ? 0 : remaining);\n\n                if (remaining <= 0) {\n                    clearInterval(simulationTimerRef.current);\n                    simulationTimerRef.current = null;\n                    setSimulationActive(false);\n\n                    // Use the same handler for consistency\n                    handleTimerCompletion();\n                }\n            }, 250);\n        }\n\n        // Show notification that simulation has started\n        setNotificationMessage(`Prayer time simulation started. Athan will play in ${seconds} seconds.`);\n        setShowNotification(true);\n    };\n\n    // Update the handleVisibilityChange function \n\n    const handleVisibilityChange = () => {\n        const now = Date.now();\n\n        // Throttle the handler to prevent excessive updates\n        if (now - lastVisibilityChange.current < 200) {\n            return;\n        }\n        lastVisibilityChange.current = now;\n\n        if (document.visibilityState === 'visible') {\n            console.log(\"Tab became visible, updating timers\");\n\n            // Resume any audio contexts that might be suspended\n            if (typeof AudioContext !== 'undefined') {\n                try {\n                    const tempContext = new AudioContext();\n                    if (tempContext.state === 'suspended') {\n                        tempContext.resume().then(() => {\n                            console.log('AudioContext resumed successfully');\n                        });\n                    }\n                } catch (e) {\n                    console.error('Error resuming audio context:', e);\n                }\n            }\n\n            // Check if a simulation completed while page was inactive\n            const simulationCompleted = sessionStorage.getItem('athan_simulation_completed');\n\n            if (simulationCompleted === 'true') {\n                const completionTime = new Date(sessionStorage.getItem('athan_simulation_time') || 0);\n                const timeSinceCompletion = new Date() - completionTime;\n\n                // If the simulation completed within the last 5 minutes\n                if (!isNaN(timeSinceCompletion) && timeSinceCompletion < 5 * 60 * 1000) {\n                    console.log(\"🔄 Detected simulation completion while page was inactive\");\n\n                    // Clear the flag\n                    sessionStorage.removeItem('athan_simulation_completed');\n                    sessionStorage.removeItem('athan_simulation_time');\n\n                    // Show notification and offer to play\n                    setNotificationMessage(\"A timer completed while you were away. Play Athan now?\");\n\n                    // Create a custom notification with play button\n                    const CustomNotification = () => (\n                        <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                            <Typography>{notificationMessage}</Typography>\n                            <Button\n                                variant=\"contained\"\n                                size=\"small\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    playAthan();\n                                    setShowNotification(false);\n                                }}\n                            >\n                                Play Now\n                            </Button>\n                        </Stack>\n                    );\n\n                    // Set a custom component for the notification\n                    setNotificationComponent(<CustomNotification />);\n                    setShowNotification(true);\n                }\n            }\n\n            // Update simulation timer if active\n            if (simulationActive && simulationEndTimeRef.current) {\n                const remaining = Math.round(simulationEndTimeRef.current.diff(DateTime.now()).as('seconds'));\n\n                // If time passed while in background\n                if (remaining <= 0) {\n                    // Stop the simulation and trigger athan\n                    clearInterval(simulationTimerRef.current);\n                    simulationTimerRef.current = null;\n                    setSimulationActive(false);\n\n                    // Update UI first\n                    setSimulationTimeRemaining(0);\n\n                    // Then trigger athan (give UI time to update)\n                    setTimeout(() => {\n                        console.log(\"Simulation completed while tab was inactive - triggering Athan now\");\n                        if (nextPrayer) {\n                            playAthan(true); // Pass true to indicate it's a timer-triggered playback\n                            showBrowserNotification(`Simulated: It's time for ${nextPrayer.name} prayer`);\n                        }\n                    }, 100);\n                } else {\n                    // Just update the counter\n                    setSimulationTimeRemaining(remaining);\n                }\n            }\n\n            // Also update prayer time calculations\n            updatePrayerTimes();\n        }\n    };\n\n    // Initialize audio player\n    useEffect(() => {\n        // Create audio element if it doesn't exist\n        if (!audioRef.current) {\n            audioRef.current = new Audio();\n\n            // Add event listeners\n            audioRef.current.addEventListener('ended', () => {\n                console.log(\"Audio playback ended\");\n                setIsPlaying(false);\n            });\n\n            audioRef.current.addEventListener('error', (e) => {\n                console.error('Audio error:', e);\n                setIsPlaying(false);\n\n                // Get more specific error information\n                let errorMessage = 'Error loading audio. Please try another Athan.';\n\n                if (audioRef.current.error) {\n                    switch (audioRef.current.error.code) {\n                        case MediaError.MEDIA_ERR_ABORTED:\n                            errorMessage = 'Audio playback aborted.';\n                            break;\n                        case MediaError.MEDIA_ERR_NETWORK:\n                            errorMessage = 'Network error. Check your internet connection.';\n                            break;\n                        case MediaError.MEDIA_ERR_DECODE:\n                            errorMessage = 'Audio decoding error.';\n                            break;\n                        case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n                            errorMessage = 'Audio format not supported.';\n                            break;\n                    }\n                }\n\n                setAudioError(errorMessage);\n            });\n\n            audioRef.current.addEventListener('canplaythrough', () => {\n                console.log(\"Audio can play through\");\n                setIsLoading(false);\n            });\n\n            // Register for background audio permission\n            if ('mediaSession' in navigator) {\n                navigator.mediaSession.metadata = new MediaMetadata({\n                    title: 'Athan - Islamic Call to Prayer',\n                    artist: 'Salat-e-Mustaqeem',\n                    album: 'Prayer Times App',\n                    artwork: [\n                        { src: '/favicon.ico', sizes: '96x96', type: 'image/png' }\n                    ]\n                });\n            }\n\n            // IMPORTANT: DON'T preload the actual Athan audio, just set the empty source\n            // This prevents auto-play issue\n            audioRef.current.preload = \"none\"; // Add this line to prevent auto-loading\n            audioRef.current.autoplay = false; // Explicitly set autoplay to false\n\n            // Use empty audio instead of tiny audio to prevent any playback\n            audioRef.current.src = \"\";\n\n            // Set volume\n            audioRef.current.volume = settings.volume / 100;\n\n            // Unlock audio only on explicit user interaction\n            const unlockAudio = () => {\n                console.log(\"User interaction detected - can now enable audio\");\n                // Don't actually play anything here, just mark that we've had user interaction\n                document.removeEventListener('click', unlockAudio);\n                document.removeEventListener('touchstart', unlockAudio);\n                \n                // Create and resume an audio context to help with permission\n                try {\n                    const tempContext = new (window.AudioContext || window.webkitAudioContext)();\n                    if (tempContext.state === 'suspended') {\n                        tempContext.resume();\n                    }\n                } catch (e) {\n                    console.error('Error creating temporary audio context:', e);\n                }\n            };\n\n            // Listen for user interaction\n            document.addEventListener('click', unlockAudio);\n            document.addEventListener('touchstart', unlockAudio);\n        }\n\n        // Register for service worker to help with background audio\n        if ('serviceWorker' in navigator) {\n            window.addEventListener('load', () => {\n                navigator.serviceWorker.register('/service-worker.js')\n                    .then(registration => {\n                        console.log('Service Worker registered with scope:', registration.scope);\n                    })\n                    .catch(error => {\n                        console.error('Service Worker registration failed:', error);\n                    });\n            });\n        }\n\n        // Set volume on existing audio element\n        if (audioRef.current) {\n            audioRef.current.volume = settings.volume / 100;\n        }\n\n        // Register visibility change handler\n        document.addEventListener('visibilitychange', handleVisibilityChange);\n\n        return () => {\n            // Don't destroy audio element on unmount, just pause it\n            if (audioRef.current) {\n                audioRef.current.pause();\n            }\n\n            // Remove the visibility change listener\n            document.removeEventListener('visibilitychange', handleVisibilityChange);\n        };\n    }, []); // Run only once on mount\n\n    // Separate effect for handling Athan changes\n    useEffect(() => {\n        // Only load the audio source when the selection changes\n        // and don't autoplay it\n        if (audioRef.current) {\n            const selectedOption = ATHAN_OPTIONS.find(option => option.id === settings.selectedAthan);\n\n            if (selectedOption && !isPlaying) { // Don't change while playing\n                console.log(`Selected Athan source: ${selectedOption.name}`);\n\n                // Set properties but don't load/play\n                audioRef.current.preload = \"none\";\n                audioRef.current.src = selectedOption.url;\n            }\n        }\n    }, [settings.selectedAthan]);\n\n    // Apply volume changes\n    useEffect(() => {\n        if (audioRef.current) {\n            audioRef.current.volume = settings.volume / 100;\n        }\n    }, [settings.volume]);\n\n    // Save settings to localStorage when they change\n    useEffect(() => {\n        localStorage.setItem('athanSettings', JSON.stringify(settings));\n    }, [settings]);\n\n    // Move your updatePrayerTimes function definition to the component level so it can be called from visibility handler\n    const updatePrayerTimes = () => {\n        if (!prayerTimes) return;\n\n        const now = new Date();\n        const prayers = ['Fajr', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'];\n        const prayerTimes24h = {};\n\n        // Convert prayer times to Date objects for today\n        prayers.forEach(prayer => {\n            if (prayerTimes[prayer]) {\n                const [hours, minutes] = prayerTimes[prayer].split(':').map(Number);\n                const prayerDate = new Date();\n                prayerDate.setHours(hours, minutes, 0, 0);\n\n                // If prayer time has already passed and it's by more than 30 minutes,\n                // it's likely for tomorrow\n                if (prayerDate < now && (now - prayerDate) > 30 * 60 * 1000) {\n                    // Set for tomorrow instead\n                    prayerDate.setDate(prayerDate.getDate() + 1);\n                }\n\n                prayerTimes24h[prayer] = prayerDate;\n            }\n        });\n\n        // Find current and next prayer\n        let current = null;\n        let next = null;\n\n        // Sort prayers by time\n        const sortedPrayers = Object.keys(prayerTimes24h).sort(\n            (a, b) => prayerTimes24h[a] - prayerTimes24h[b]\n        );\n\n        // Find the last prayer before now and the next prayer\n        for (let i = 0; i < sortedPrayers.length; i++) {\n            const prayer = sortedPrayers[i];\n            const prayerTime = prayerTimes24h[prayer];\n\n            if (prayerTime <= now) {\n                current = { name: prayer, time: prayerTime };\n            } else {\n                next = { name: prayer, time: prayerTime };\n                break;\n            }\n        }\n\n        // If no next prayer found, first prayer of tomorrow\n        if (!next && sortedPrayers.length > 0) {\n            const firstPrayer = sortedPrayers[0];\n            const tomorrowTime = new Date(prayerTimes24h[firstPrayer]);\n            tomorrowTime.setDate(tomorrowTime.getDate() + 1);\n            next = { name: firstPrayer, time: tomorrowTime };\n        }\n\n        // Update state with console logging for debugging\n        if (next) {\n            const timeUntil = next.time - now;\n            const minutesUntilNext = Math.floor(timeUntil / 60000);\n            console.log(`Next prayer: ${next.name} in ${minutesUntilNext} minutes`);\n        }\n\n        setCurrentPrayer(current);\n        setNextPrayer(next);\n\n        // Calculate time until next prayer\n        if (next) {\n            const timeUntil = next.time - now;\n            setTimeUntilNextPrayer(timeUntil);\n\n            // Set notification timer if enabled\n            if (settings.notificationsEnabled &&\n                settings.selectedPrayers[next.name] &&\n                notificationPermission === 'granted') {\n\n                const notificationTime = next.time.getTime() - (settings.preAthanNotification * 60 * 1000);\n                const timeUntilNotification = notificationTime - now.getTime();\n\n                // Only set notification if it's in the future\n                if (timeUntilNotification > 0) {\n                    // Clear previous timer for this prayer\n                    if (notificationTimerRef.current[next.name]) {\n                        clearTimeout(notificationTimerRef.current[next.name]);\n                    }\n\n                    // Set new timer\n                    notificationTimerRef.current[next.name] = setTimeout(() => {\n                        showBrowserNotification(`${next.name} prayer in ${settings.preAthanNotification} minutes`);\n                    }, timeUntilNotification);\n                }\n            }\n        }\n    };\n\n    // Update your existing effect to use the extracted function:\n    useEffect(() => {\n        if (!prayerTimes) return;\n\n        // Initial update\n        updatePrayerTimes();\n\n        // Set interval to update times every minute\n        checkTimerRef.current = setInterval(updatePrayerTimes, 60000);\n\n        return () => {\n            clearInterval(checkTimerRef.current);\n            // Clear all notification timers\n            Object.values(notificationTimerRef.current).forEach(timerId => {\n                clearTimeout(timerId);\n            });\n            // Clear simulation timer\n            if (simulationTimerRef.current) {\n                clearInterval(simulationTimerRef.current);\n            }\n        };\n    }, [prayerTimes, settings, notificationPermission]);\n\n    // Check if it's time to play athan\n    useEffect(() => {\n        if (!nextPrayer || !settings.athanEnabled || !prayerTimes) return;\n\n        // Only play athan if this prayer is selected\n        if (!settings.selectedPrayers[nextPrayer.name]) return;\n\n        // Add a flag to track if we've already played the Athan for this prayer\n        const playedAthanKey = `played_${nextPrayer.name}_${nextPrayer.time.toISOString().split('T')[0]}`;\n        const alreadyPlayed = localStorage.getItem(playedAthanKey) === 'true';\n\n        // More precise time check - if prayer time is within the last minute, and we haven't played it yet\n        const now = new Date();\n        const differenceInSeconds = Math.floor((nextPrayer.time - now) / 1000);\n\n        // Time window of 60 seconds (play if between 0 and 60 seconds before prayer time)\n        if (differenceInSeconds >= 0 && differenceInSeconds <= 60 && !isPlaying && !alreadyPlayed) {\n            console.log(`It's time for ${nextPrayer.name} prayer, playing Athan...`);\n            playAthan();\n            showBrowserNotification(`It's time for ${nextPrayer.name} prayer`);\n\n            // Mark this prayer as played for today to avoid multiple plays\n            localStorage.setItem(playedAthanKey, 'true');\n\n            // Set a cleanup timeout to remove the \"played\" flag after 2 minutes\n            // This prevents repeated plays but allows testing via the test button\n            setTimeout(() => {\n                localStorage.removeItem(playedAthanKey);\n            }, 120000); // 2 minutes\n        }\n    }, [prayerTimes, timeUntilNextPrayer, nextPrayer, settings.athanEnabled, settings.selectedPrayers, isPlaying]);\n\n    // Add this useEffect near your other initialization useEffects\n    useEffect(() => {\n        let worker = null;\n\n        try {\n            if (typeof Worker !== 'undefined') {\n                worker = new Worker('/timer.worker.js');\n\n                worker.onmessage = (e) => {\n                    const data = e.data;\n\n                    if (data.type === 'tick') {\n                        // Update countdown display\n                        setSimulationTimeRemaining(data.remaining);\n                    }\n                    else if (data.type === 'complete') {\n                        console.log(\"⚡ WebWorker timer complete\");\n\n                        // Update UI state first\n                        setSimulationActive(false);\n                        setSimulationTimeRemaining(0);\n\n                        // Store completion for when tab becomes visible again\n                        sessionStorage.setItem('athan_simulation_completed', 'true');\n                        sessionStorage.setItem('athan_simulation_time', new Date().toString());\n\n                        // Use setTimeout to separate from state updates\n                        setTimeout(() => {\n                            // Show notification first (always works)\n                            if (nextPrayer) {\n                                showBrowserNotification(`Simulated: It's time for ${nextPrayer.name} prayer`);\n                            }\n\n                            // Try to play with notification fallback\n                            handleTimerCompletion();\n                        }, 100);\n                    }\n                    else if (data.type === 'pong') {\n                        console.log(\"📡 Worker communication test successful\");\n                        setNotificationMessage(\"Web Worker communication successful!\");\n                        setShowNotification(true);\n                    }\n                    else if (data.type === 'stopped') {\n                        console.log(\"⏹️ Timer stopped by request\");\n                        setSimulationActive(false);\n                    }\n                };\n\n                worker.onerror = (err) => {\n                    console.error(\"❌ Web Worker error:\", err);\n                    setNotificationMessage(\"Timer error: \" + err.message);\n                    setShowNotification(true);\n                };\n\n                setTimerWorker(worker);\n                console.log(\"🚀 Web Worker initialized successfully\");\n            }\n        } catch (error) {\n            console.error(\"Failed to initialize Web Worker:\", error);\n        }\n\n        return () => {\n            if (worker) {\n                try {\n                    worker.terminate();\n                    console.log(\"Web Worker terminated\");\n                } catch (err) {\n                    console.error(\"Error terminating worker:\", err);\n                }\n            }\n        };\n    }, []); // Empty dependency array = run once on mount\n\n    // Add this useEffect to register the visibilitychange event listener\n    useEffect(() => {\n        // Register visibility change handler\n        document.addEventListener('visibilitychange', handleVisibilityChange);\n\n        return () => {\n            document.removeEventListener('visibilitychange', handleVisibilityChange);\n        };\n    }, []);\n\n    // Try fallback audio when main audio fails\n    const tryFallbackAudio = () => {\n        // Try a simple beep sound as fallback (this is more likely to work)\n        const fallbackAudio = new Audio();\n\n        // Simple beep sound (data URI for a short beep - small version)\n        fallbackAudio.src = \"data:audio/wav;base64,UklGRjIAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQ4AAAAAAA==\";\n        fallbackAudio.volume = settings.volume / 100;\n\n        console.log(\"Trying fallback audio\");\n        fallbackAudio.play().then(() => {\n            console.log(\"Fallback audio playing successfully\");\n            // Try to trigger notification even if audio fails\n            if (nextPrayer) {\n                showBrowserNotification(`It's time for ${nextPrayer.name} prayer`);\n            }\n        }).catch(error => {\n            console.error(\"Even fallback audio failed:\", error);\n        });\n    };\n\n    // Play athan function with improved error handling and retry logic\n    const playAthan = (isFromTimer = false) => {\n        console.log(`Playing Athan${isFromTimer ? ' (triggered by timer)' : ''}`);\n\n        if (!audioRef.current) {\n            setAudioError('Audio player not initialized. Please reload the page.');\n            return;\n        }\n\n        // Reset error state\n        setAudioError(null);\n        setIsLoading(true);\n\n        // Determine which prayer we're playing for\n        const prayerName = nextPrayer ? nextPrayer.name : null;\n        console.log(`Current prayer context: ${prayerName || 'none'}`);\n\n        // Important: DON'T use getAthanForPrayer directly, only for Fajr\n        const athanId = prayerName === 'Fajr' ? 'mansour-fajr' : settings.selectedAthan;\n        console.log(`Selected athan ID: ${athanId}`);\n\n        // Make sure we have the correct audio source\n        const selectedOption = ATHAN_OPTIONS.find(option => option.id === athanId);\n        if (!selectedOption) {\n            setAudioError('Selected Athan not found. Please choose a different one.');\n            setIsLoading(false);\n            return;\n        }\n\n        console.log(`Playing athan: ${selectedOption.name} (${selectedOption.url})`);\n\n        // Create an AudioContext which helps with inactive tab playback\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n        // Always ensure the source is set and loaded\n        audioRef.current.src = selectedOption.url;\n        audioRef.current.preload = \"auto\"; // Change preload to auto when we want to play\n        audioRef.current.load(); //\n\n        // Try playing with retries\n        let retryCount = 0;\n        const maxRetries = isFromTimer ? 5 : 3; // More retries for timer-triggered playback\n\n        const attemptPlay = () => {\n            console.log(`Attempting to play Athan (attempt ${retryCount + 1})`);\n\n            // Special handling for timer-triggered playback to increase chances of success\n            if (isFromTimer && retryCount > 0) {\n                // Try to \"wake up\" the audio context if browser requires user gesture\n                const emptySource = audioContext.createBufferSource();\n                emptySource.start();\n                emptySource.stop();\n\n                // This helps prevent the browser from throttling the audio in inactive tabs\n                if ('mediaSession' in navigator) {\n                    navigator.mediaSession.setActionHandler('play', () => {\n                        audioRef.current.play();\n                    });\n                }\n            }\n\n            // Add the audio element to the AudioContext for better background playing\n            if (audioContext.state === 'suspended') {\n                audioContext.resume();\n            }\n\n            // Create an audio element specifically for notification if needed\n            let notificationAudio = null;\n\n            // Create a media element source from our audio element\n            const source = audioContext.createMediaElementSource(audioRef.current);\n            source.connect(audioContext.destination);\n\n            // Show browser notification as well, which can help wake up audio\n            if (settings.notificationsEnabled && notificationPermission === 'granted') {\n                try {\n                    const notification = new Notification('Salat-e-Mustaqeem', {\n                        body: `It's time for ${prayerName || 'prayer'}`,\n                        icon: '/favicon.ico',\n                        tag: 'athan-notification',\n                        requireInteraction: true // Keep notification until user interacts with it\n                    });\n\n                    // When notification is clicked, try to play audio again\n                    notification.onclick = () => {\n                        window.focus();\n                        if (audioRef.current) {\n                            audioRef.current.play().catch(e => console.error('Error playing after notification click:', e));\n                        }\n                    };\n\n                    // Also create a separate audio element as a backup\n                    notificationAudio = new Audio(selectedOption.url);\n                    notificationAudio.volume = settings.volume / 100;\n                    notificationAudio.play().catch(e => console.error('Notification audio playback failed:', e));\n                } catch (error) {\n                    console.error('Error showing notification:', error);\n                }\n            }\n\n            audioRef.current.play().then(() => {\n                setIsPlaying(true);\n                setIsLoading(false);\n                console.log(\"Athan playing successfully\");\n            }).catch(error => {\n                console.error(`Error playing Athan (attempt ${retryCount + 1}):`, error);\n                retryCount++;\n\n                if (retryCount < maxRetries) {\n                    // Wait a bit longer between retries for timer-triggered playback\n                    const delay = isFromTimer ? 1500 : 1000;\n                    setTimeout(attemptPlay, delay);\n                } else {\n                    // Give up after max retries\n                    setIsPlaying(false);\n                    setIsLoading(false);\n                    setAudioError(`Unable to play audio after ${maxRetries} attempts. Please check your connection or try another Athan.`);\n\n                    // Try to play the backup notification audio if main audio failed\n                    if (notificationAudio) {\n                        notificationAudio.play().catch(e => console.error('Backup audio also failed:', e));\n                    } else {\n                        // Try to load a fallback audio as a last resort\n                        tryFallbackAudio();\n                    }\n\n                    // For timer-triggered events, ensure at least the notification shows\n                    if (isFromTimer && nextPrayer) {\n                        showBrowserNotification(`It's time for ${nextPrayer.name} prayer (audio playback failed)`);\n                    }\n                }\n            });\n        };\n\n        // Start the attempt process\n        attemptPlay();\n    };\n\n    // Add this function for more reliable timer-triggered playback\n    const forcePlayAthan = () => {\n        console.log(\"🔊 Force playing Athan after timer completion\");\n\n        if (!audioRef.current) {\n            audioRef.current = new Audio();\n        }\n\n        // Determine which prayer we're playing for\n        const prayerName = nextPrayer ? nextPrayer.name : currentPrayer ? currentPrayer.name : null;\n\n        // Important: DON'T use getAthanForPrayer directly, only for Fajr\n        const athanId = prayerName === 'Fajr' ? 'mansour-fajr' : settings.selectedAthan;\n        console.log(`Force playing athan ID: ${athanId}`);\n\n        // Make sure we have the correct audio source\n        const selectedOption = ATHAN_OPTIONS.find(option => option.id === athanId);\n        if (!selectedOption) {\n            throw new Error(\"Selected Athan not found\");\n        }\n\n        console.log(`Force playing athan: ${selectedOption.name}`);\n\n        // Rest of your existing forcePlayAthan function...\n        // Configure audio with maximum chance of successful playback\n        audioRef.current.src = selectedOption.url;\n        audioRef.current.volume = settings.volume / 100;\n        audioRef.current.loop = false;\n        audioRef.current.muted = false;\n        audioRef.current.preload = \"auto\";\n        audioRef.current.currentTime = 0;\n\n        // Create backup audio element specifically for this play attempt\n        const backupAudio = new Audio(selectedOption.url);\n        backupAudio.volume = settings.volume / 100;\n        backupAudio.preload = \"auto\";\n\n        // Rest of your existing code...\n    };\n\n    // Pause athan function\n    const pauseAthan = () => {\n        if (audioRef.current) {\n            audioRef.current.pause();\n            setIsPlaying(false);\n        }\n    };\n\n    // Replace your testAthan function with this one\n    const testAthan = () => {\n        if (isPlaying) {\n            pauseAthan();\n        } else {\n            // For test button, ALWAYS use the selected Athan from dropdown\n            if (!audioRef.current) {\n                setAudioError('Audio player not initialized. Please reload the page.');\n                return;\n            }\n\n            // Reset error state\n            setAudioError(null);\n            setIsLoading(true);\n\n            // Important: When testing, always use the user's selection\n            console.log(\"Test button pressed - using selected Athan from dropdown:\", settings.selectedAthan);\n\n            // Make sure we have the correct audio source\n            const selectedOption = ATHAN_OPTIONS.find(option => option.id === settings.selectedAthan);\n            if (!selectedOption) {\n                setAudioError('Selected Athan not found. Please choose a different one.');\n                setIsLoading(false);\n                return;\n            }\n\n            console.log(`Playing test Athan: ${selectedOption.name} (${selectedOption.url})`);\n\n            // Always ensure the source is set and loaded\n            audioRef.current.src = selectedOption.url;\n            audioRef.current.preload = \"auto\"; // Change preload to auto when we want to play\n            audioRef.current.load(); // Explicitly load the audio\n\n            // Try playing with same retry logic as in playAthan\n            let retryCount = 0;\n            const maxRetries = 3;\n\n            const attemptPlay = () => {\n                console.log(`Attempting to play test Athan (attempt ${retryCount + 1})`);\n\n                audioRef.current.play().then(() => {\n                    setIsPlaying(true);\n                    setIsLoading(false);\n                    console.log(\"Test Athan playing successfully\");\n                }).catch(error => {\n                    console.error(`Error playing test Athan (attempt ${retryCount + 1}):`, error);\n                    retryCount++;\n\n                    if (retryCount < maxRetries) {\n                        setTimeout(attemptPlay, 1000);\n                    } else {\n                        setIsPlaying(false);\n                        setIsLoading(false);\n                        setAudioError(`Unable to play audio after ${maxRetries} attempts. Please check your connection or try another Athan.`);\n                        tryFallbackAudio();\n                    }\n                });\n            };\n\n            // Start the attempt process\n            attemptPlay();\n        }\n    };\n\n    // Show browser notification\n    const showBrowserNotification = (message) => {\n        if (notificationPermission !== 'granted' || !settings.notificationsEnabled) {\n            return;\n        }\n\n        try {\n            const notification = new Notification('Salat-e-Mustaqeem', {\n                body: message,\n                icon: '/favicon.ico' // Use your app's favicon or logo\n            });\n\n            // Close notification after 10 seconds\n            setTimeout(() => notification.close(), 10000);\n        } catch (error) {\n            console.error('Error showing notification:', error);\n\n            // Fall back to in-app notification\n            setNotificationMessage(message);\n            setShowNotification(true);\n        }\n    };\n\n    // Handle timer completion playback and notification\n    const handleTimerCompletion = () => {\n        try {\n            console.log(\"Attempting to play Athan after timer completion\");\n\n            // Try playing audio\n            playAthan();\n\n            // Also show a notification with play button for manual playback\n            const ManualPlayComponent = (\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    onClick={() => {\n                        playAthan();\n                        setShowNotification(false);\n                    }}\n                >\n                    Play Again\n                </Button>\n            );\n\n            setNotificationMessage(\"Timer complete! Click to play Athan\");\n            setNotificationComponent(ManualPlayComponent);\n            setShowNotification(true);\n        } catch (error) {\n            console.error(\"Error in timer completion:\", error);\n\n            // Show error with play button\n            const ErrorPlayComponent = (\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"small\"\n                    onClick={() => {\n                        playAthan();\n                        setShowNotification(false);\n                    }}\n                >\n                    Play Now\n                </Button>\n            );\n\n            setNotificationMessage(\"Couldn't play automatically\");\n            setNotificationComponent(ErrorPlayComponent);\n            setShowNotification(true);\n        }\n    };\n\n    // Format time until next prayer for display\n    const formatTimeRemaining = () => {\n        if (!timeUntilNextPrayer) return '00:00:00';\n\n        const totalSeconds = Math.floor(timeUntilNextPrayer / 1000);\n        const hours = Math.floor(totalSeconds / 3600);\n        const minutes = Math.floor((totalSeconds % 3600) / 60);\n        const seconds = totalSeconds % 60;\n\n        // Format with leading zeros and proper spacing for monospace font\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    // Toggle athan enabled\n    const toggleAthanEnabled = () => {\n        setSettings(prev => ({\n            ...prev,\n            athanEnabled: !prev.athanEnabled\n        }));\n\n        // Stop playing if turning off\n        if (isPlaying && settings.athanEnabled) {\n            pauseAthan();\n        }\n    };\n\n    // Toggle notification enabled with improved permission handling\n    const toggleNotifications = async () => {\n        // If turning notifications off, just disable\n        if (settings.notificationsEnabled) {\n            setSettings(prev => ({\n                ...prev,\n                notificationsEnabled: false\n            }));\n            return;\n        }\n\n        // Make sure we have the current status\n        const currentPermission = Notification.permission;\n        setNotificationPermission(currentPermission);\n\n        // If turning on, check permission\n        if (currentPermission === 'granted') {\n            // Already have permission, just enable\n            setSettings(prev => ({\n                ...prev,\n                notificationsEnabled: true\n            }));\n\n            setNotificationMessage(\"Notifications enabled\");\n            setShowNotification(true);\n        } else {\n            // Need to request permission\n            const granted = await requestNotificationPermission();\n\n            if (!granted) {\n                // Show better information about permission limitations\n                const isIncognito = await checkIncognitoMode();\n                if (isIncognito) {\n                    setNotificationMessage(\n                        \"In private browsing: please use the notification icon in your address bar\"\n                    );\n                } else {\n                    setNotificationMessage(\n                        \"Permission not granted. Check your browser settings or try again.\"\n                    );\n                }\n                setShowNotification(true);\n            }\n        }\n    };\n\n    // Toggle prayer selection\n    const togglePrayerSelection = (prayer) => {\n        setSettings(prev => ({\n            ...prev,\n            selectedPrayers: {\n                ...prev.selectedPrayers,\n                [prayer]: !prev.selectedPrayers[prayer]\n            }\n        }));\n    };\n\n    // Handle athan selection change\n    const handleAthanChange = (event) => {\n        setSettings(prev => ({\n            ...prev,\n            selectedAthan: event.target.value\n        }));\n    };\n\n    // Handle volume change\n    const handleVolumeChange = (event, newValue) => {\n        setSettings(prev => ({\n            ...prev,\n            volume: newValue\n        }));\n    };\n\n    // Handle pre-athan notification time change\n    const handlePreAthanTimeChange = (event) => {\n        setSettings(prev => ({\n            ...prev,\n            preAthanNotification: Number(event.target.value)\n        }));\n    };\n\n    // Render volume icon based on level\n    const getVolumeIcon = () => {\n        if (settings.volume === 0) return <VolumeOffIcon />;\n        if (settings.volume < 50) return <VolumeDownIcon />;\n        return <VolumeUpIcon />;\n    };\n\n    // Render audio player status\n    const renderAudioStatus = () => {\n        if (audioError) {\n            return (\n                <Alert\n                    severity=\"error\"\n                    variant=\"filled\"\n                    sx={{ mt: 1, mb: 2, borderRadius: 1.5 }}\n                >\n                    {audioError}\n                </Alert>\n            );\n        }\n\n        if (isLoading) {\n            return (\n                <Alert\n                    severity=\"info\"\n                    variant=\"filled\"\n                    icon={<CircularProgress size={20} color=\"inherit\" />}\n                    sx={{ mt: 1, mb: 2, borderRadius: 1.5 }}\n                >\n                    Loading audio...\n                </Alert>\n            );\n        }\n\n        if (isPlaying) {\n            return (\n                <Alert\n                    severity=\"success\"\n                    variant=\"filled\"\n                    sx={{ mt: 1, mb: 2, borderRadius: 1.5 }}\n                >\n                    Playing {ATHAN_OPTIONS.find(o => o.id === settings.selectedAthan)?.name || 'Athan'}\n                </Alert>\n            );\n        }\n\n        return null;\n    };\n\n    // Add a function to clear played flags (useful for testing)\n    const clearPlayedFlags = () => {\n        // Get all keys from localStorage\n        const keys = Object.keys(localStorage);\n\n        // Filter for keys that start with \"played_\"\n        const playedKeys = keys.filter(key => key.startsWith('played_'));\n\n        // Remove each played key\n        playedKeys.forEach(key => localStorage.removeItem(key));\n\n        console.log('Cleared all played Athan flags');\n    };\n\n    // Test worker communication\n    const testWorkerCommunication = () => {\n        if (!timerWorker) {\n            setNotificationMessage(\"Web Worker not initialized\");\n            setShowNotification(true);\n            return;\n        }\n\n        try {\n            // Send a test message to the worker\n            timerWorker.postMessage({ command: 'ping' });\n\n            setNotificationMessage(\"Test message sent to Web Worker...\");\n            setShowNotification(true);\n        } catch (error) {\n            console.error(\"Worker test failed:\", error);\n            setNotificationMessage(\"Worker test failed: \" + error.message);\n            setShowNotification(true);\n        }\n    };\n\n    return (\n        <Card\n            sx={{\n                mb: 4,\n                borderRadius: 2,\n                boxShadow: 3\n            }}\n        >\n            <CardContent>\n                <Typography variant=\"h6\" gutterBottom sx={{ color: 'primary.main', fontWeight: 'medium' }}>\n                    Athan Player\n                </Typography>\n\n                {/* Next prayer countdown - Styled to match the PrayerTimesClockDisplay */}\n                <Card sx={{ mb: 4, overflow: 'visible' }}>\n                    <CardContent>\n                        <Typography variant=\"h6\" gutterBottom sx={{ color: theme.palette.primary.main }}>\n                            Next Prayer\n                        </Typography>\n                        <Box sx={{ textAlign: 'center', py: 2 }}>\n                            {/* Main countdown display */}\n                            <Box sx={{\n                                position: 'relative',\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                height: 250, // Match height with PrayerClock\n                                width: '100%',\n                                mb: 2\n                            }}>\n                                {/* Circular progress indicator - INCREASED SIZE */}\n                                <Box\n                                    sx={{\n                                        position: 'relative',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        justifyContent: 'center',\n                                        width: 220, // Increased from 220\n                                        height: 220, // Increased from 220\n                                        borderRadius: '100%',\n                                        background: `\n                                            radial-gradient(closest-side, ${theme.palette.background.paper} 79%, transparent 80% 100%),\n                                            conic-gradient(${theme.palette.primary.main} ${timeUntilNextPrayer ? (1 - timeUntilNextPrayer / (3 * 60 * 60 * 1000)) * 100 : 0}%, ${theme.palette.divider} 0)\n                                        `,\n                                        boxShadow: 3\n                                    }}\n                                >\n                                    <Box sx={{\n                                        display: 'flex',\n                                        flexDirection: 'column',\n                                        alignItems: 'center',\n                                        width: '85%' // Slightly increased from 80%\n                                    }}>\n                                        {/* Prayer name */}\n                                        <Typography\n                                            variant=\"h6\"\n                                            component=\"div\"\n                                            color=\"primary.main\"\n                                            sx={{ fontWeight: 'bold' }}\n                                        >\n                                            {nextPrayer?.name || 'Next Prayer'}\n                                        </Typography>\n\n                                        {/* Countdown time - ADJUSTING SIZE AND SPACING */}\n                                        <Typography\n                                            variant=\"h2\"\n                                            component=\"div\"\n                                            sx={{\n                                                fontFamily: 'monospace',\n                                                fontWeight: 'bold',\n                                                fontSize: { xs: '2.5rem', sm: '2.0rem' }, // Responsive font size\n                                                letterSpacing: 1, // Increased from 1\n                                                my: 1,\n                                                color: theme.palette.secondary.main\n                                            }}\n                                        >\n                                            {formatTimeRemaining()}\n                                        </Typography>\n\n                                        {/* City name */}\n                                        {params && params.address && (\n                                            <Typography\n                                                variant=\"body2\"\n                                                color=\"text.secondary\"\n                                                noWrap\n                                                sx={{\n                                                    maxWidth: '100%',\n                                                    textOverflow: 'ellipsis',\n                                                    overflow: 'hidden'\n                                                }}\n                                            >\n                                                {params.address}\n                                            </Typography>\n                                        )}\n                                    </Box>\n                                </Box>\n\n                                {/* Additional information below the clock */}\n                                <Box sx={{ mt: 2, width: '100%' }}>\n                                    <Grid container spacing={2} justifyContent=\"center\">\n                                        {currentPrayer && (\n                                            <Grid item>\n                                                <Paper\n                                                    variant=\"outlined\"\n                                                    sx={{\n                                                        px: 2,\n                                                        py: 0.5,\n                                                        borderRadius: 2,\n                                                        display: 'flex',\n                                                        alignItems: 'center'\n                                                    }}\n                                                >\n                                                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mr: 1 }}>\n                                                        Current:\n                                                    </Typography>\n                                                    <Typography variant=\"body2\" fontWeight=\"medium\" color=\"primary\">\n                                                        {currentPrayer.name}\n                                                    </Typography>\n                                                </Paper>\n                                            </Grid>\n                                        )}\n\n                                        {nextPrayer && (\n                                            <Grid item>\n                                                <Paper\n                                                    variant=\"outlined\"\n                                                    sx={{\n                                                        px: 2,\n                                                        py: 0.5,\n                                                        borderRadius: 2,\n                                                        display: 'flex',\n                                                        alignItems: 'center',\n                                                        borderColor: theme.palette.secondary.main\n                                                    }}\n                                                >\n                                                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mr: 1 }}>\n                                                        At:\n                                                    </Typography>\n                                                    <Typography variant=\"body2\" fontWeight=\"medium\" color=\"secondary\">\n                                                        {nextPrayer.time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                                                    </Typography>\n                                                </Paper>\n                                            </Grid>\n                                        )}\n                                    </Grid>\n                                </Box>\n                            </Box>\n                        </Box>\n                    </CardContent>\n                </Card>\n\n                {/* Audio status messages */}\n                {renderAudioStatus()}\n\n                {/* Main controls */}\n                <Paper\n                    variant=\"outlined\"\n                    sx={{\n                        p: 2,\n                        mb: 3,\n                        borderRadius: 2,\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center'\n                    }}\n                >\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={settings.athanEnabled}\n                                onChange={toggleAthanEnabled}\n                                color=\"primary\"\n                            />\n                        }\n                        label={settings.athanEnabled ? \"Athan Enabled\" : \"Athan Disabled\"}\n                    />\n\n                    <Button\n                        variant=\"contained\"\n                        color={isPlaying ? \"secondary\" : \"primary\"}\n                        startIcon={isPlaying ? <PauseIcon /> : <PlayArrowIcon />}\n                        onClick={testAthan}\n                        disabled={isLoading}\n                        sx={{ borderRadius: 4 }}\n                    >\n                        {isPlaying ? \"Stop\" : \"Test Athan\"}\n                    </Button>\n\n                    <Tooltip\n                        title={\n                            settings.notificationsEnabled\n                                ? \"Notifications enabled\"\n                                : notificationPermission === 'granted'\n                                    ? \"Enable notifications\"\n                                    : \"Click to enable notifications\"\n                        }\n                    >\n                        <span> {/* Wrap in span so tooltip still works when button is disabled */}\n                            <IconButton\n                                color={settings.notificationsEnabled ? \"primary\" : \"default\"}\n                                onClick={toggleNotifications}\n                                sx={{\n                                    border: settings.notificationsEnabled ? `1px solid ${theme.palette.primary.main}` : 'none',\n                                    opacity: notificationPermission === 'denied' ? 0.7 : 1\n                                }}\n                                disabled={false} // Never disable the button, as it can be used to request permissions\n                            >\n                                {settings.notificationsEnabled ? <NotificationsIcon /> : <NotificationsOffIcon />}\n                            </IconButton>\n                        </span>\n                    </Tooltip>\n                </Paper>\n\n                {/* Notification permission warning */}\n                {settings.notificationsEnabled && notificationPermission !== 'granted' && (\n                    <Alert\n                        severity=\"warning\"\n                        variant=\"outlined\"\n                        sx={{ mb: 2, borderRadius: 2 }}\n                        action={\n                            <Stack direction=\"row\" spacing={1}>\n                                <Button\n                                    color=\"warning\"\n                                    size=\"small\"\n                                    variant=\"contained\"\n                                    onClick={async () => {\n                                        // Try to request permission\n                                        const success = await requestNotificationPermission();\n                                        if (!success) {\n                                            // Show browser-specific instructions\n                                            const browserInfo = detectBrowser();\n                                            let message = \"You'll need to enable notifications in your browser settings.\";\n\n                                            if (browserInfo.name === 'Chrome' || browserInfo.name === 'Edge') {\n                                                message += \" Look for the notification icon in your address bar.\";\n                                            } else if (browserInfo.name === 'Firefox') {\n                                                message += \" Click the lock icon in the address bar and select permissions.\";\n                                            } else if (browserInfo.name === 'Safari') {\n                                                message += \" Check Safari > Preferences > Websites > Notifications.\";\n                                            }\n\n                                            setNotificationMessage(message);\n                                            setShowNotification(true);\n                                        }\n                                    }}\n                                >\n                                    Enable\n                                </Button>\n                                <Button\n                                    size=\"small\"\n                                    color=\"inherit\"\n                                    onClick={() => {\n                                        setSettings(prev => ({\n                                            ...prev,\n                                            notificationsEnabled: false\n                                        }));\n                                    }}\n                                >\n                                    Disable\n                                </Button>\n                            </Stack>\n                        }\n                    >\n                        <Typography>\n                            <strong>Browser notifications are blocked.</strong> Prayer reminders won't work until you allow notifications.\n                            {checkIncognitoMode() && (\n                                <Typography component=\"span\" sx={{ display: 'block', mt: 0.5 }}>\n                                    <em>Note: You appear to be in private browsing mode, which may limit notification permissions.</em>\n                                </Typography>\n                            )}\n                        </Typography>\n                    </Alert>\n                )}\n\n                {/* Volume slider */}\n                <Paper variant=\"outlined\" sx={{ mb: 3, px: 2, py: 1.5, borderRadius: 2, display: 'flex', alignItems: 'center' }}>\n                    <IconButton sx={{ mr: 1 }}>{getVolumeIcon()}</IconButton>\n                    <Slider\n                        value={settings.volume}\n                        onChange={handleVolumeChange}\n                        aria-labelledby=\"volume-slider\"\n                        valueLabelDisplay=\"auto\"\n                        disabled={!settings.athanEnabled}\n                    />\n                </Paper>\n\n                {/* Settings section */}\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    Settings\n                </Typography>\n\n                <FormControl fullWidth sx={{ mb: 2 }}>\n                    <InputLabel id=\"athan-select-label\">Athan Voice</InputLabel>\n                    <Select\n                        labelId=\"athan-select-label\"\n                        id=\"athan-select\"\n                        value={settings.selectedAthan}\n                        label=\"Athan Voice\"\n                        onChange={handleAthanChange}\n                        disabled={!settings.athanEnabled}\n                    >\n                        {ATHAN_OPTIONS.map(option => (\n                            <MenuItem key={option.id} value={option.id}>{option.name}</MenuItem>\n                        ))}\n                    </Select>\n                    <FormHelperText>\n                        Note: For Fajr prayer, Mansour Zahrani Fajr will automatically be used.\n                    </FormHelperText>\n                </FormControl>\n\n                <FormControl fullWidth sx={{ mb: 2 }}>\n                    <InputLabel id=\"notification-time-label\">Notification before prayer</InputLabel>\n                    <Select\n                        labelId=\"notification-time-label\"\n                        id=\"notification-time\"\n                        value={settings.preAthanNotification}\n                        label=\"Notification before prayer\"\n                        onChange={handlePreAthanTimeChange}\n                        disabled={!settings.notificationsEnabled}\n                    >\n                        <MenuItem value={5}>5 minutes</MenuItem>\n                        <MenuItem value={10}>10 minutes</MenuItem>\n                        <MenuItem value={15}>15 minutes</MenuItem>\n                        <MenuItem value={20}>20 minutes</MenuItem>\n                        <MenuItem value={30}>30 minutes</MenuItem>\n                    </Select>\n                </FormControl>\n\n                {/* Prayer selections */}\n                <Typography variant=\"subtitle2\" gutterBottom>\n                    Play Athan for:\n                </Typography>\n\n                <FormGroup sx={{ mb: 2 }}>\n                    <Stack direction=\"row\" flexWrap=\"wrap\">\n                        {Object.keys(settings.selectedPrayers).map(prayer => (\n                            <FormControlLabel\n                                key={prayer}\n                                control={\n                                    <Checkbox\n                                        checked={settings.selectedPrayers[prayer]}\n                                        onChange={() => togglePrayerSelection(prayer)}\n                                        disabled={!settings.athanEnabled}\n                                    />\n                                }\n                                label={prayer}\n                            />\n                        ))}\n                    </Stack>\n                </FormGroup>\n\n                {/* Debug and simulation controls - COMMENTING OUT OR REMOVING TEST FEATURES */}\n                {(process.env.NODE_ENV === 'development') && ( // Only show in development environment\n                    <Box sx={{ mt: 3, mb: 1 }}>\n                        <Typography variant=\"subtitle2\" gutterBottom>\n                            Testing Tools\n                        </Typography>\n\n                        <Paper variant=\"outlined\" sx={{ p: 2, borderRadius: 2 }}>\n                            {/* Simulation status */}\n                            {simulationActive && (\n                                <Alert\n                                    severity=\"info\"\n                                    variant=\"filled\"\n                                    sx={{ mb: 2 }}\n                                    action={\n                                        <Button\n                                            color=\"inherit\"\n                                            size=\"small\"\n                                            onClick={() => {\n                                                // Stop the timer via Web Worker if available\n                                                if (timerWorker) {\n                                                    timerWorker.postMessage({ command: 'stop' });\n                                                }\n\n                                                // Also clear any fallback timers\n                                                if (simulationTimerRef.current) {\n                                                    clearInterval(simulationTimerRef.current);\n                                                    simulationTimerRef.current = null;\n                                                }\n\n                                                setSimulationActive(false);\n                                            }}\n                                        >\n                                            Cancel\n                                        </Button>\n                                    }\n                                >\n                                    Simulation active. Athan will play in: <strong>{simulationTimeRemaining}</strong> seconds\n                                </Alert>\n                            )}\n\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} sm={6}>\n                                    <Button\n                                        variant=\"outlined\"\n                                        size=\"small\"\n                                        onClick={clearPlayedFlags}\n                                        color=\"warning\"\n                                        fullWidth\n                                    >\n                                        Reset Play Status\n                                    </Button>\n                                </Grid>\n\n                                <Grid item xs={12} sm={6}>\n                                    <Button\n                                        variant=\"outlined\"\n                                        size=\"small\"\n                                        onClick={() => {\n                                            if (nextPrayer) {\n                                                console.log(\"Simulating immediate prayer time\");\n                                                playAthan();\n                                                showBrowserNotification(`Simulated: It's time for ${nextPrayer.name} prayer`);\n                                            } else {\n                                                setNotificationMessage(\"No prayer time available for simulation\");\n                                                setShowNotification(true);\n                                            }\n                                        }}\n                                        color=\"info\"\n                                        disabled={simulationActive || !nextPrayer}\n                                        fullWidth\n                                    >\n                                        Play Athan Now\n                                    </Button>\n                                </Grid>\n\n                                <Grid item xs={12} sm={4}>\n                                    <Button\n                                        variant=\"contained\"\n                                        size=\"small\"\n                                        onClick={() => startPrayerTimeSimulation(30)}\n                                        color=\"secondary\"\n                                        disabled={simulationActive || !nextPrayer}\n                                        fullWidth\n                                    >\n                                        30 Second Test\n                                    </Button>\n                                </Grid>\n\n                                <Grid item xs={12} sm={4}>\n                                    <Button\n                                        variant=\"contained\"\n                                        size=\"small\"\n                                        onClick={() => startPrayerTimeSimulation(60)}\n                                        color=\"secondary\"\n                                        disabled={simulationActive || !nextPrayer}\n                                        fullWidth\n                                    >\n                                        1 Minute Test\n                                    </Button>\n                                </Grid>\n\n                                <Grid item xs={12} sm={4}>\n                                    <Button\n                                        variant=\"contained\"\n                                        size=\"small\"\n                                        onClick={() => startPrayerTimeSimulation(120)}\n                                        color=\"secondary\"\n                                        disabled={simulationActive || !nextPrayer}\n                                        fullWidth\n                                    >\n                                        2 Minute Test\n                                    </Button>\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <Button\n                                        variant=\"text\"\n                                        size=\"small\"\n                                        onClick={checkAudioCapabilities}\n                                        color=\"primary\"\n                                        fullWidth\n                                    >\n                                        Run Audio System Diagnostic\n                                    </Button>\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <Button\n                                        variant=\"text\"\n                                        size=\"small\"\n                                        onClick={testWorkerCommunication}\n                                        color=\"info\"\n                                        fullWidth\n                                    >\n                                        Test Worker Communication\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Box>\n                )}\n\n                {/* Attribution */}\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block', textAlign: 'center', mt: 2 }}>\n                    Audio files provided by <Link href=\"https://praytimes.org/audio/\" target=\"_blank\" rel=\"noopener\">Praytimes.org</Link> API\n                </Typography>\n\n                {/* In-app notification snackbar */}\n                <Snackbar\n                    open={showNotification}\n                    autoHideDuration={6000}\n                    onClose={() => {\n                        setShowNotification(false);\n                        setNotificationComponent(null); // Reset custom component\n                    }}\n                >\n                    {notificationComponent ? (\n                        <Alert\n                            severity=\"info\"\n                            action={notificationComponent}\n                            onClose={() => setShowNotification(false)}\n                        >\n                            {notificationMessage}\n                        </Alert>\n                    ) : (\n                        <Alert\n                            severity=\"info\"\n                            onClose={() => setShowNotification(false)}\n                        >\n                            {notificationMessage}\n                        </Alert>\n                    )}\n                </Snackbar>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default AthanPlayer;","import React, { useContext } from 'react';\nimport {\n  Box,\n  Typography,\n  Switch,\n  FormControlLabel,\n  Slider,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Grid,\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport { AthanSettingsContext } from '../contexts/AthanSettingsContext';\n\nconst PersonalizedReminders = () => {\n  const { settings, updateSettings } = useContext(AthanSettingsContext);\n  \n  // Prayer names to display\n  const prayers = [\n    { id: 'fajr', name: 'Fajr', defaultMinutes: 20, minMinutes: 5, maxMinutes: 60 },\n    { id: 'dhuhr', name: 'Dhuhr', defaultMinutes: 10, minMinutes: 5, maxMinutes: 30 },\n    { id: 'asr', name: 'Asr', defaultMinutes: 10, minMinutes: 5, maxMinutes: 30 },\n    { id: 'maghrib', name: 'Maghrib', defaultMinutes: 10, minMinutes: 5, maxMinutes: 30 },\n    { id: 'isha', name: 'Isha', defaultMinutes: 10, minMinutes: 5, maxMinutes: 30 }\n  ];\n\n  // Handle main toggle for personalized reminders\n  const handleRemindersToggle = (event) => {\n    updateSettings({ customRemindersEnabled: event.target.checked });\n  };\n\n  // Handle changing reminder time for a specific prayer\n  const handleReminderTimeChange = (prayer, newValue) => {\n    updateSettings({\n      customReminderTimes: {\n        ...settings.customReminderTimes,\n        [prayer]: newValue\n      }\n    });\n  };\n\n  // Get current reminder time for a prayer\n  const getReminderTime = (prayer) => {\n    return settings.customReminderTimes?.[prayer] || \n      prayers.find(p => p.id === prayer)?.defaultMinutes || 10;\n  };\n\n  return (\n    <Box sx={{ mt: 3 }}>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"personalized-reminders-content\"\n          id=\"personalized-reminders-header\"\n          sx={{ \n            bgcolor: settings.customRemindersEnabled ? 'primary.50' : 'inherit',\n            '&.Mui-expanded': {\n              bgcolor: settings.customRemindersEnabled ? 'primary.50' : 'inherit'\n            }\n          }}\n        >\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <AccessTimeIcon sx={{ mr: 1, color: 'primary.main' }} />\n            <Typography>Personalized Prayer Reminders</Typography>\n          </Box>\n        </AccordionSummary>\n        \n        <AccordionDetails>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={settings.customRemindersEnabled}\n                onChange={handleRemindersToggle}\n                color=\"primary\"\n              />\n            }\n            label=\"Enable pre-prayer reminders\"\n            sx={{ mb: 2, display: 'block' }}\n          />\n          \n          {settings.customRemindersEnabled && (\n            <Grid container spacing={2}>\n              {prayers.map((prayer) => (\n                <Grid item xs={12} key={prayer.id}>\n                  <Typography id={`${prayer.id}-reminder-slider`} gutterBottom>\n                    {prayer.name} prayer reminder: {getReminderTime(prayer.id)} minutes before\n                  </Typography>\n                  <Slider\n                    value={getReminderTime(prayer.id)}\n                    onChange={(_, newValue) => handleReminderTimeChange(prayer.id, newValue)}\n                    aria-labelledby={`${prayer.id}-reminder-slider`}\n                    valueLabelDisplay=\"auto\"\n                    step={5}\n                    marks={[\n                      { value: prayer.minMinutes, label: `${prayer.minMinutes}m` },\n                      { value: prayer.defaultMinutes, label: `${prayer.defaultMinutes}m` },\n                      { value: prayer.maxMinutes, label: `${prayer.maxMinutes}m` }\n                    ]}\n                    min={prayer.minMinutes}\n                    max={prayer.maxMinutes}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          )}\n        </AccordionDetails>\n      </Accordion>\n    </Box>\n  );\n};\n\nexport default PersonalizedReminders;","import React, { useContext, useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Switch,\n  FormControlLabel,\n  Slider,\n  Button,\n  Alert,\n  Paper,\n  Divider,\n  FormControl,\n  FormLabel,\n  Select,\n  MenuItem,\n  Snackbar,\n  Tooltip,\n  IconButton\n} from '@mui/material';\nimport VolumeUpIcon from '@mui/icons-material/VolumeUp';\nimport VolumeDownIcon from '@mui/icons-material/VolumeDown';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport StopIcon from '@mui/icons-material/Stop';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport { AthanSettingsContext } from '../contexts/AthanSettingsContext';\nimport PersonalizedReminders from './PersonalizedReminders';\n\nconst AthanSettings = () => {\n  const {\n    settings,\n    updateSettings,\n    requestNotificationPermission,\n    playAthan,\n    stopAthan,\n    availableAthans,\n    availableFajrAthans\n  } = useContext(AthanSettingsContext);\n  \n  const [message, setMessage] = useState(null);\n  const [showSnackbar, setShowSnackbar] = useState(false);\n\n  // Main toggle handler - handles both enabled and notification permission\n  const handleMainToggle = async (e) => {\n    const isEnabled = e.target.checked;\n    \n    // If turning off, just disable everything\n    if (!isEnabled) {\n      updateSettings({ \n        enabled: false,\n        notificationsEnabled: false \n      });\n      return;\n    }\n    \n    // If turning on\n    updateSettings({ enabled: true });\n    \n    // Request notification permission if not already granted\n    if (!settings.notificationsEnabled) {\n      const result = await requestNotificationPermission();\n      setMessage(result.message);\n      setShowSnackbar(true);\n    }\n  };\n\n  // Handle volume change\n  const handleVolumeChange = (event, newValue) => {\n    updateSettings({ volume: newValue });\n  };\n\n  // Handle playing test sound\n  const handlePlayAthan = (isFajr = false) => {\n    if (settings.playingAudio) {\n      stopAthan();\n    } else {\n      playAthan(isFajr);\n    }\n  };\n\n  // Handle Athan selection change\n  const handleAthanChange = (event) => {\n    const selectedAthan = availableAthans.find(athan => athan.id === event.target.value);\n    if (selectedAthan) {\n      updateSettings({ athanPath: selectedAthan.url });\n    }\n  };\n\n  // Handle Fajr Athan selection change\n  const handleFajrAthanChange = (event) => {\n    const selectedAthan = availableFajrAthans.find(athan => athan.id === event.target.value);\n    if (selectedAthan) {\n      updateSettings({ fajrAthanPath: selectedAthan.url });\n    }\n  };\n\n  // Get current Athan ID from path\n  const getCurrentAthanId = () => {\n    const current = availableAthans.find(athan => athan.url === settings.athanPath);\n    return current ? current.id : 'makkah';\n  };\n\n  // Get current Fajr Athan ID from path\n  const getCurrentFajrAthanId = () => {\n    const current = availableFajrAthans.find(athan => athan.url === settings.fajrAthanPath);\n    return current ? current.id : 'mansour-fajr';\n  };\n\n  return (\n    <Paper elevation={2} sx={{ p: 3, borderRadius: 2, mb: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom sx={{ display: 'flex', alignItems: 'center', mb: 0 }}>\n          <NotificationsIcon sx={{ mr: 1 }} />\n          Athan Settings\n        </Typography>\n        <Tooltip title=\"Athan will play automatically at prayer times. Browser notifications will appear if you allow them.\">\n          <IconButton size=\"small\">\n            <HelpOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Box>\n      \n      <Divider sx={{ my: 2 }} />\n      \n      {/* Single Main Toggle for Athan */}\n      <FormControlLabel\n        control={\n          <Switch\n            checked={settings.enabled}\n            onChange={handleMainToggle}\n            color=\"primary\"\n          />\n        }\n        label={\n          <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center' }}>\n            Enable Athan\n            {settings.notificationsEnabled && (\n              <Box \n                component=\"span\" \n                sx={{ \n                  ml: 1, \n                  fontSize: '0.75rem', \n                  bgcolor: 'success.main',\n                  color: 'white',\n                  py: 0.25,\n                  px: 1,\n                  borderRadius: 1\n                }}\n              >\n                With Notifications\n              </Box>\n            )}\n          </Box>\n        }\n        sx={{ mb: 2, display: 'block' }}\n      />\n      \n      {settings.enabled && (\n        <Box sx={{ pl: 1 }}>\n          {/* Special Fajr Athan Toggle */}\n          <FormControlLabel\n            control={\n              <Switch\n                checked={settings.specialFajrAthan}\n                onChange={(e) => updateSettings({ specialFajrAthan: e.target.checked })}\n                color=\"primary\"\n              />\n            }\n            label=\"Use Special Fajr Athan\"\n            sx={{ mb: 3, display: 'block' }}\n          />\n          \n          {/* Volume Control */}\n          <Box sx={{ mb: 3 }}>\n            <Typography id=\"athan-volume-slider\" gutterBottom>\n              Athan Volume\n            </Typography>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <VolumeDownIcon sx={{ mr: 1 }} />\n              <Slider\n                value={settings.volume}\n                onChange={handleVolumeChange}\n                aria-labelledby=\"athan-volume-slider\"\n                valueLabelDisplay=\"auto\"\n                step={10}\n                marks\n                min={0}\n                max={100}\n                sx={{ mx: 1 }}\n              />\n              <VolumeUpIcon sx={{ ml: 1 }} />\n            </Box>\n          </Box>\n          \n          {/* Athan Selection */}\n          <FormControl fullWidth sx={{ mb: 3 }}>\n            <FormLabel>Regular Athan Sound</FormLabel>\n            <Select\n              value={getCurrentAthanId()}\n              onChange={handleAthanChange}\n              size=\"small\"\n              sx={{ mt: 1 }}\n            >\n              {availableAthans.map(athan => (\n                <MenuItem key={athan.id} value={athan.id}>\n                  {athan.name}\n                </MenuItem>\n              ))}\n            </Select>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 1 }}>\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={settings.playingAudio && !settings.specialFajrAthan ? <StopIcon /> : <PlayArrowIcon />}\n                onClick={() => handlePlayAthan(false)}\n                sx={{ minWidth: 100 }}\n              >\n                {settings.playingAudio && !settings.specialFajrAthan ? 'Stop' : 'Test'}\n              </Button>\n            </Box>\n          </FormControl>\n          \n          {/* Fajr Athan Selection (if special Fajr enabled) */}\n          {settings.specialFajrAthan && (\n            <FormControl fullWidth sx={{ mb: 3 }}>\n              <FormLabel>Fajr Athan Sound</FormLabel>\n              <Select\n                value={getCurrentFajrAthanId()}\n                onChange={handleFajrAthanChange}\n                size=\"small\"\n                sx={{ mt: 1 }}\n              >\n                {availableFajrAthans.map(athan => (\n                  <MenuItem key={athan.id} value={athan.id}>\n                    {athan.name}\n                  </MenuItem>\n                ))}\n              </Select>\n              <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 1 }}>\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  startIcon={settings.playingAudio && settings.specialFajrAthan ? <StopIcon /> : <PlayArrowIcon />}\n                  onClick={() => handlePlayAthan(true)}\n                  sx={{ minWidth: 100 }}\n                >\n                  {settings.playingAudio && settings.specialFajrAthan ? 'Stop' : 'Test'}\n                </Button>\n              </Box>\n            </FormControl>\n          )}\n          \n          {/* Add Personalized Reminders component */}\n          <PersonalizedReminders />\n          \n          {/* Info Alert */}\n          <Alert severity=\"info\" variant=\"outlined\" sx={{ mt: 2 }}>\n            Athan will play automatically at prayer times even when browsing other pages.\n            {!settings.notificationsEnabled && (\n              <Box sx={{ mt: 1 }}>\n                <Button \n                  size=\"small\" \n                  color=\"info\" \n                  variant=\"contained\" \n                  onClick={async () => {\n                    const result = await requestNotificationPermission();\n                    setMessage(result.message);\n                    setShowSnackbar(true);\n                  }}\n                >\n                  Enable Browser Notifications\n                </Button>\n              </Box>\n            )}\n          </Alert>\n        </Box>\n      )}\n      \n      {/* Notification Message Snackbar */}\n      <Snackbar\n        open={showSnackbar}\n        autoHideDuration={6000}\n        onClose={() => setShowSnackbar(false)}\n        message={message}\n      />\n    </Paper>\n  );\n};\n\nexport default AthanSettings;","import React, { useState, useEffect, useMemo, useRef } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport {\n    Box, Grid, Typography, Container, Alert, Tabs, Tab,\n    Button, Dialog, DialogTitle, DialogContent, DialogActions, CircularProgress,\n    FormControlLabel, Switch, Snackbar\n} from '@mui/material';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport { usePrayerTimes } from '../contexts/PrayerTimesContext';\nimport useGeolocation from '../hooks/useGeolocation';\nimport LocationForm from '../components/prayer-times/LocationForm';\nimport CalculationMethodForm from '../components/prayer-times/CalculationMethodForm';\nimport PrayerTimesDisplay from '../components/prayer-times/PrayerTimesDisplay';\nimport EnhancedPrayerTimesDisplay from '../components/prayer-times/EnhancedPrayerTimesDisplay';\nimport PrayerTimeline from '../components/prayer-times/PrayerTimeline';\nimport AthanPlayer from '../components/prayer-times/AthanPlayer';\nimport AthanSettings from '../components/AthanSettings';\n\nconst PrayerTimesPage = () => {\n    const [displayMode, setDisplayMode] = useState('clocks');\n    const [showLocationDialog, setShowLocationDialog] = useState(false);\n    const [locationRequestInProgress, setLocationRequestInProgress] = useState(false);\n    const [openPermissionInstructions, setOpenPermissionInstructions] = useState(false);\n    const [keepPageActive, setKeepPageActive] = useState(() => {\n        return localStorage.getItem('keepPrayerTimesActive') === 'true';\n    });\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n    const [snackbarMessage, setSnackbarMessage] = useState('');\n    const previousLocationRef = useRef(null);\n    const timerWorkerRef = useRef(null);\n    const serviceWorkerRegistrationRef = useRef(null);\n    const athanAudioRef = useRef(null);\n    const lastWorkerPingRef = useRef(Date.now());\n    const athanSettingsRef = useRef({});\n    const wakeupTimeoutRef = useRef(null);\n    const nextPrayerRef = useRef(null);\n\n    const {\n        prayerTimes,\n        loading: prayerTimesLoading,\n        error: prayerTimesError,\n        params,\n        updateParams,\n        fetchPrayerTimesByCoordinates,\n        fetchPrayerTimesByAddress,\n        locationRequested\n    } = usePrayerTimes();\n\n    const {\n        location,\n        error: locationError,\n        loading: locationLoading,\n        getCurrentPosition,\n        permissionState,\n        DEFAULT_LOCATION\n    } = useGeolocation();\n\n    const isLoading = useMemo(() =>\n        prayerTimesLoading || locationLoading || locationRequestInProgress,\n        [prayerTimesLoading, locationLoading, locationRequestInProgress]\n    );\n\n    useEffect(() => {\n        if ('serviceWorker' in navigator) {\n            navigator.serviceWorker.register('/service-worker.js')\n                .then(registration => {\n                    console.log('Service Worker registered:', registration);\n                    serviceWorkerRegistrationRef.current = registration;\n                    navigator.serviceWorker.addEventListener('message', handleServiceWorkerMessage);\n                })\n                .catch(error => {\n                    console.error('Service Worker registration failed:', error);\n                });\n\n            if ('Notification' in window) {\n                Notification.requestPermission().then(permission => {\n                    if (permission === 'granted') {\n                        console.log('Notification permission granted');\n                    }\n                });\n            }\n        }\n\n        return () => {\n            if (navigator.serviceWorker) {\n                navigator.serviceWorker.removeEventListener('message', handleServiceWorkerMessage);\n            }\n        };\n    }, []);\n\n    const handleServiceWorkerMessage = (event) => {\n        if (event.data && event.data.type === 'PRAYER_NOTIFICATION_CLICK') {\n            console.log('Notification clicked for prayer:', event.data.prayer);\n            if (params.latitude && params.longitude) {\n                fetchPrayerTimesByCoordinates({\n                    latitude: params.latitude,\n                    longitude: params.longitude\n                });\n            }\n            if (athanAudioRef.current && nextPrayerRef.current?.name === event.data.prayer) {\n                playAthan(event.data.prayer);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!locationRequested && permissionState === 'prompt') {\n            setShowLocationDialog(true);\n        }\n    }, [locationRequested, permissionState]);\n\n    useEffect(() => {\n        if (!location || locationRequestInProgress || prayerTimesLoading) {\n            return;\n        }\n\n        const locationString = `${location.latitude},${location.longitude}`;\n\n        if (previousLocationRef.current === locationString) {\n            return;\n        }\n\n        previousLocationRef.current = locationString;\n\n        setLocationRequestInProgress(true);\n\n        updateParams({\n            latitude: location.latitude,\n            longitude: location.longitude,\n            address: location.name || `${location.latitude.toFixed(4)}, ${location.longitude.toFixed(4)}`\n        });\n\n        fetchPrayerTimesByCoordinates({\n            latitude: location.latitude,\n            longitude: location.longitude\n        }).finally(() => {\n            setLocationRequestInProgress(false);\n        });\n    }, [\n        location,\n        fetchPrayerTimesByCoordinates,\n        updateParams,\n        locationRequestInProgress,\n        prayerTimesLoading\n    ]);\n\n    useEffect(() => {\n        if (prayerTimes && prayerTimes.length > 0 && navigator.serviceWorker.controller) {\n            navigator.serviceWorker.controller.postMessage({\n                type: 'PRAYER_TIMES_UPDATE',\n                prayerTimes\n            });\n\n            if (timerWorkerRef.current) {\n                timerWorkerRef.current.postMessage({\n                    command: 'updatePrayerTimes',\n                    prayerTimes\n                });\n            }\n\n            const now = new Date();\n            nextPrayerRef.current = prayerTimes.find(prayer => new Date(prayer.dateTime) > now);\n        }\n    }, [prayerTimes]);\n\n    const handleLocationSubmit = (locationData) => {\n        if (locationRequestInProgress || prayerTimesLoading) return;\n\n        if (locationData.type === 'coordinates') {\n            fetchPrayerTimesByCoordinates({\n                latitude: locationData.data.latitude,\n                longitude: locationData.data.longitude,\n                date: locationData.date\n            });\n        } else {\n            fetchPrayerTimesByAddress(\n                locationData.data.address,\n                { date: locationData.date }\n            );\n        }\n    };\n\n    const handleMethodSubmit = (methodData) => {\n        if (locationRequestInProgress || prayerTimesLoading) return;\n\n        const updatedParams = {\n            ...methodData\n        };\n\n        if (params.latitude && params.longitude) {\n            fetchPrayerTimesByCoordinates({\n                ...updatedParams,\n                latitude: params.latitude,\n                longitude: params.longitude\n            });\n        } else if (params.address) {\n            fetchPrayerTimesByAddress(\n                params.address,\n                updatedParams\n            );\n        }\n    };\n\n    const handleAllowLocation = () => {\n        getCurrentPosition();\n        setShowLocationDialog(false);\n    };\n\n    const handleDenyLocation = () => {\n        updateParams({\n            latitude: DEFAULT_LOCATION.latitude,\n            longitude: DEFAULT_LOCATION.longitude,\n            address: DEFAULT_LOCATION.name\n        });\n\n        fetchPrayerTimesByCoordinates({\n            latitude: DEFAULT_LOCATION.latitude,\n            longitude: DEFAULT_LOCATION.longitude\n        });\n\n        setShowLocationDialog(false);\n    };\n\n    const handleResetLocationPermission = () => {\n        if (navigator.permissions && navigator.permissions.query) {\n            navigator.permissions.query({ name: 'geolocation' }).then(result => {\n                if (result.state === 'denied') {\n                    setOpenPermissionInstructions(true);\n                } else {\n                    getCurrentPosition();\n                }\n            });\n        } else {\n            getCurrentPosition();\n        }\n    };\n\n    const clockViewContent = useMemo(() => (\n        <>\n            <PrayerTimeline />\n            <AthanPlayer ref={athanAudioRef} />\n            <EnhancedPrayerTimesDisplay />\n        </>\n    ), []);\n\n    const tableViewContent = useMemo(() => (\n        <PrayerTimesDisplay\n            prayerTimes={prayerTimes || {}}\n            loading={isLoading}\n        />\n    ), [prayerTimes, isLoading]);\n\n    useEffect(() => {\n        timerWorkerRef.current = new Worker('/timer.worker.js');\n\n        timerWorkerRef.current.onmessage = (event) => {\n            const { type } = event.data;\n\n            if (type === 'prayerUpdate') {\n                nextPrayerRef.current = {\n                    name: event.data.nextPrayer,\n                    minutesRemaining: event.data.minutesRemaining\n                };\n            } \n            else if (type === 'athanTime') {\n                console.log(`It's time for ${event.data.prayer} prayer!`);\n                playAthan(event.data.prayer);\n                showPrayerNotification(event.data.prayer);\n            }\n            else if (type === 'showNotification') {\n                showPrayerNotification(event.data.prayer, event.data.title, event.data.body);\n            }\n            else if (type === 'wakeup') {\n                console.log('Received wakeup signal for prayer:', event.data.prayer);\n                refreshPrayerTimes();\n                scheduleWakeupBeforePrayer(event.data);\n            }\n            else if (type === 'pong') {\n                lastWorkerPingRef.current = Date.now();\n            }\n            else if (type === 'heartbeat') {\n            }\n        };\n\n        const handleAthanSettingsChange = (event) => {\n            if (event.key === 'athanSettings') {\n                try {\n                    const settings = JSON.parse(event.newValue);\n                    athanSettingsRef.current = settings;\n\n                    if (timerWorkerRef.current) {\n                        timerWorkerRef.current.postMessage({\n                            command: 'updateSettings',\n                            athanSettings: settings\n                        });\n                    }\n                } catch (error) {\n                    console.error('Error parsing Athan settings:', error);\n                }\n            }\n        };\n\n        try {\n            const storedSettings = localStorage.getItem('athanSettings');\n            if (storedSettings) {\n                athanSettingsRef.current = JSON.parse(storedSettings);\n            }\n        } catch (error) {\n            console.error('Error loading initial Athan settings:', error);\n        }\n\n        window.addEventListener('storage', handleAthanSettingsChange);\n\n        timerWorkerRef.current.postMessage({ command: 'ping' });\n\n        return () => {\n            if (timerWorkerRef.current) {\n                timerWorkerRef.current.postMessage({ command: 'stop' });\n                timerWorkerRef.current.terminate();\n            }\n\n            if (wakeupTimeoutRef.current) {\n                clearTimeout(wakeupTimeoutRef.current);\n            }\n\n            window.removeEventListener('storage', handleAthanSettingsChange);\n        };\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('keepPrayerTimesActive', keepPageActive);\n\n        if (keepPageActive) {\n            startBackgroundProcessing();\n            setSnackbarMessage('Prayer times will stay active in the background');\n            setSnackbarOpen(true);\n        } else {\n            stopBackgroundProcessing();\n        }\n    }, [keepPageActive]);\n\n    useEffect(() => {\n        const handleVisibilityChange = () => {\n            if (document.visibilityState === 'visible') {\n                console.log('Page is now visible');\n                if (keepPageActive && timerWorkerRef.current) {\n                    checkWorkerStatus();\n                    refreshPrayerTimes();\n                }\n            } else {\n                console.log('Page is now hidden');\n                if (keepPageActive) {\n                }\n            }\n        };\n\n        document.addEventListener('visibilitychange', handleVisibilityChange);\n\n        return () => {\n            document.removeEventListener('visibilitychange', handleVisibilityChange);\n        };\n    }, [keepPageActive]);\n\n    const startBackgroundProcessing = () => {\n        if (timerWorkerRef.current) {\n            timerWorkerRef.current.postMessage({\n                command: 'start',\n                interval: 1000,\n                prayerTimes,\n                athanSettings: athanSettingsRef.current\n            });\n\n            monitorWorkerHealth();\n        }\n\n        requestNotificationPermission();\n    };\n\n    const stopBackgroundProcessing = () => {\n        if (timerWorkerRef.current) {\n            timerWorkerRef.current.postMessage({ command: 'stop' });\n        }\n    };\n\n    const requestNotificationPermission = () => {\n        if ('Notification' in window && Notification.permission !== 'granted') {\n            Notification.requestPermission().then(permission => {\n                if (permission === 'granted') {\n                    console.log('Notification permission granted');\n                    setSnackbarMessage('Notifications enabled for prayer times');\n                    setSnackbarOpen(true);\n                } else {\n                    console.log('Notification permission denied');\n                    setSnackbarMessage('Please enable notifications for prayer time alerts');\n                    setSnackbarOpen(true);\n                }\n            });\n        }\n    };\n\n    const playAthan = (prayerName) => {\n        if (athanAudioRef.current && athanAudioRef.current.playAthan) {\n            // Only play Fajar Athan sound for Fajr, otherwise play default/user-selected\n            if (prayerName === 'Fajr') {\n                athanAudioRef.current.playAthan('Fajr');\n            } else {\n                athanAudioRef.current.playAthan('default');\n            }\n            return true;\n        }\n\n        try {\n            let audio;\n            const athanSettings = athanSettingsRef.current;\n            if (prayerName === 'Fajr') {\n                // Always play Fajr Athan sound for Fajr\n                audio = new Audio('/audio/athan/Fajr.mp3');\n            } else if (athanSettings && athanSettings.athanSound) {\n                audio = new Audio(`/audio/athan/${athanSettings.athanSound}.mp3`);\n            } else {\n                audio = new Audio('/audio/athan/default.mp3');\n            }\n\n            audio.onerror = (error) => {\n                console.error('Error playing Athan audio:', error);\n                if (audio.src !== '/audio/athan/default.mp3') {\n                    audio.src = '/audio/athan/default.mp3';\n                    audio.play().catch(e => console.error('Failed to play fallback Athan:', e));\n                }\n            };\n\n            audio.play()\n                .then(() => {\n                    console.log(`Playing Athan for ${prayerName} prayer`);\n                    return true;\n                })\n                .catch(error => {\n                    console.error('Failed to play Athan:', error);\n                    return false;\n                });\n        } catch (error) {\n            console.error('Error setting up Athan audio:', error);\n            return false;\n        }\n    };\n\n    const showPrayerNotification = (prayerName, title, body) => {\n        if (!('Notification' in window) || Notification.permission !== 'granted') {\n            return;\n        }\n\n        const notificationTitle = title || `Time for ${prayerName} Prayer`;\n        const notificationBody = body || `It's time to pray ${prayerName}`;\n\n        if (serviceWorkerRegistrationRef.current) {\n            serviceWorkerRegistrationRef.current.showNotification(notificationTitle, {\n                body: notificationBody,\n                icon: '/favicon.svg',\n                badge: '/favicon.svg',\n                tag: 'prayer-time',\n                renotify: true,\n                vibrate: [200, 100, 200],\n                data: {\n                    url: '/',\n                    prayer: prayerName\n                }\n            }).catch(error => {\n                console.error('Error showing notification through service worker:', error);\n                new Notification(notificationTitle, {\n                    body: notificationBody,\n                    icon: '/favicon.svg'\n                });\n            });\n        } else {\n            new Notification(notificationTitle, {\n                body: notificationBody,\n                icon: '/favicon.svg'\n            });\n        }\n    };\n\n    const scheduleWakeupBeforePrayer = (prayerData) => {\n        if (wakeupTimeoutRef.current) {\n            clearTimeout(wakeupTimeoutRef.current);\n        }\n\n        const prayerTime = new Date(prayerData.dateTime);\n        const now = new Date();\n        const timeUntilPrayer = prayerTime - now;\n\n        if (timeUntilPrayer > 0 && timeUntilPrayer < 10 * 60 * 1000) {\n            console.log(`Scheduling wakeup for ${prayerData.prayer} in ${Math.floor(timeUntilPrayer/1000)} seconds`);\n\n            const wakeupDelay = Math.max(0, timeUntilPrayer - 10000);\n\n            wakeupTimeoutRef.current = setTimeout(() => {\n                refreshPrayerTimes();\n                playAthan(prayerData.prayer);\n            }, wakeupDelay);\n        }\n    };\n\n    const monitorWorkerHealth = () => {\n        const checkInterval = setInterval(() => {\n            if (!keepPageActive) {\n                clearInterval(checkInterval);\n                return;\n            }\n\n            checkWorkerStatus();\n        }, 60000);\n\n        return () => clearInterval(checkInterval);\n    };\n\n    const checkWorkerStatus = () => {\n        if (!timerWorkerRef.current) {\n            return;\n        }\n\n        timerWorkerRef.current.postMessage({ command: 'ping' });\n\n        setTimeout(() => {\n            const now = Date.now();\n            if (now - lastWorkerPingRef.current > 2 * 60 * 1000) {\n                console.warn('Worker seems unresponsive, restarting...');\n                if (timerWorkerRef.current) {\n                    timerWorkerRef.current.terminate();\n                }\n\n                timerWorkerRef.current = new Worker('/timer.worker.js');\n                startBackgroundProcessing();\n            }\n        }, 5000);\n    };\n\n    const refreshPrayerTimes = () => {\n        if (!params.latitude || !params.longitude || prayerTimesLoading) {\n            return;\n        }\n\n        console.log('Refreshing prayer times');\n        fetchPrayerTimesByCoordinates({\n            latitude: params.latitude,\n            longitude: params.longitude\n        });\n\n        localStorage.setItem('lastPrayerTimesRefresh', new Date().toISOString());\n    };\n\n    return (\n        <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n            <Helmet>\n                <title>Accurate Prayer Times - iMuslim Life</title>\n                <meta name=\"description\" content=\"Get accurate Islamic prayer times (Salat) for any location worldwide. Supports multiple calculation methods, Asr juristic methods, and high latitude adjustments.\" />\n                <meta name=\"keywords\" content=\"prayer times, salat times, islamic prayer times, muslim prayer, fajr, dhuhr, asr, maghrib, isha, calculation methods\" />\n                <meta property=\"og:title\" content=\"Accurate Prayer Times - iMuslim Life\" />\n                <meta property=\"og:description\" content=\"Get accurate Islamic prayer times (Salat) for any location worldwide. Supports multiple calculation methods and adjustments.\" />\n                <link rel=\"canonical\" href=\"https://imuslimlife.com/#/prayer-times\" />\n            </Helmet>\n            <Box sx={{ py: 4 }}>\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ color: 'primary.main' }}>\n                    Prayer Times\n                </Typography>\n\n                {prayerTimesError && (\n                    <Alert severity=\"error\" sx={{ mb: 3 }}>\n                        {prayerTimesError}\n                    </Alert>\n                )}\n\n                {locationError && !location && (\n                    <Alert \n                        severity=\"info\" \n                        sx={{ mb: 3 }}\n                        action={\n                            <Button \n                                color=\"inherit\" \n                                size=\"small\"\n                                onClick={handleResetLocationPermission}\n                            >\n                                Enable Location\n                            </Button>\n                        }\n                    >\n                        Using default location (Orlando, FL). For the most accurate prayer times, please enable location access.\n                    </Alert>\n                )}\n\n                <Grid container spacing={4}>\n                    <Grid item xs={12} md={4}>\n                        <LocationForm onSubmit={handleLocationSubmit} />\n\n                        <Box sx={{ mt: 3 }}>\n                            <CalculationMethodForm onSubmit={handleMethodSubmit} />\n                        </Box>\n                    </Grid>\n\n                    <Grid item xs={12} md={8}>\n                        <Tabs\n                            value={displayMode}\n                            onChange={(e, newValue) => setDisplayMode(newValue)}\n                            sx={{ mb: 3 }}\n                        >\n                            <Tab value=\"clocks\" label=\"Clock View\" />\n                            <Tab value=\"table\" label=\"Table View\" />\n                        </Tabs>\n\n                        {isLoading && !prayerTimes ? (\n                            <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n                                <CircularProgress />\n                                <Typography variant=\"body1\" sx={{ ml: 2 }}>\n                                    {locationLoading ? 'Getting your location...' : 'Loading prayer times...'}\n                                </Typography>\n                            </Box>\n                        ) : (\n                            displayMode === 'clocks' ? clockViewContent : tableViewContent\n                        )}\n                    </Grid>\n                </Grid>\n            </Box>\n\n            <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={keepPageActive}\n                            onChange={(e) => setKeepPageActive(e.target.checked)}\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Keep prayer times active in background\"\n                />\n            </Box>\n\n            <AthanSettings />\n\n            <Dialog\n                open={showLocationDialog}\n                onClose={handleDenyLocation}\n                disableEscapeKeyDown\n            >\n                <DialogTitle>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <LocationOnIcon sx={{ mr: 1, color: 'primary.main' }} />\n                        Allow Location Access\n                    </Box>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography paragraph>\n                        Salat-e-Mustaqeem needs your location to provide accurate prayer times for where you are.\n                    </Typography>\n                    <Typography paragraph>\n                        When prompted by your browser, please click \"Allow\" to share your location.\n                    </Typography>\n                    <Typography paragraph sx={{ fontStyle: 'italic', color: 'text.secondary' }}>\n                        If you don't allow location access, we'll use Orlando, Florida as the default location.\n                        You can always manually enter your location.\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDenyLocation}>\n                        Use Default Location\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleAllowLocation}\n                        startIcon={<LocationOnIcon />}\n                    >\n                        Allow Location Access\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={openPermissionInstructions}\n                onClose={() => setOpenPermissionInstructions(false)}\n            >\n                <DialogTitle>Enable Location Access</DialogTitle>\n                <DialogContent>\n                    <Typography paragraph>\n                        You previously denied location access. To enable it:\n                    </Typography>\n                    \n                    <Typography component=\"div\" paragraph>\n                        <ol>\n                            <li>Click on the lock/info icon in your browser's address bar</li>\n                            <li>Find \"Location\" or \"Site settings\"</li>\n                            <li>Change from \"Block\" to \"Allow\"</li>\n                            <li>Refresh this page</li>\n                        </ol>\n                    </Typography>\n                    \n                    <Typography paragraph sx={{ fontStyle: 'italic' }}>\n                        Instructions may vary depending on your browser.\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setOpenPermissionInstructions(false)}>\n                        OK, Got It\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            \n            <Snackbar\n                open={snackbarOpen}\n                autoHideDuration={6000}\n                onClose={() => setSnackbarOpen(false)}\n                message={snackbarMessage}\n            />\n        </Container>\n    );\n};\n\nexport default PrayerTimesPage;","import { useState, useEffect, useCallback, useRef } from 'react';\n\n// Orlando coordinates as fallback\nconst DEFAULT_LOCATION = {\n    latitude: 28.5383,\n    longitude: -81.3792,\n    name: 'Orlando, FL (Default)'  // Make it obvious this is a default\n};\n\n/**\n * Hook for getting the user's geolocation\n */\nconst useGeolocation = (options = {}) => {\n    const [location, setLocation] = useState(null);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [permissionState, setPermissionState] = useState('prompt');\n\n    // Prevent multiple simultaneous requests\n    const requestInProgressRef = useRef(false);\n\n    // Track if location has been requested by user\n    const [userRequested, setUserRequested] = useState(false);\n\n    // Handle successful location\n    const handleSuccess = useCallback((position) => {\n        setLoading(false);\n        setError(null);\n        requestInProgressRef.current = false;\n\n        setLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n            accuracy: position.coords.accuracy,\n            timestamp: position.timestamp\n        });\n\n        setPermissionState('granted');\n    }, []);\n\n    // Handle location error\n    const handleError = useCallback((error) => {\n        setLoading(false);\n        requestInProgressRef.current = false;\n        setError(error.message);\n\n        if (error.code === error.PERMISSION_DENIED) {\n            setPermissionState('denied');\n        }\n\n        console.log('Geolocation error:', error, 'Using default location');\n\n        // Use default location\n        setLocation(DEFAULT_LOCATION);\n    }, []);\n\n    // Function to request current position\n    const getCurrentPosition = useCallback(() => {\n        // Prevent multiple simultaneous requests\n        if (requestInProgressRef.current) {\n            console.log('Location request already in progress');\n            return;\n        }\n\n        setUserRequested(true);\n\n        if (!navigator.geolocation) {\n            setError('Geolocation is not supported by your browser');\n            setLocation(DEFAULT_LOCATION);\n            return;\n        }\n\n        setLoading(true);\n        requestInProgressRef.current = true;\n\n        navigator.geolocation.getCurrentPosition(\n            handleSuccess,\n            handleError,\n            options\n        );\n    }, [handleError, handleSuccess, options]);\n\n    // Check permission state on mount - only once\n    useEffect(() => {\n        if (navigator.permissions) {\n            navigator.permissions.query({ name: 'geolocation' }).then(result => {\n                setPermissionState(result.state);\n\n                // Set up permission change listener\n                result.addEventListener('change', () => {\n                    setPermissionState(result.state);\n                });\n            });\n        }\n    }, []);\n\n    // Try to get location on initial render if allowed\n    useEffect(() => {\n        // Don't automatically request if previously denied\n        if (permissionState === 'granted' && !location && !userRequested) {\n            getCurrentPosition();\n        } else if (permissionState === 'denied' && !location) {\n            // Use default if permission denied\n            setLocation(DEFAULT_LOCATION);\n        }\n    }, [permissionState, location, getCurrentPosition, userRequested]);\n\n    return {\n        location,\n        error,\n        loading,\n        getCurrentPosition,\n        permissionState,\n        DEFAULT_LOCATION\n    };\n};\n\nexport default useGeolocation;"],"names":["formatTime12Hour","time","hours","minutes","split","map","Number","period","displayHours","String","padStart","_ref","onSubmit","locationType","setLocationType","useState","latitude","setLatitude","DEFAULT_LOCATION","toString","longitude","setLongitude","address","setAddress","selectedDate","setSelectedDate","Date","dateString","setDateString","format","error","setError","expanded","setExpanded","location","loading","geoLoading","geoError","getCurrentPosition","useGeolocation","params","updateParams","usePrayerTimes","useEffect","toFixed","_jsxs","Card","elevation","children","_jsx","CardHeader","title","Box","sx","display","alignItems","LocationOnIcon","mr","color","Typography","variant","component","Button","size","onClick","toggleExpanded","ml","endIcon","ExpandMoreIcon","transform","transition","bgcolor","borderBottom","borderColor","Collapse","in","CardContent","event","preventDefault","lat","parseFloat","lng","isNaN","Error","type","data","date","trim","err","message","FormControl","mb","width","FormLabel","RadioGroup","row","name","value","onChange","target","FormControlLabel","control","Radio","label","Alert","severity","gap","TextField","e","inputProps","step","fullWidth","required","helperText","InputLabelProps","shrink","placeholder","startIcon","CircularProgress","MyLocationIcon","handleUseMyLocation","disabled","InputProps","startAdornment","InputAdornment","position","SearchIcon","newDateStr","dateObj","getTime","margin","CalendarMonthIcon","mt","formData","setFormData","method","school","latitudeAdjustmentMethod","midnightMode","convertLatitudeMethodToNumeric","methodString","methodMap","undefined","convertMidnightModeToNumeric","modeString","modeMap","handleChange","gutterBottom","submissionData","methodNumeric","modeNumeric","Grid","container","spacing","item","xs","InputLabel","id","Select","labelId","CALCULATION_METHODS","MenuItem","sm","JURISTIC_METHODS","PrayerTimesDisplay","memo","prayerTimes","hijriDate","Object","keys","length","justifyContent","my","filteredPrayers","entries","filter","_ref2","key","includes","locationText","dateText","day","month","en","year","formatIslamicDate","calculationMethod","methodId","find","m","getMethodName","juristicMethod","juristicId","getJuristicName","latitudeMethodText","midnightModeText","methodValue","methods","replace","formatLatitudeMethod","modeValue","formatMidnightMode","console","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","_ref3","prayer","scope","timezone","displayName","prayerTime","remaining","progress","prayerName","cityName","islamicDate","isCompact","isNearPrayer","clockSize","theme","useTheme","canvasRef","useRef","currentTime","setCurrentTime","fadeIn","setFadeIn","rotation","setRotation","scale","setScale","animationRef","fadeTimer","setTimeout","direction","currentScale","animatePulse","current","requestAnimationFrame","timer","setInterval","clearTimeout","clearInterval","cancelAnimationFrame","canvas","ctx","getContext","timeToShow","dpr","window","devicePixelRatio","height","style","clearRect","drawClock","palette","primary","main","divider","drawProgressRing","bgColor","center","x","y","radius","mainLineWidth","hourLineWidth","minuteLineWidth","secondLineWidth","beginPath","arc","Math","PI","strokeStyle","lineWidth","stroke","i","angle","isMainMarker","markerLength","outerX","cos","outerY","sin","innerX","innerY","moveTo","lineTo","getHours","getMinutes","hourAngle","minuteAngle","secondAngle","getSeconds","lineCap","shadowColor","shadowBlur","fillStyle","fill","strokeWidth","gradient","createLinearGradient","addColorStop","renderTimeBox","fontSize","min","max","padding","borderRadius","backgroundColor","text","fontWeight","lineHeight","opacity","ref","top","left","textAlign","maxWidth","_Fragment","secondary","mx","floor","targetTime","subtitle","description","timeLeft","setTimeLeft","calculateTimeLeft","isMobile","useMediaQuery","breakpoints","down","isMedium","animationFrameRef","difference","seconds","total","remainingSeconds","drawCountdownClock","padDigit","num","md","p","fontFamily","letterSpacing","EnhancedPrayerTimesDisplay","fetchPrayerTimesByCoordinates","nextPrayer","setNextPrayer","remainingTime","setRemainingTime","setProgress","calculationState","setCalculationState","log","mainPrayers","Fajr","Dhuhr","Asr","Maghrib","Isha","now","currentHour","currentMinute","currentTotalMinutes","nextPrayerInfo","previousPrayerInfo","prayerHour","prayerMinute","prayerTotalMinutes","isAfterCurrent","totalMinutes","dateTime","getFullYear","getMonth","getDate","prayerOrder","nextPrayerBaseName","nextIndex","indexOf","prevIndex","prevPrayerName","prevPrayer","prevHour","prevMinute","alternatePrayer","altHour","altMinute","fajr","fajrHour","fajrMinute","tomorrow","setDate","setHours","ishaHour","ishaMinute","msUntilNextPrayer","totalInterval","elapsed","calculatedProgress","hour","minute","fajrTime","verticalAlign","formattedIslamicDate","locationName","validPrayers","icon","Sunrise","CountdownClock","PrayerClock","Divider","isObligatory","prayerDateTime","isPassed","isNext","border","boxShadow","overflow","boxSizing","pb","flexDirection","PrayerTimeline","timelineData","setTimelineData","activePrayerIndex","setActivePrayerIndex","dayProgress","setDayProgress","timeOrder","isPrayer","WbTwilightIcon","LightModeIcon","AccessTimeIcon","NightlightIcon","timeline","forEach","parseInt","push","formattedTime","sortedTimeline","sort","a","b","dayStart","dayEnd","totalMillis","elapsedMillis","activeIndex","background","default","motion","div","initial","animate","stiffness","damping","paper","zIndex","duration","repeat","Infinity","ease","timePoint","index","percentage","isActive","timePointColor","getTimePointColor","isPast","success","warning","info","isLabelOnTop","finalPosition","React","minWidth","whiteSpace","bottom","px","py","toLocaleTimeString","flexWrap","ATHAN_OPTIONS","url","DEFAULT_SETTINGS","athanEnabled","selectedAthan","volume","notificationsEnabled","selectedPrayers","preAthanNotification","AthanPlayer","settings","setSettings","savedSettings","localStorage","getItem","JSON","parse","isPlaying","setIsPlaying","isLoading","setIsLoading","audioError","setAudioError","currentPrayer","setCurrentPrayer","timeUntilNextPrayer","setTimeUntilNextPrayer","showNotification","setShowNotification","notificationMessage","setNotificationMessage","simulationActive","setSimulationActive","simulationTimeRemaining","setSimulationTimeRemaining","notificationComponent","setNotificationComponent","audioRef","checkTimerRef","notificationTimerRef","simulationTimerRef","simulationEndTimeRef","lastVisibilityChange","notificationPermission","setNotificationPermission","Notification","permission","timerWorker","setTimerWorker","checkIncognitoMode","Promise","resolve","db","indexedDB","open","onerror","onsuccess","requestNotificationPermission","async","alert","requestPermission","prev","handleVisibilityChange","document","visibilityState","AudioContext","tempContext","state","resume","then","sessionStorage","completionTime","timeSinceCompletion","removeItem","CustomNotification","Stack","playAthan","round","diff","DateTime","as","showBrowserNotification","updatePrayerTimes","Audio","addEventListener","errorMessage","code","MediaError","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","navigator","mediaSession","metadata","MediaMetadata","artist","album","artwork","src","sizes","preload","autoplay","unlockAudio","removeEventListener","webkitAudioContext","serviceWorker","register","registration","catch","pause","selectedOption","option","setItem","stringify","prayerTimes24h","prayerDate","next","sortedPrayers","firstPrayer","tomorrowTime","timeUntil","minutesUntilNext","timeUntilNotification","values","timerId","playedAthanKey","toISOString","alreadyPlayed","differenceInSeconds","worker","Worker","onmessage","handleTimerCompletion","terminate","tryFallbackAudio","fallbackAudio","play","isFromTimer","arguments","athanId","audioContext","load","retryCount","maxRetries","attemptPlay","emptySource","createBufferSource","start","stop","setActionHandler","notificationAudio","createMediaElementSource","connect","destination","body","tag","requireInteraction","onclick","focus","pauseAthan","notification","close","ManualPlayComponent","ErrorPlayComponent","formatTimeRemaining","totalSeconds","noWrap","textOverflow","renderAudioStatus","_ATHAN_OPTIONS$find","o","Switch","checked","toggleAthanEnabled","PauseIcon","PlayArrowIcon","testAthan","Tooltip","IconButton","currentPermission","isIncognito","NotificationsIcon","NotificationsOffIcon","action","browserInfo","detectBrowser","userAgent","VolumeOffIcon","VolumeDownIcon","VolumeUpIcon","Slider","handleVolumeChange","newValue","valueLabelDisplay","FormHelperText","FormGroup","Checkbox","togglePrayerSelection","process","Link","href","rel","Snackbar","autoHideDuration","onClose","PersonalizedReminders","updateSettings","useContext","AthanSettingsContext","prayers","defaultMinutes","minMinutes","maxMinutes","getReminderTime","_settings$customRemin","_prayers$find","customReminderTimes","Accordion","AccordionSummary","expandIcon","customRemindersEnabled","AccordionDetails","_","handleReminderTimeChange","marks","AthanSettings","stopAthan","availableAthans","availableFajrAthans","setMessage","showSnackbar","setShowSnackbar","handlePlayAthan","isFajr","playingAudio","HelpOutlineIcon","enabled","result","pl","specialFajrAthan","getCurrentAthanId","athan","athanPath","StopIcon","getCurrentFajrAthanId","fajrAthanPath","PrayerTimesPage","displayMode","setDisplayMode","showLocationDialog","setShowLocationDialog","locationRequestInProgress","setLocationRequestInProgress","openPermissionInstructions","setOpenPermissionInstructions","keepPageActive","setKeepPageActive","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","previousLocationRef","timerWorkerRef","serviceWorkerRegistrationRef","athanAudioRef","lastWorkerPingRef","athanSettingsRef","wakeupTimeoutRef","nextPrayerRef","prayerTimesLoading","prayerTimesError","fetchPrayerTimesByAddress","locationRequested","locationError","locationLoading","permissionState","useMemo","handleServiceWorkerMessage","_nextPrayerRef$curren","locationString","finally","controller","postMessage","command","handleDenyLocation","clockViewContent","tableViewContent","minutesRemaining","showPrayerNotification","refreshPrayerTimes","scheduleWakeupBeforePrayer","handleAthanSettingsChange","athanSettings","storedSettings","startBackgroundProcessing","stopBackgroundProcessing","checkWorkerStatus","interval","monitorWorkerHealth","audio","athanSound","notificationTitle","notificationBody","badge","renotify","vibrate","prayerData","timeUntilPrayer","wakeupDelay","checkInterval","warn","Container","Helmet","content","property","handleResetLocationPermission","permissions","query","LocationForm","locationData","CalculationMethodForm","methodData","updatedParams","Tabs","Tab","Dialog","disableEscapeKeyDown","DialogTitle","DialogContent","paragraph","fontStyle","DialogActions","handleAllowLocation","options","setLocation","setLoading","setPermissionState","requestInProgressRef","userRequested","setUserRequested","handleSuccess","useCallback","coords","accuracy","timestamp","handleError","PERMISSION_DENIED","geolocation"],"sourceRoot":""}