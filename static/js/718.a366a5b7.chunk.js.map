{"version":3,"file":"static/js/718.a366a5b7.chunk.js","mappings":"8ZAqBA,MACMA,EAAqB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAwThE,EAnTsBC,KACnB,MAAMC,GAAQC,EAAAA,EAAAA,MACR,UAAEC,EAAS,mBAAEC,IAAuBC,EAAAA,EAAAA,OAEnCC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,OAC1CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,OACxCG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,KAC1CK,EAAeC,IAAoBN,EAAAA,EAAAA,UAAS,KAC5CO,EAAYC,IAAiBR,EAAAA,EAAAA,UAAS,OAG7CS,EAAAA,EAAAA,YAAU,KACHd,IACDI,EAAgBJ,EAAUe,MAAMC,QAChCT,EAAeP,EAAUiB,MACzBJ,EAAcb,GACdkB,EAAiBlB,EAAUe,MAAMC,OAAQhB,EAAUiB,MACnDE,EAAkBnB,EAAUiB,MAC/B,GACA,CAACjB,IAGJ,MAAMkB,EAAmBA,CAACH,EAAOE,KAC9B,IAEG,MAAMG,EAA4BA,CAACC,EAAGC,KAGnC,MAAMC,EAAa,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAIC,SAASF,EAAI,IAC1E,OAAID,EAAI,IAAM,GACJ,KAANA,GAAYE,EADQ,GAEjB,EAAE,EAINE,EAAgC,OAAlBxB,QAAkB,IAAlBA,GAAAA,EAAoByB,iBACrCzB,EAAmByB,iBAAiBX,EAAOE,GAAMQ,YACjDL,EAA0BL,EAAOE,GAG9BU,GAAmBZ,EAAQE,GAAQ,EAEnCW,EAAO,GACb,IAAIC,EAAa,EAGjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACzB,MAAMC,EAAO,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACT,IAANF,GAAWE,EAAIL,GAAoBE,EAAaJ,EAElDM,EAAKE,KAAK,OAEVF,EAAKE,KAAK,CACPC,IAAKL,EACLM,QAASA,EAAQN,EAAYd,EAAOE,GACpCmB,OAAQC,EAAgBR,EAAYd,EAAOE,KAE9CY,KAMN,GAHAD,EAAKK,KAAKF,GAGNF,EAAaJ,EAAa,KACjC,CAEAhB,EAAgBmB,EACnB,CAAE,MAAOU,GACNC,QAAQD,MAAM,qCAAsCA,EACvD,GAIGnB,EAAqBF,IACxB,IAaGN,EAZe,CACZ,CAAE6B,KAAM,mBAAoBzB,MAAO,EAAGmB,IAAK,GAC3C,CAAEM,KAAM,gBAAiBzB,MAAO,EAAGmB,IAAK,IACxC,CAAEM,KAAM,iBAAkBzB,MAAO,EAAGmB,IAAK,IACzC,CAAEM,KAAM,kBAAmBzB,MAAO,EAAGmB,IAAK,IAC1C,CAAEM,KAAM,oBAAsBzB,MAAO,EAAGmB,IAAK,IAC7C,CAAEM,KAAM,mBAAoBzB,MAAO,EAAGmB,IAAK,GAC3C,CAAEM,KAAM,iBAAkBzB,MAAO,EAAGmB,IAAK,IACzC,CAAEM,KAAM,cAAezB,MAAO,GAAImB,IAAK,GACvC,CAAEM,KAAM,gBAAiBzB,MAAO,GAAImB,IAAK,GACzC,CAAEM,KAAM,cAAezB,MAAO,GAAImB,IAAK,KAG7C,CAAE,MAAOI,GACNC,QAAQD,MAAM,gCAAiCA,EAClD,GAIGH,EAAUA,CAACD,EAAKnB,EAAOE,IACnBjB,GACJA,EAAUkC,MAAQA,GAClBlC,EAAUe,MAAMC,SAAWD,GAC3Bf,EAAUiB,OAASwB,SAASxB,GAI5BoB,EAAkBA,CAACH,EAAKnB,EAAOE,IAC3BP,EAAcgC,QAAOC,GACzBA,EAAMT,MAAQA,GAAOS,EAAM5B,QAAUA,IAmCrC6B,EAAqBC,GACL,CAChB,WAAY,QAAS,gBAAiB,gBACtC,kBAAmB,kBAAmB,QAAS,SAC/C,UAAW,UAAW,eAAgB,iBAGvBA,EAAc,GAInC,OAAK7C,GAAcG,GAAiBG,GAgBjCwC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,CAAEC,GAAI,EAAGC,aAAc,EAAGC,UAAW,GAAIC,UAChDC,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAAF,SAAA,EACTN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAACT,GAAI,CAAEU,MAAO,eAAgBC,WAAY,UAAWP,SAAC,sBAK3FC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEC,GAAI,EAAGY,UAAW,UAAWT,SAAA,EACrCC,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAACT,GAAI,CAAEU,MAAO5D,EAAMgE,QAAQC,UAAUC,KAAML,WAAY,QAASP,SAAA,CAClGxC,EAAWsB,IAAI,IAAEtB,EAAWG,MAAMkD,GAAG,IAAErD,EAAWK,KAAK,UAE3DoC,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,QAAQE,MAAM,iBAAgBN,SAAA,CAAC,qBAC9B,IAAIc,MAAOC,mBAAmB,QAAS,CACtDC,QAAS,OACTnD,KAAM,UACNF,MAAO,OACPmB,IAAK,mBAKdY,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACrB,GAAI,CAAEC,GAAI,MAGnBI,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEsB,QAAS,OAAQC,WAAY,SAAUC,eAAgB,gBAAiBvB,GAAI,GAAIG,SAAA,EACxFN,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CAACC,QAlFEC,KACvB,IAAIC,EAAWzE,EAAe,EAC1B0E,EAAUvE,EAEVsE,EAAW,IACZA,EAAW,GACXC,KAGHzE,EAAgBwE,GAChBrE,EAAesE,GACf3D,EAAiB0D,EAAUC,EAAQ,EAuEazB,UACpCN,EAAAA,EAAAA,KAACgC,EAAAA,EAAe,OAGnBzB,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAA,CACpBR,EAAkBzC,GAAc,IAAEG,EAAY,UAGlDwC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CAACC,QA3EFK,KACnB,IAAIH,EAAWzE,EAAe,EAC1B0E,EAAUvE,EAEVsE,EAAW,KACZA,EAAW,EACXC,KAGHzE,EAAgBwE,GAChBrE,EAAesE,GACf3D,EAAiB0D,EAAUC,EAAQ,EAgESzB,UAChCN,EAAAA,EAAAA,KAACkC,EAAAA,EAAgB,UAKvBlC,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACZ,GAAI,CAAEC,GAAI,GAAIG,UAChBC,EAAAA,EAAAA,MAAC4B,EAAAA,GAAI,CAACC,WAAS,EAAA9B,SAAA,CAEXxD,EAAmBuF,KAAI,CAACjD,EAAKkD,KAC3BtC,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CACFI,MAAI,EAEJC,GAAI,GAAK,EACTtC,GAAI,CACDuC,GAAI,EACJ1B,UAAW,SACXF,WAAY,SACZ6B,QAAmB,IAAVJ,EAAc,yBAA2B,eACnDhC,UAEFN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAQR,GAAI,CAAEW,WAAsB,IAAVyB,EAAc,OAAS,WAAYhC,SAC7ElB,KAVCA,KAgBV1B,EAAa2E,KAAI,CAACpD,EAAM0D,KACtB3C,EAAAA,EAAAA,KAAC4C,EAAAA,SAAc,CAAAtC,SACXrB,EAAKoD,KAAI,CAACjD,EAAKyD,KACb7C,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CACFI,MAAI,EACJC,GAAI,GAAK,EAETtC,GAAI,CACD4C,OAAQ,GACRC,EAAG,GACHC,OAAQ,YACRC,YAAa,WACd3C,SAEDlB,IACEmB,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CACDZ,GAAI,CACD4C,OAAQ,OACRC,EAAG,GACH3C,aAAc,EACdsC,QAAStD,EAAIC,QAAUrC,EAAMgE,QAAQkC,QAAQhC,KAAO,cACpDN,MAAOxB,EAAIC,QAAU,QAAU,UAC/B8D,SAAU,WACV3B,QAAS,OACT4B,cAAe,SACf3B,WAAY,UACbnB,SAAA,EAEFN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAOJ,SAAElB,EAAIA,MAChCA,EAAIE,QAAUF,EAAIE,OAAO+D,OAAS,IAChCrD,EAAAA,EAAAA,KAACsD,EAAAA,EAAO,CAACC,MAAOnE,EAAIE,OAAO+C,KAAImB,GAAKA,EAAE9D,OAAM+D,KAAK,MAAMnD,UACpDN,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CACDZ,GAAI,CACDwD,MAAO,MACPZ,OAAQ,EACR1C,aAAc,EACdsC,QAAStD,EAAIC,QAAU,wBAA0BrC,EAAMgE,QAAQC,UAAUC,KACzEyC,GAAI,gBA/BjB,OAAOhB,KAAaE,QALb,QAAQF,aAkDtC3C,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACrB,GAAI,CAAEC,GAAI,MAGnBH,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,YAAYC,cAAY,EAACT,GAAI,CAAEW,WAAY,UAAWP,SAAC,6BAI3EN,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACZ,GAAI,CAAEC,GAAI,GAAIG,UAChBN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACC,WAAS,EAACwB,QAAS,EAAEtD,SACvB1C,EAAcyE,KAAKxC,IACjBG,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAAAjC,UACPN,EAAAA,EAAAA,KAAC6D,EAAAA,EAAI,CACFC,MAAM9D,EAAAA,EAAAA,KAAC+D,EAAAA,EAAS,IAChBC,MAAO,GAAGnE,EAAMH,SAASG,EAAMT,OAAOU,EAAkBD,EAAM5B,UAC9D2C,MAAOf,EAAM5B,QAAUZ,EAAe,UAAY,UAClDqD,QAASb,EAAM5B,QAAUZ,EAAe,SAAW,WACnD4G,KAAK,QACL/D,GAAI,CAAEC,GAAI,MAPA,GAAGN,EAAM5B,SAAS4B,EAAMT,OAAOS,EAAMH,oBAxIjEM,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,CAAEC,GAAI,EAAGC,aAAc,EAAGC,UAAW,GAAIC,UAChDC,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAAF,SAAA,EACTN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAACT,GAAI,CAAEU,MAAO,gBAAiBN,SAAC,sBAGrEN,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACZ,GAAI,CAAE6C,EAAG,EAAGhC,UAAW,UAAWT,UACpCN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAAAH,SAAC,oCAgJjB,E,6FC5Sb,MA2iBA,EA3iBqB4D,KAAO,IAADC,EAAAC,EAAAC,EACvB,MAAOC,EAASC,IAAchH,EAAAA,EAAAA,WAAS,IAChCiC,EAAOgF,IAAYjH,EAAAA,EAAAA,UAAS,OAC5BkH,EAAUC,IAAenH,EAAAA,EAAAA,UAAS,OAClCU,EAAO0G,IAAYpH,EAAAA,EAAAA,WAAS,IAAI6D,MAAOwD,WAAa,IACpDzG,EAAM0G,IAAWtH,EAAAA,EAAAA,WAAS,IAAI6D,MAAO0D,gBACrCC,EAAUC,IAAezH,EAAAA,EAAAA,UAAS,IAClC0H,EAAUC,IAAe3H,EAAAA,EAAAA,UAAS,UAEnC,OAAE4H,IAAW/H,EAAAA,EAAAA,MAObgI,EAAqBtD,IACnBA,EAAW,GACX+C,EAAQ1G,EAAO,GACfwG,EAAS,KACF7C,EAAW,IAClB+C,EAAQ1G,EAAO,GACfwG,EAAS,IAETA,EAAS7C,EACb,GAWJ9D,EAAAA,EAAAA,YAAU,KACgBqH,WAClB,GAAKF,EAAOG,UAAaH,EAAOI,UAAhC,CAEAhB,GAAW,GACXC,EAAS,MAET,IACI,MAAMgB,EAAiB,CACnBF,SAAUH,EAAOG,SACjBC,UAAWJ,EAAOI,UAClBE,OAAQN,EAAOM,OACfC,OAAQP,EAAOO,OACfC,yBAA0BR,EAAOQ,yBACjCC,aAAcT,EAAOS,cAGzB,IAAIC,EACJ,IASI,GANIA,EAFa,UAAbZ,QAEiB9H,EAAAA,EAAmB2I,sBAAsB3H,EAAMF,EAAOuH,SAGtDrI,EAAAA,EAAmB4I,qBAAqB5H,EAAMqH,GAG7C,MAAlBK,EAASG,KACT,GAAiB,UAAbf,EAAsB,CAEtB,MAAMgB,EAAoB,CACtBhB,SAAU,QACViB,OAAQ,CACJC,UAAW,CACPzG,KAAMmG,EAASO,KAAKC,WAAa,IAAIjF,KAAKjD,EAAMF,EAAQ,EAAG,GAAGqI,eAAe,UAAW,CAAErI,MAAO,SACjGC,OAAQ2H,EAASO,KAAKnI,OAE1BsI,MAAO,CACH7G,KAAM,mBACNxB,OAAQ,KAGhBY,KAAM+G,EAASO,KAAKtH,MAAQ,GAC5B0H,KAAMX,EAASO,KAAKI,MAAQ,CAAC,GAEjC9B,EAAYuB,EAChB,KAAO,CAEH,MAAMA,EAAoB,CACtBhB,SAAU,OACV9G,KAAM0H,EAASO,KAAKjI,KACpB+H,OAAQL,EAASO,KAAKF,QAAU,GAChCM,KAAMX,EAASO,KAAKI,MAAQ,CAAC,GAEjC9B,EAAYuB,EAChB,MAEAxG,QAAQgH,KAAK,+BAAgCZ,EAASa,QAEtDhC,EAAY,CACRO,SAAUA,EACViB,OAAQ,CACJC,UAAW,CACPzG,KAAM,IAAI0B,KAAKjD,EAAMF,EAAQ,EAAG,GAAGqI,eAAe,UAAW,CAAErI,MAAO,SACtEC,OAAQD,GAEZsI,MAAO,CACH7G,KAAM,gBACNxB,OAAQ,MAK5B,CAAE,MAAOyI,GACLlH,QAAQD,MAAM,sBAAuBmH,GAErCjC,EAAY,CACRO,SAAUA,EACViB,OAAQ,CACJC,UAAW,CACPzG,KAAM,IAAI0B,KAAKjD,EAAMF,EAAQ,EAAG,GAAGqI,eAAe,UAAW,CAAErI,MAAO,SACtEC,OAAQD,GAEZsI,MAAO,CACH7G,KAAM,gBACNxB,OAAQ,MAIxB,CACJ,CAAE,MAAO0I,GACLpC,EAASoC,EAAIC,SAAW,kDACxBpH,QAAQD,MAAMoH,EAClB,CAAC,QACGrC,GAAW,EACf,CA7FiD,CA6FjD,EAGJuC,EAAe,GAChB,CAAC3B,EAAQlH,EAAOE,EAAM8G,IAGzB,MAAM8B,EAAwB3H,IAAS,IAAD4H,EAClC,OAAK5H,EAAI6H,SAGL1G,EAAAA,EAAAA,MAAC4B,EAAAA,GAAI,CAACC,WAAS,EAACX,WAAW,SAAQnB,SAAA,EAC/BN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEsB,QAAS,OAAQ4B,cAAe,UAAW9C,SAAA,EAClDN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAQG,WAAW,SAAQP,SAC1C,IAAIc,KAAKhC,EAAI8H,MAAMC,aAExBnH,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,UAAUE,MAAM,iBAAgBN,SAC/ClB,EAAIkC,UAERlC,EAAImH,QACDhG,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,UAAUE,MAAM,iBAAgBN,SAAA,CAC/ClB,EAAImH,MAAMnH,IAAI,IAAiB,QAAhB4H,EAAC5H,EAAImH,MAAMtI,aAAK,IAAA+I,OAAA,EAAfA,EAAiB7F,YAKlDnB,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAOJ,SAAElB,EAAI6H,QAAQG,UAE7CpH,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAOJ,SAAElB,EAAI6H,QAAQI,aAE7CrH,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAOJ,SAAElB,EAAI6H,QAAQK,WAE7CtH,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAOJ,SAAElB,EAAI6H,QAAQM,SAE7CvH,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAOJ,SAAElB,EAAI6H,QAAQO,eAhC5B,IAkCd,EAsKf,OAAIlD,GAEI/D,EAAAA,EAAAA,MAACkH,EAAAA,EAAS,CAACC,SAAS,KAAKxH,GAAI,CAAEuC,GAAI,EAAG1B,UAAW,UAAWT,SAAA,EACxDN,EAAAA,EAAAA,KAAC2H,EAAAA,EAAgB,CAAC1D,KAAM,MACxBjE,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKR,GAAI,CAAEyD,GAAI,EAAG/C,MAAO,kBAAmBN,SAAC,iCAQzEC,EAAAA,EAAAA,MAACkH,EAAAA,EAAS,CAACC,SAAS,KAAKxH,GAAI,CAAEuC,GAAI,GAAInC,SAAA,EACnCN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKkH,UAAU,KAAKjH,cAAY,EAACT,GAAI,CAAEC,GAAI,EAAGS,MAAO,eAAgBC,WAAY,KAAMP,SAAC,qBAI3Gd,IACGQ,EAAAA,EAAAA,KAAC6H,EAAAA,EAAK,CAACC,SAAS,QAAQ5H,GAAI,CAAEC,GAAI,GAAIG,SACjCd,KAIP2F,EAAOG,WAAaH,EAAOI,YACzBhF,EAAAA,EAAAA,MAACwH,EAAAA,EAAK,CAAC7H,GAAI,CAAE6C,EAAG,EAAGhC,UAAW,UAAWT,SAAA,EACrCN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKE,MAAM,gBAAgBD,cAAY,EAAAL,SAAC,oCAG5DN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAQE,MAAM,gBAAeN,SAAC,gFAMzD6E,EAAOG,UAAYH,EAAOI,YACvBhF,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEwD,MAAO,QAASpD,SAAA,EACvBN,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACZ,GAAI,CAAE8H,aAAc,EAAG/E,YAAa,UAAW9C,GAAI,GAAIG,UACxDC,EAAAA,EAAAA,MAAC0H,EAAAA,EAAI,CACDC,MAAOnD,EACPoD,SA9WAC,CAACvI,EAAOwI,KAC5BrD,EAAYqD,EAAS,EA8WD,aAAW,gBACXC,UAAQ,EAAAhI,SAAA,EAERN,EAAAA,EAAAA,KAACuI,EAAAA,EAAG,CACAzE,MAAM9D,EAAAA,EAAAA,KAACwI,EAAAA,EAAa,IACpBC,aAAa,QACbzE,MAAM,iBACN0E,GAAG,QACH,gBAAc,gBAElB1I,EAAAA,EAAAA,KAACuI,EAAAA,EAAG,CACAzE,MAAM9D,EAAAA,EAAAA,KAAC2I,EAAAA,EAAiB,IACxBF,aAAa,QACbzE,MAAM,wBACN0E,GAAG,QACH,gBAAc,qBAM1B1I,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CACA8H,KAAK,WACLC,OAAqB,IAAb9D,EACR2D,GAAG,aACH,kBAAgB,QAAOpI,SAET,IAAbyE,IAAkB/E,EAAAA,EAAAA,KAACjD,EAAa,OAIrCiD,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CACA8H,KAAK,WACLC,OAAqB,IAAb9D,EACR2D,GAAG,aACH,kBAAgB,QAAOpI,SAET,IAAbyE,IACGxE,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAAAR,SAAA,EACAC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEsB,QAAS,OAAQE,eAAgB,gBAAiBD,WAAY,SAAUtB,GAAI,GAAIG,SAAA,EAEvFC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAAAR,SAAA,EACAN,EAAAA,EAAAA,KAAC8I,EAAAA,EAAM,CACHpI,QAAsB,UAAbuE,EAAuB,YAAc,WAC9CrD,QAASA,IAAMsD,EAAY,SAC3B6D,WAAW/I,EAAAA,EAAAA,KAAC2I,EAAAA,EAAiB,IAC7BzI,GAAI,CAAE8I,GAAI,GAAI1I,SACjB,WAGDN,EAAAA,EAAAA,KAAC8I,EAAAA,EAAM,CACHpI,QAAsB,SAAbuE,EAAsB,YAAc,WAC7CrD,QAASA,IAAMsD,EAAY,QAC3B6D,WAAW/I,EAAAA,EAAAA,KAACiJ,EAAAA,EAAa,IAAI3I,SAChC,aAMLN,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAAAR,UACAN,EAAAA,EAAAA,KAAC8I,EAAAA,EAAM,CACHpI,QAAQ,WACRqI,WAAW/I,EAAAA,EAAAA,KAACkJ,EAAAA,EAAS,IACrBtH,QA9ZPuH,KAC7B,MAAMC,EAAM,IAAIhI,KAChBuD,EAASyE,EAAIxE,WAAa,GAC1BC,EAAQuE,EAAItE,cAAc,EA4ZU5E,GAAI,CAAEmJ,GAAI,GAAI/I,SACjB,gBAOTN,EAAAA,EAAAA,KAAC+H,EAAAA,EAAK,CAAC7H,GAAI,CAAE6C,EAAG,EAAG5C,GAAI,EAAGuC,QAAS,sBAAuBpC,UACtDC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEsB,QAAS,OAAQE,eAAgB,gBAAiBD,WAAY,UAAWnB,SAAA,EAChFC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEsB,QAAS,OAAQC,WAAY,UAAWnB,SAAA,CACjC,UAAb2E,IACG1E,EAAAA,EAAAA,MAAA+I,EAAAA,SAAA,CAAAhJ,SAAA,EACIN,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACPC,QAASA,IAAMwD,EAAkBnH,EAAQ,GACzC,aAAW,iBAAgBqC,UAE3BN,EAAAA,EAAAA,KAACuJ,EAAAA,EAAkB,OAGvBvJ,EAAAA,EAAAA,KAACwJ,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAepJ,UAC9CN,EAAAA,EAAAA,KAAC2J,EAAAA,EAAU,CACPC,MAAO,CAAC,OAAQ,SAChB5F,MAAM,iBACN6F,QAAS,IAAIzI,KAAK,cAClB0I,QAAS,IAAI1I,KAAK,cAClB8G,MAAO,IAAI9G,KAAKjD,EAAMF,EAAQ,GAC9BkK,SAAW4B,IACHA,IACAlF,EAAQkF,EAAQjF,eAChBH,EAASoF,EAAQnF,WAAa,GAClC,EAEJoF,YAAc7E,IAAWnF,EAAAA,EAAAA,KAACiK,EAAAA,EAAS,IAAK9E,EAAQzE,QAAQ,WAAWwJ,WAAY,OAC/EhK,GAAI,CAAEiK,GAAI,EAAGzG,MAAO,UAI5B1D,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACPC,QAASA,IAAMwD,EAAkBnH,EAAQ,GACzC,aAAW,aAAYqC,UAEvBN,EAAAA,EAAAA,KAACoK,EAAAA,EAAgB,SAKf,SAAbnF,IACG1E,EAAAA,EAAAA,MAAA+I,EAAAA,SAAA,CAAAhJ,SAAA,EACIN,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACPC,QAASA,IAAMiD,EAAQ1G,EAAO,GAC9B,aAAW,gBAAemC,UAE1BN,EAAAA,EAAAA,KAACuJ,EAAAA,EAAkB,OAGvBvJ,EAAAA,EAAAA,KAACwJ,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAepJ,UAC9CN,EAAAA,EAAAA,KAAC2J,EAAAA,EAAU,CACPC,MAAO,CAAC,QACR5F,MAAM,OACN6F,QAAS,IAAIzI,KAAK,cAClB0I,QAAS,IAAI1I,KAAK,cAClB8G,MAAO,IAAI9G,KAAKjD,EAAM,GACtBgK,SAAW4B,IACHA,GACAlF,EAAQkF,EAAQjF,cACpB,EAEJkF,YAAc7E,IAAWnF,EAAAA,EAAAA,KAACiK,EAAAA,EAAS,IAAK9E,EAAQzE,QAAQ,WAAWwJ,WAAY,OAC/EhK,GAAI,CAAEiK,GAAI,EAAGzG,MAAO,UAI5B1D,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACPC,QAASA,IAAMiD,EAAQ1G,EAAO,GAC9B,aAAW,YAAWmC,UAEtBN,EAAAA,EAAAA,KAACoK,EAAAA,EAAgB,aAOjC7J,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEa,UAAW,SAAUT,SAAA,EAC5BN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAL,SACnB,UAAb2E,EACK,IAAW,OAARR,QAAQ,IAARA,GAAgB,QAARN,EAARM,EAAUyB,cAAM,IAAA/B,GAAW,QAAXC,EAAhBD,EAAkBgC,iBAAS,IAAA/B,OAAnB,EAARA,EAA6B1E,OAAQ,IAAI0B,KAAKjD,EAAMF,EAAQ,GAAGqI,eAAe,UAAW,CAAErI,MAAO,YAAaE,IAClH,GAAGA,6BAGJ,OAARsG,QAAQ,IAARA,OAAQ,EAARA,EAAU+B,QACPjG,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,QAAQE,MAAM,iBAAgBN,SAAA,CAAC,YAClB,QAApB+D,EAAAI,EAAS+B,KAAKf,cAAM,IAAApB,OAAA,EAApBA,EAAsB3E,OAAQ,OAAO,mBAAY+E,EAAS+B,KAAKd,QAAU,sBAQxF,UAAbT,EA/WHoF,MACtB,IAAK5F,IAAaA,EAAS3F,KACvB,OACIyB,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEyD,GAAI,EAAGZ,EAAG,EAAGhC,UAAW,SAAUiC,OAAQ,aAAcC,YAAa,UAAW7C,aAAc,GAAIE,SAAA,EACzGN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAL,SAAC,2BAGtCN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAQR,GAAI,CAAEC,GAAI,GAAIG,SAAC,qHAOvD,MAAMgK,GAAQ,IAAIlJ,MAAOmJ,cAAcC,MAAM,KAAK,GAElD,OACIxK,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACZ,GAAI,CAAEyD,GAAI,GAAIrD,UACfC,EAAAA,EAAAA,MAAC4B,EAAAA,GAAI,CAACC,WAAS,EAACwB,QAAS,EAAEtD,SAAA,EACvBN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAGlC,UACdN,EAAAA,EAAAA,KAAC+H,EAAAA,EAAK,CAAC7H,GAAI,CAAE6C,EAAG,EAAG5C,GAAI,EAAGuC,QAAS,eAAgB9B,MAAO,wBAAyBN,UAC/EC,EAAAA,EAAAA,MAAC4B,EAAAA,GAAI,CAACC,WAAS,EAAA9B,SAAA,EACXN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,YAAYG,WAAW,OAAMP,SAAC,YAEtDN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,YAAYG,WAAW,OAAMP,SAAC,YAEtDN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,YAAYG,WAAW,OAAMP,SAAC,eAEtDN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,YAAYG,WAAW,OAAMP,SAAC,aAEtDN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,YAAYG,WAAW,OAAMP,SAAC,WAEtDN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAElC,UACbN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,YAAYG,WAAW,OAAMP,SAAC,qBAMjEmE,EAAS3F,KAAKuD,KAAI,CAACjD,EAAKkD,KACrBtC,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAGlC,UACdN,EAAAA,EAAAA,KAAC+H,EAAAA,EAAK,CACF7H,GAAI,CACA6C,EAAG,EACHL,QAAStD,EAAI8H,OAASoD,EAAQ,kBAAoB,oBAEtDG,UAAWrL,EAAI8H,OAASoD,EAAQ,EAAI,EAAEhK,SAErCyG,EAAqB3H,MARNA,EAAI8H,MAAQ5E,SAa1C,EAqTsC+H,GA/S3C5F,GAAaA,EAASyB,QAcvB3F,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEyD,GAAI,GAAIrD,SAAA,EACfC,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAACT,GAAI,CAAEC,GAAI,GAAIG,SAAA,CAC/CnC,EAAK,yBACLsG,EAASiG,eACN1K,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACmH,UAAU,OAAOlH,QAAQ,QAAQE,MAAM,iBAAiBV,GAAI,CAAEmJ,GAAI,GAAI/I,SAAC,wDAM1FmE,EAASiG,eACN1K,EAAAA,EAAAA,KAAC6H,EAAAA,EAAK,CAACC,SAAS,OAAO5H,GAAI,CAAEyD,GAAI,EAAGxD,GAAI,GAAIG,SAAC,qLAMjDN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACC,WAAS,EAACwB,QAAS,EAAEtD,SACtBqK,MAAMC,QAAQnG,EAASyB,SAAWzB,EAASyB,OAAO7D,KAAI,CAACwI,EAAWC,KAAG,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAClEpL,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAI6I,GAAI,EAAGC,GAAI,EAAEhL,UAC5BC,EAAAA,EAAAA,MAACwH,EAAAA,EAAK,CAAC7H,GAAI,CAAE6C,EAAG,EAAGD,OAAQ,QAASxC,SAAA,EAChCN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKE,MAAM,UAAUD,cAAY,EAAAL,SAChDuK,EAAUxE,aAGfrG,EAAAA,EAAAA,KAAC8I,EAAAA,EAAM,CACHpI,QAAQ,WACRuD,KAAK,QACLrC,QAASA,KACL+C,EAASkG,EAAU5M,OACnBiH,EAAY,QAAQ,EAExB6D,WAAW/I,EAAAA,EAAAA,KAAC2I,EAAAA,EAAiB,IAC7BzI,GAAI,CAAEC,GAAI,GAAIG,SACjB,iBAIAuK,EAAUrL,OACPQ,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAQE,MAAM,QAAON,SACpCuK,EAAUrL,SAGfe,EAAAA,EAAAA,MAAA+I,EAAAA,SAAA,CAAAhJ,SAAA,EACIC,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,QAAQE,MAAM,iBAAiB2K,WAAS,EAAAjL,SAAA,EACzC,QAAdyK,EAAAF,EAAU/L,YAAI,IAAAiM,OAAA,EAAdA,EAAgB1H,SAAU,EAAE,kCAC5BwH,EAAUW,WAAa,gBAG3BX,EAAU/L,MAAQ+L,EAAU/L,KAAKuE,OAAS,IACvC9C,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEyD,GAAI,GAAIrD,SAAA,EACfN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAQC,cAAY,EAAAL,UACpCC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,CAAQ,uBAAqBuK,EAAUW,UAAY,iBAAmB,GAAG,UAE7EjL,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEuL,GAAI,EAAGC,WAAY,YAAazI,YAAa,eAAgBoG,GAAI,GAAI/I,SAAA,EAC5EC,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,UAAUc,QAAQ,QAAOlB,SAAA,CAAC,SACV,QAA1B0K,EAACH,EAAU/L,KAAK,GAAGmI,eAAO,IAAA+D,OAAA,EAAzBA,EAA2B5D,SAEtC7G,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,UAAUc,QAAQ,QAAOlB,SAAA,CAAC,UACT,QAA1B2K,EAACJ,EAAU/L,KAAK,GAAGmI,eAAO,IAAAgE,OAAA,EAAzBA,EAA2B3D,UAEvC/G,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,UAAUc,QAAQ,QAAOlB,SAAA,CAAC,QACX,QAA1B4K,EAACL,EAAU/L,KAAK,GAAGmI,eAAO,IAAAiE,OAAA,EAAzBA,EAA2B3D,QAErChH,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,UAAUc,QAAQ,QAAOlB,SAAA,CAAC,YACP,QAA1B6K,EAACN,EAAU/L,KAAK,GAAGmI,eAAO,IAAAkE,OAAA,EAAzBA,EAA2B3D,YAEzCjH,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACC,QAAQ,UAAUc,QAAQ,QAAOlB,SAAA,CAAC,SACV,QAA1B8K,EAACP,EAAU/L,KAAK,GAAGmI,eAAO,IAAAmE,OAAA,EAAzBA,EAA2BO,qBAjD5B,SAASb,IAyDxC,UAxFfvK,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACZ,GAAI,CAAEyD,GAAI,EAAGZ,EAAG,EAAGhC,UAAW,SAAUiC,OAAQ,aAAcC,YAAa,UAAW7C,aAAc,GAAIE,SAAA,EACzGN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAL,SAAC,kCAGtCN,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,QAAQR,GAAI,CAAEC,GAAI,GAAIG,SAAC,8GA+S3C,C","sources":["components/prayer-times/HijriCalendar.js","pages/CalendarPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n   Box,\n   Card,\n   CardContent,\n   Typography,\n   Grid,\n   Paper,\n   Divider,\n   IconButton,\n   Badge,\n   Tooltip,\n   Chip,\n   useTheme\n} from '@mui/material';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport EventIcon from '@mui/icons-material/Event';\nimport { usePrayerTimes } from '../../contexts/PrayerTimesContext';\n\n// Calendar constants\nconst DAYS_OF_WEEK = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst DAYS_OF_WEEK_SHORT = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\n/**\n * HijriCalendar component that displays Hijri (Islamic) calendar information\n */\nconst HijriCalendar = () => {\n   const theme = useTheme();\n   const { hijriDate, prayerTimesService } = usePrayerTimes();\n\n   const [currentMonth, setCurrentMonth] = useState(null);\n   const [currentYear, setCurrentYear] = useState(null);\n   const [calendarData, setCalendarData] = useState([]);\n   const [islamicEvents, setIslamicEvents] = useState([]);\n   const [todayHijri, setTodayHijri] = useState(null);\n\n   // Initialize with current Hijri date when component mounts\n   useEffect(() => {\n      if (hijriDate) {\n         setCurrentMonth(hijriDate.month.number);\n         setCurrentYear(hijriDate.year);\n         setTodayHijri(hijriDate);\n         loadCalendarData(hijriDate.month.number, hijriDate.year);\n         loadIslamicEvents(hijriDate.year);\n      }\n   }, [hijriDate]);\n\n   // Update the loadCalendarData function\n   const loadCalendarData = (month, year) => {\n      try {\n         // Simple function to calculate days in a Hijri month (fallback)\n         const calculateDaysInHijriMonth = (m, y) => {\n            // In the Hijri calendar, odd-numbered months typically have 30 days\n            // and even-numbered months have 29 days, with some exceptions in leap years\n            const isLeapYear = [2, 5, 7, 10, 13, 16, 18, 21, 24, 26, 29].includes(y % 30);\n            if (m % 2 === 1) return 30;\n            if (m === 12 && isLeapYear) return 30;\n            return 29;\n         };\n\n         // Use service if available, otherwise calculate locally\n         const daysInMonth = prayerTimesService?.getHijriCalendar ?\n            prayerTimesService.getHijriCalendar(month, year).daysInMonth :\n            calculateDaysInHijriMonth(month, year);\n\n         // Calculate first day of month (this is a simplified approach)\n         const firstDayOfMonth = (month + year) % 7;\n\n         const days = [];\n         let dayCounter = 1;\n\n         // Create a 6-row calendar (max possible rows needed)\n         for (let i = 0; i < 6; i++) {\n            const week = [];\n            for (let j = 0; j < 7; j++) {\n               if ((i === 0 && j < firstDayOfMonth) || dayCounter > daysInMonth) {\n                  // Empty cell before start of month or after end of month\n                  week.push(null);\n               } else {\n                  week.push({\n                     day: dayCounter,\n                     isToday: isToday(dayCounter, month, year),\n                     events: getEventsForDay(dayCounter, month, year)\n                  });\n                  dayCounter++;\n               }\n            }\n            days.push(week);\n\n            // Break if we've reached the end of the month\n            if (dayCounter > daysInMonth) break;\n         }\n\n         setCalendarData(days);\n      } catch (error) {\n         console.error('Error loading Hijri calendar data:', error);\n      }\n   };\n\n   // Update loadIslamicEvents to use our client-side implementation\n   const loadIslamicEvents = (year) => {\n      try {\n         const events = [\n            { name: 'Islamic New Year', month: 1, day: 1 },\n            { name: 'Day of Ashura', month: 1, day: 10 },\n            { name: 'Mawlid al-Nabi', month: 3, day: 12 },\n            { name: 'Laylat al-Miraj', month: 7, day: 27 },\n            { name: 'Laylat al-Bara\\'at', month: 8, day: 15 },\n            { name: 'Start of Ramadan', month: 9, day: 1 },\n            { name: 'Laylat al-Qadr', month: 9, day: 27 },\n            { name: 'Eid al-Fitr', month: 10, day: 1 },\n            { name: 'Day of Arafah', month: 12, day: 9 },\n            { name: 'Eid al-Adha', month: 12, day: 10 }\n         ];\n         setIslamicEvents(events);\n      } catch (error) {\n         console.error('Error loading Islamic events:', error);\n      }\n   };\n\n   // Check if a day is today in Hijri calendar\n   const isToday = (day, month, year) => {\n      return hijriDate &&\n         hijriDate.day === day &&\n         hijriDate.month.number === month &&\n         hijriDate.year === parseInt(year);\n   };\n\n   // Get events for a specific day\n   const getEventsForDay = (day, month, year) => {\n      return islamicEvents.filter(event =>\n         event.day === day && event.month === month\n      );\n   };\n\n   // Navigate to previous month\n   const goToPreviousMonth = () => {\n      let newMonth = currentMonth - 1;\n      let newYear = currentYear;\n\n      if (newMonth < 1) {\n         newMonth = 12;\n         newYear--;\n      }\n\n      setCurrentMonth(newMonth);\n      setCurrentYear(newYear);\n      loadCalendarData(newMonth, newYear);\n   };\n\n   // Navigate to next month\n   const goToNextMonth = () => {\n      let newMonth = currentMonth + 1;\n      let newYear = currentYear;\n\n      if (newMonth > 12) {\n         newMonth = 1;\n         newYear++;\n      }\n\n      setCurrentMonth(newMonth);\n      setCurrentYear(newYear);\n      loadCalendarData(newMonth, newYear);\n   };\n\n   // Get month name based on the month number\n   const getHijriMonthName = (monthNumber) => {\n      const monthNames = [\n         'Muharram', 'Safar', 'Rabi al-Awwal', 'Rabi al-Thani',\n         'Jumada al-Awwal', 'Jumada al-Thani', 'Rajab', 'Shaban',\n         'Ramadan', 'Shawwal', 'Dhu al-Qadah', 'Dhu al-Hijjah'\n      ];\n\n      return monthNames[monthNumber - 1];\n   };\n\n   // If no Hijri date is available, show loading state\n   if (!hijriDate || !currentMonth || !currentYear) {\n      return (\n         <Card sx={{ mb: 4, borderRadius: 2, boxShadow: 3 }}>\n            <CardContent>\n               <Typography variant=\"h6\" gutterBottom sx={{ color: 'primary.main' }}>\n                  Islamic Calendar\n               </Typography>\n               <Box sx={{ p: 3, textAlign: 'center' }}>\n                  <Typography>Loading Hijri calendar...</Typography>\n               </Box>\n            </CardContent>\n         </Card>\n      );\n   }\n\n   return (\n      <Card sx={{ mb: 4, borderRadius: 2, boxShadow: 3 }}>\n         <CardContent>\n            <Typography variant=\"h6\" gutterBottom sx={{ color: 'primary.main', fontWeight: 'medium' }}>\n               Islamic Calendar\n            </Typography>\n\n            {/* Today's Hijri date display */}\n            <Box sx={{ mb: 3, textAlign: 'center' }}>\n               <Typography variant=\"h5\" gutterBottom sx={{ color: theme.palette.secondary.main, fontWeight: 'bold' }}>\n                  {todayHijri.day} {todayHijri.month.en} {todayHijri.year} AH\n               </Typography>\n               <Typography variant=\"body2\" color=\"text.secondary\">\n                  Corresponding to {new Date().toLocaleDateString('en-US', {\n                     weekday: 'long',\n                     year: 'numeric',\n                     month: 'long',\n                     day: 'numeric'\n                  })}\n               </Typography>\n            </Box>\n\n            <Divider sx={{ mb: 3 }} />\n\n            {/* Month navigation */}\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n               <IconButton onClick={goToPreviousMonth}>\n                  <ChevronLeftIcon />\n               </IconButton>\n\n               <Typography variant=\"h6\">\n                  {getHijriMonthName(currentMonth)} {currentYear} AH\n               </Typography>\n\n               <IconButton onClick={goToNextMonth}>\n                  <ChevronRightIcon />\n               </IconButton>\n            </Box>\n\n            {/* Calendar grid */}\n            <Box sx={{ mb: 3 }}>\n               <Grid container>\n                  {/* Days of week header */}\n                  {DAYS_OF_WEEK_SHORT.map((day, index) => (\n                     <Grid\n                        item\n                        key={day}\n                        xs={12 / 7}\n                        sx={{\n                           py: 1,\n                           textAlign: 'center',\n                           fontWeight: 'medium',\n                           bgcolor: index === 5 ? 'rgba(76, 175, 80, 0.1)' : 'transparent' // Highlight Friday\n                        }}\n                     >\n                        <Typography variant=\"body2\" sx={{ fontWeight: index === 5 ? 'bold' : 'inherit' }}>\n                           {day}\n                        </Typography>\n                     </Grid>\n                  ))}\n\n                  {/* Calendar days */}\n                  {calendarData.map((week, weekIndex) => (\n                     <React.Fragment key={`week-${weekIndex}`}>\n                        {week.map((day, dayIndex) => (\n                           <Grid\n                              item\n                              xs={12 / 7}\n                              key={`day-${weekIndex}-${dayIndex}`}\n                              sx={{\n                                 height: 50,\n                                 p: 0.5,\n                                 border: '1px solid',\n                                 borderColor: 'divider'\n                              }}\n                           >\n                              {day && (\n                                 <Box\n                                    sx={{\n                                       height: '100%',\n                                       p: 0.5,\n                                       borderRadius: 1,\n                                       bgcolor: day.isToday ? theme.palette.primary.main : 'transparent',\n                                       color: day.isToday ? 'white' : 'inherit',\n                                       position: 'relative',\n                                       display: 'flex',\n                                       flexDirection: 'column',\n                                       alignItems: 'center'\n                                    }}\n                                 >\n                                    <Typography variant=\"body2\">{day.day}</Typography>\n                                    {day.events && day.events.length > 0 && (\n                                       <Tooltip title={day.events.map(e => e.name).join(', ')}>\n                                          <Box\n                                             sx={{\n                                                width: '60%',\n                                                height: 4,\n                                                borderRadius: 2,\n                                                bgcolor: day.isToday ? 'rgba(255,255,255,0.7)' : theme.palette.secondary.main,\n                                                mt: 'auto'\n                                             }}\n                                          />\n                                       </Tooltip>\n                                    )}\n                                 </Box>\n                              )}\n                           </Grid>\n                        ))}\n                     </React.Fragment>\n                  ))}\n               </Grid>\n            </Box>\n\n            <Divider sx={{ mb: 3 }} />\n\n            {/* Important Islamic dates */}\n            <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'medium' }}>\n               Important Islamic Dates\n            </Typography>\n\n            <Box sx={{ mb: 2 }}>\n               <Grid container spacing={1}>\n                  {islamicEvents.map((event) => (\n                     <Grid item key={`${event.month}-${event.day}-${event.name}`}>\n                        <Chip\n                           icon={<EventIcon />}\n                           label={`${event.name} (${event.day} ${getHijriMonthName(event.month)})`}\n                           color={event.month === currentMonth ? \"primary\" : \"default\"}\n                           variant={event.month === currentMonth ? \"filled\" : \"outlined\"}\n                           size=\"small\"\n                           sx={{ mb: 1 }}\n                        />\n                     </Grid>\n                  ))}\n               </Grid>\n            </Box>\n         </CardContent>\n      </Card>\n   );\n};\n\nexport default HijriCalendar;","import React, { useState, useEffect } from 'react';\nimport {\n    Container,\n    Typography,\n    Paper,\n    Box,\n    Grid,\n    Card,\n    CardContent,\n    Divider,\n    CircularProgress,\n    Alert,\n    Tabs,\n    Tab,\n    TextField,\n    Button,\n    IconButton\n} from '@mui/material';\nimport { usePrayerTimes } from '../contexts/PrayerTimesContext';\nimport prayerTimesService from '../services/prayerTimesService';\nimport HijriCalendar from '../components/prayer-times/HijriCalendar';\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\nimport DateRangeIcon from '@mui/icons-material/DateRange';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\nimport TodayIcon from '@mui/icons-material/Today';\nimport EventNoteIcon from '@mui/icons-material/EventNote';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';\n\nconst CalendarPage = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [calendar, setCalendar] = useState(null);\n    const [month, setMonth] = useState(new Date().getMonth() + 1); // 1-12\n    const [year, setYear] = useState(new Date().getFullYear());\n    const [tabValue, setTabValue] = useState(0);\n    const [viewType, setViewType] = useState('month'); // 'month' or 'year'\n\n    const { params } = usePrayerTimes();\n\n    // Handle tab change\n    const handleTabChange = (event, newValue) => {\n        setTabValue(newValue);\n    };\n\n    const handleMonthChange = (newMonth) => {\n        if (newMonth < 1) {\n            setYear(year - 1);\n            setMonth(12);\n        } else if (newMonth > 12) {\n            setYear(year + 1);\n            setMonth(1);\n        } else {\n            setMonth(newMonth);\n        }\n    };\n\n    // Reset to current month\n    const handleResetToCurrentDate = () => {\n        const now = new Date();\n        setMonth(now.getMonth() + 1);\n        setYear(now.getFullYear());\n    };\n\n    // Fetch calendar data when params, month or year changes\n    useEffect(() => {\n        const fetchCalendar = async () => {\n            if (!params.latitude || !params.longitude) return;\n\n            setLoading(true);\n            setError(null);\n\n            try {\n                const calendarParams = {\n                    latitude: params.latitude,\n                    longitude: params.longitude,\n                    method: params.method,\n                    school: params.school,\n                    latitudeAdjustmentMethod: params.latitudeAdjustmentMethod,\n                    midnightMode: params.midnightMode\n                };\n\n                let response;\n                try {\n                    if (viewType === 'month') {\n                        // Fetch monthly calendar\n                        response = await prayerTimesService.getMonthlyPrayerTimes(year, month, calendarParams);\n                    } else {\n                        // Fetch yearly calendar\n                        response = await prayerTimesService.getYearlyPrayerTimes(year, calendarParams);\n                    }\n\n                    if (response.code === 200) {\n                        if (viewType === 'month') {\n                            // Format monthly response\n                            const formattedCalendar = {\n                                viewType: 'month',\n                                months: {\n                                    gregorian: {\n                                        name: response.data.monthName || new Date(year, month - 1, 1).toLocaleString('default', { month: 'long' }),\n                                        number: response.data.month\n                                    },\n                                    hijri: {\n                                        name: \"Islamic Calendar\",\n                                        number: \"\"\n                                    }\n                                },\n                                days: response.data.days || [],\n                                meta: response.data.meta || {}\n                            };\n                            setCalendar(formattedCalendar);\n                        } else {\n                            // Format yearly response\n                            const formattedCalendar = {\n                                viewType: 'year',\n                                year: response.data.year,\n                                months: response.data.months || [],\n                                meta: response.data.meta || {}\n                            };\n                            setCalendar(formattedCalendar);\n                        }\n                    } else {\n                        console.warn('API returned non-200 status:', response.status);\n                        // Set a minimal calendar object to prevent UI errors\n                        setCalendar({\n                            viewType: viewType,\n                            months: {\n                                gregorian: {\n                                    name: new Date(year, month - 1, 1).toLocaleString('default', { month: 'long' }),\n                                    number: month\n                                },\n                                hijri: {\n                                    name: \"Calendar View\",\n                                    number: \"\"\n                                }\n                            }\n                        });\n                    }\n                } catch (apiError) {\n                    console.error('Calendar API error:', apiError);\n                    // Fallback calendar object\n                    setCalendar({\n                        viewType: viewType,\n                        months: {\n                            gregorian: {\n                                name: new Date(year, month - 1, 1).toLocaleString('default', { month: 'long' }),\n                                number: month\n                            },\n                            hijri: {\n                                name: \"Calendar View\",\n                                number: \"\"\n                            }\n                        }\n                    });\n                }\n            } catch (err) {\n                setError(err.message || 'An error occurred while fetching calendar data');\n                console.error(err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchCalendar();\n    }, [params, month, year, viewType]);\n\n    // Render prayer times for a specific day\n    const renderDayPrayerTimes = (day) => {\n        if (!day.timings) return null;\n\n        return (\n            <Grid container alignItems=\"center\">\n                <Grid item xs={2}>\n                    <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n                        <Typography variant=\"body1\" fontWeight=\"medium\">\n                            {new Date(day.date).getDate()}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                            {day.weekday}\n                        </Typography>\n                        {day.hijri && (\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                                {day.hijri.day} {day.hijri.month?.en}\n                            </Typography>\n                        )}\n                    </Box>\n                </Grid>\n                <Grid item xs={2}>\n                    <Typography variant=\"body2\">{day.timings.Fajr}</Typography>\n                </Grid>\n                <Grid item xs={2}>\n                    <Typography variant=\"body2\">{day.timings.Sunrise}</Typography>\n                </Grid>\n                <Grid item xs={2}>\n                    <Typography variant=\"body2\">{day.timings.Dhuhr}</Typography>\n                </Grid>\n                <Grid item xs={2}>\n                    <Typography variant=\"body2\">{day.timings.Asr}</Typography>\n                </Grid>\n                <Grid item xs={2}>\n                    <Typography variant=\"body2\">{day.timings.Maghrib}</Typography>\n                </Grid>\n            </Grid>\n        );\n    };\n\n    // Render monthly calendar view\n    const renderMonthlyView = () => {\n        if (!calendar || !calendar.days) {\n            return (\n                <Box sx={{ mt: 4, p: 3, textAlign: 'center', border: '1px dashed', borderColor: 'divider', borderRadius: 2 }}>\n                    <Typography variant=\"h6\" gutterBottom>\n                        Prayer Times Calendar\n                    </Typography>\n                    <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                        No prayer times data available for the selected month. Please try a different month or check your connection.\n                    </Typography>\n                </Box>\n            );\n        }\n\n        const today = new Date().toISOString().split('T')[0];\n\n        return (\n            <Box sx={{ mt: 2 }}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Paper sx={{ p: 2, mb: 2, bgcolor: 'primary.main', color: 'primary.contrastText' }}>\n                            <Grid container>\n                                <Grid item xs={2}>\n                                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">Date</Typography>\n                                </Grid>\n                                <Grid item xs={2}>\n                                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">Fajr</Typography>\n                                </Grid>\n                                <Grid item xs={2}>\n                                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">Sunrise</Typography>\n                                </Grid>\n                                <Grid item xs={2}>\n                                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">Dhuhr</Typography>\n                                </Grid>\n                                <Grid item xs={2}>\n                                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">Asr</Typography>\n                                </Grid>\n                                <Grid item xs={2}>\n                                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">Maghrib</Typography>\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n\n                    {calendar.days.map((day, index) => (\n                        <Grid item xs={12} key={day.date || index}>\n                            <Paper\n                                sx={{\n                                    p: 2,\n                                    bgcolor: day.date === today ? 'action.selected' : 'background.paper'\n                                }}\n                                elevation={day.date === today ? 3 : 1}\n                            >\n                                {renderDayPrayerTimes(day)}\n                            </Paper>\n                        </Grid>\n                    ))}\n                </Grid>\n            </Box>\n        );\n    };\n\n    // Update the renderYearlyView function to handle simplified responses\n    const renderYearlyView = () => {\n        if (!calendar || !calendar.months) {\n            return (\n                <Box sx={{ mt: 4, p: 3, textAlign: 'center', border: '1px dashed', borderColor: 'divider', borderRadius: 2 }}>\n                    <Typography variant=\"h6\" gutterBottom>\n                        Yearly Prayer Times Calendar\n                    </Typography>\n                    <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                        No yearly prayer times data available. Please try a different year or check your connection.\n                    </Typography>\n                </Box>\n            );\n        }\n\n        return (\n            <Box sx={{ mt: 2 }}>\n                <Typography variant=\"h5\" gutterBottom sx={{ mb: 3 }}>\n                    {year} Prayer Times Overview\n                    {calendar.isSimplified && (\n                        <Typography component=\"span\" variant=\"body2\" color=\"text.secondary\" sx={{ ml: 2 }}>\n                            (Preview mode - showing first day of each month)\n                        </Typography>\n                    )}\n                </Typography>\n\n                {calendar.isSimplified && (\n                    <Alert severity=\"info\" sx={{ mt: 1, mb: 3 }}>\n                        For performance reasons, the yearly view shows sample prayer times from the first day of each month.\n                        For complete daily prayer times, please click \"View Details\" on any month.\n                    </Alert>\n                )}\n\n                <Grid container spacing={3}>\n                    {Array.isArray(calendar.months) && calendar.months.map((monthData, idx) => (\n                        <Grid item xs={12} md={6} lg={4} key={`month-${idx}`}>\n                            <Paper sx={{ p: 2, height: '100%' }}>\n                                <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n                                    {monthData.monthName}\n                                </Typography>\n\n                                <Button\n                                    variant=\"outlined\"\n                                    size=\"small\"\n                                    onClick={() => {\n                                        setMonth(monthData.month);\n                                        setViewType('month');\n                                    }}\n                                    startIcon={<CalendarMonthIcon />}\n                                    sx={{ mb: 2 }}\n                                >\n                                    View Details\n                                </Button>\n\n                                {monthData.error ? (\n                                    <Typography variant=\"body2\" color=\"error\">\n                                        {monthData.error}\n                                    </Typography>\n                                ) : (\n                                    <>\n                                        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                                            {monthData.days?.length || 0} days of prayer times available\n                                            {monthData.isPreview && \" (Preview)\"}\n                                        </Typography>\n\n                                        {monthData.days && monthData.days.length > 0 && (\n                                            <Box sx={{ mt: 1 }}>\n                                                <Typography variant=\"body2\" gutterBottom>\n                                                    <strong>Sample Prayer Times {monthData.isPreview ? \"(1st of month)\" : \"\"}:</strong>\n                                                </Typography>\n                                                <Box sx={{ pl: 2, borderLeft: '2px solid', borderColor: 'primary.main', ml: 1 }}>\n                                                    <Typography variant=\"caption\" display=\"block\">\n                                                        Fajr: {monthData.days[0].timings?.Fajr}\n                                                    </Typography>\n                                                    <Typography variant=\"caption\" display=\"block\">\n                                                        Dhuhr: {monthData.days[0].timings?.Dhuhr}\n                                                    </Typography>\n                                                    <Typography variant=\"caption\" display=\"block\">\n                                                        Asr: {monthData.days[0].timings?.Asr}\n                                                    </Typography>\n                                                    <Typography variant=\"caption\" display=\"block\">\n                                                        Maghrib: {monthData.days[0].timings?.Maghrib}\n                                                    </Typography>\n                                                    <Typography variant=\"caption\" display=\"block\">\n                                                        Isha: {monthData.days[0].timings?.Isha}\n                                                    </Typography>\n                                                </Box>\n                                            </Box>\n                                        )}\n                                    </>\n                                )}\n                            </Paper>\n                        </Grid>\n                    ))}\n                </Grid>\n            </Box>\n        );\n    };\n\n    if (loading) {\n        return (\n            <Container maxWidth=\"lg\" sx={{ py: 4, textAlign: 'center' }}>\n                <CircularProgress size={60} />\n                <Typography variant=\"h6\" sx={{ mt: 2, color: 'text.secondary' }}>\n                    Loading calendar data...\n                </Typography>\n            </Container>\n        );\n    }\n\n    return (\n        <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ mb: 4, color: 'primary.main', fontWeight: 500 }}>\n                Islamic Calendar\n            </Typography>\n\n            {error && (\n                <Alert severity=\"error\" sx={{ mb: 3 }}>\n                    {error}\n                </Alert>\n            )}\n\n            {!params.latitude && !params.longitude && (\n                <Paper sx={{ p: 4, textAlign: 'center' }}>\n                    <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                        Please set your location first\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                        Go to the Prayer Times page to set your location and calculation method.\n                    </Typography>\n                </Paper>\n            )}\n\n            {params.latitude && params.longitude && (\n                <Box sx={{ width: '100%' }}>\n                    <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n                        <Tabs\n                            value={tabValue}\n                            onChange={handleTabChange}\n                            aria-label=\"calendar tabs\"\n                            centered\n                        >\n                            <Tab\n                                icon={<DateRangeIcon />}\n                                iconPosition=\"start\"\n                                label=\"Hijri Calendar\"\n                                id=\"tab-0\"\n                                aria-controls=\"tabpanel-0\"\n                            />\n                            <Tab\n                                icon={<CalendarMonthIcon />}\n                                iconPosition=\"start\"\n                                label=\"Prayer Times Calendar\"\n                                id=\"tab-1\"\n                                aria-controls=\"tabpanel-1\"\n                            />\n                        </Tabs>\n                    </Box>\n\n                    {/* Hijri Calendar Tab */}\n                    <Box\n                        role=\"tabpanel\"\n                        hidden={tabValue !== 0}\n                        id=\"tabpanel-0\"\n                        aria-labelledby=\"tab-0\"\n                    >\n                        {tabValue === 0 && <HijriCalendar />}\n                    </Box>\n\n                    {/* Prayer Times Calendar Tab */}\n                    <Box\n                        role=\"tabpanel\"\n                        hidden={tabValue !== 1}\n                        id=\"tabpanel-1\"\n                        aria-labelledby=\"tab-1\"\n                    >\n                        {tabValue === 1 && (\n                            <Box>\n                                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n                                    {/* View Type Toggle */}\n                                    <Box>\n                                        <Button\n                                            variant={viewType === 'month' ? 'contained' : 'outlined'}\n                                            onClick={() => setViewType('month')}\n                                            startIcon={<CalendarMonthIcon />}\n                                            sx={{ mr: 1 }}\n                                        >\n                                            Month\n                                        </Button>\n                                        <Button\n                                            variant={viewType === 'year' ? 'contained' : 'outlined'}\n                                            onClick={() => setViewType('year')}\n                                            startIcon={<EventNoteIcon />}\n                                        >\n                                            Year\n                                        </Button>\n                                    </Box>\n\n                                    {/* Date Navigation and Reset */}\n                                    <Box>\n                                        <Button\n                                            variant=\"outlined\"\n                                            startIcon={<TodayIcon />}\n                                            onClick={handleResetToCurrentDate}\n                                            sx={{ ml: 2 }}\n                                        >\n                                            Today\n                                        </Button>\n                                    </Box>\n                                </Box>\n\n                                {/* Month/Year Selection Controls */}\n                                <Paper sx={{ p: 3, mb: 4, bgcolor: 'background.default' }}>\n                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                            {viewType === 'month' && (\n                                                <>\n                                                    <IconButton\n                                                        onClick={() => handleMonthChange(month - 1)}\n                                                        aria-label=\"Previous month\"\n                                                    >\n                                                        <NavigateBeforeIcon />\n                                                    </IconButton>\n\n                                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                                        <DatePicker\n                                                            views={['year', 'month']}\n                                                            label=\"Year and Month\"\n                                                            minDate={new Date('2000-01-01')}\n                                                            maxDate={new Date('2050-12-31')}\n                                                            value={new Date(year, month - 1)}\n                                                            onChange={(newDate) => {\n                                                                if (newDate) {\n                                                                    setYear(newDate.getFullYear());\n                                                                    setMonth(newDate.getMonth() + 1);\n                                                                }\n                                                            }}\n                                                            renderInput={(params) => <TextField {...params} variant=\"standard\" helperText={null} />}\n                                                            sx={{ mx: 2, width: 170 }}\n                                                        />\n                                                    </LocalizationProvider>\n\n                                                    <IconButton\n                                                        onClick={() => handleMonthChange(month + 1)}\n                                                        aria-label=\"Next month\"\n                                                    >\n                                                        <NavigateNextIcon />\n                                                    </IconButton>\n                                                </>\n                                            )}\n\n                                            {viewType === 'year' && (\n                                                <>\n                                                    <IconButton\n                                                        onClick={() => setYear(year - 1)}\n                                                        aria-label=\"Previous year\"\n                                                    >\n                                                        <NavigateBeforeIcon />\n                                                    </IconButton>\n\n                                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                                        <DatePicker\n                                                            views={['year']}\n                                                            label=\"Year\"\n                                                            minDate={new Date('2000-01-01')}\n                                                            maxDate={new Date('2050-12-31')}\n                                                            value={new Date(year, 0)}\n                                                            onChange={(newDate) => {\n                                                                if (newDate) {\n                                                                    setYear(newDate.getFullYear());\n                                                                }\n                                                            }}\n                                                            renderInput={(params) => <TextField {...params} variant=\"standard\" helperText={null} />}\n                                                            sx={{ mx: 2, width: 170 }}\n                                                        />\n                                                    </LocalizationProvider>\n\n                                                    <IconButton\n                                                        onClick={() => setYear(year + 1)}\n                                                        aria-label=\"Next year\"\n                                                    >\n                                                        <NavigateNextIcon />\n                                                    </IconButton>\n                                                </>\n                                            )}\n                                        </Box>\n\n                                        {/* Calendar Info */}\n                                        <Box sx={{ textAlign: 'right' }}>\n                                            <Typography variant=\"h5\" gutterBottom>\n                                                {viewType === 'month'\n                                                    ? `${calendar?.months?.gregorian?.name || new Date(year, month - 1).toLocaleString('default', { month: 'long' })} ${year}`\n                                                    : `${year} Prayer Times Calendar`\n                                                }\n                                            </Typography>\n                                            {calendar?.meta && (\n                                                <Typography variant=\"body2\" color=\"text.secondary\">\n                                                    Method: {calendar.meta.method?.name || 'ISNA'} • School: {calendar.meta.school || 'Standard'}\n                                                </Typography>\n                                            )}\n                                        </Box>\n                                    </Box>\n                                </Paper>\n\n                                {/* Calendar Content */}\n                                {viewType === 'month' ? renderMonthlyView() : renderYearlyView()}\n                            </Box>\n                        )}\n                    </Box>\n                </Box>\n            )}\n        </Container>\n    );\n};\n\nexport default CalendarPage;"],"names":["DAYS_OF_WEEK_SHORT","HijriCalendar","theme","useTheme","hijriDate","prayerTimesService","usePrayerTimes","currentMonth","setCurrentMonth","useState","currentYear","setCurrentYear","calendarData","setCalendarData","islamicEvents","setIslamicEvents","todayHijri","setTodayHijri","useEffect","month","number","year","loadCalendarData","loadIslamicEvents","calculateDaysInHijriMonth","m","y","isLeapYear","includes","daysInMonth","getHijriCalendar","firstDayOfMonth","days","dayCounter","i","week","j","push","day","isToday","events","getEventsForDay","error","console","name","parseInt","filter","event","getHijriMonthName","monthNumber","_jsx","Card","sx","mb","borderRadius","boxShadow","children","_jsxs","CardContent","Typography","variant","gutterBottom","color","fontWeight","Box","textAlign","palette","secondary","main","en","Date","toLocaleDateString","weekday","Divider","display","alignItems","justifyContent","IconButton","onClick","goToPreviousMonth","newMonth","newYear","ChevronLeftIcon","goToNextMonth","ChevronRightIcon","Grid","container","map","index","item","xs","py","bgcolor","weekIndex","React","dayIndex","height","p","border","borderColor","primary","position","flexDirection","length","Tooltip","title","e","join","width","mt","spacing","Chip","icon","EventIcon","label","size","CalendarPage","_calendar$months","_calendar$months$greg","_calendar$meta$method","loading","setLoading","setError","calendar","setCalendar","setMonth","getMonth","setYear","getFullYear","tabValue","setTabValue","viewType","setViewType","params","handleMonthChange","async","latitude","longitude","calendarParams","method","school","latitudeAdjustmentMethod","midnightMode","response","getMonthlyPrayerTimes","getYearlyPrayerTimes","code","formattedCalendar","months","gregorian","data","monthName","toLocaleString","hijri","meta","warn","status","apiError","err","message","fetchCalendar","renderDayPrayerTimes","_day$hijri$month","timings","date","getDate","Fajr","Sunrise","Dhuhr","Asr","Maghrib","Container","maxWidth","CircularProgress","component","Alert","severity","Paper","borderBottom","Tabs","value","onChange","handleTabChange","newValue","centered","Tab","DateRangeIcon","iconPosition","id","CalendarMonthIcon","role","hidden","Button","startIcon","mr","EventNoteIcon","TodayIcon","handleResetToCurrentDate","now","ml","_Fragment","NavigateBeforeIcon","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","views","minDate","maxDate","newDate","renderInput","TextField","helperText","mx","NavigateNextIcon","renderMonthlyView","today","toISOString","split","elevation","isSimplified","Array","isArray","monthData","idx","_monthData$days","_monthData$days$0$tim","_monthData$days$0$tim2","_monthData$days$0$tim3","_monthData$days$0$tim4","_monthData$days$0$tim5","md","lg","paragraph","isPreview","pl","borderLeft","Isha"],"sourceRoot":""}