{"version":3,"file":"static/js/878.73f34049.chunk.js","mappings":"gTAoBA,MAAMA,EAAY,CAChB,CAAEC,KAAM,QAASC,KAAM,KAAMC,EAAG,KAAMC,EAAG,IAAKC,QAAS,UAAWC,IAAK,QAASC,IAAK,UACrF,CAAEN,KAAM,QAASC,KAAM,KAAMC,EAAG,KAAMC,EAAG,IAAKC,QAAS,YAAaC,IAAK,QAASC,IAAK,QACvF,CAAEN,KAAM,gBAAiBC,KAAM,KAAMC,EAAG,IAAKC,EAAG,IAAKC,QAAS,mBAAoBC,IAAK,SAAUC,KAAM,UACvG,CAAEN,KAAM,YAAaC,KAAM,KAAMC,EAAG,KAAMC,EAAG,IAAKC,QAAS,UAAWC,KAAM,OAAQC,IAAK,UACzF,CAAEN,KAAM,WAAYC,KAAM,KAAMC,EAAG,KAAMC,EAAG,IAAKC,QAAS,YAAaC,IAAK,QAASC,IAAK,SAC1F,CAAEN,KAAM,UAAWC,KAAM,KAAMC,EAAG,IAAKC,EAAG,IAAKC,QAAS,QAASC,IAAK,OAAQC,IAAK,QACnF,CAAEN,KAAM,SAAUC,KAAM,KAAMC,EAAG,KAAMC,EAAG,IAAKC,QAAS,SAAUC,IAAK,QAASC,IAAK,SACrF,CAAEN,KAAM,iBAAkBC,KAAM,KAAMC,EAAG,IAAKC,EAAG,IAAKC,QAAS,SAAUC,IAAK,QAASC,KAAM,OAC7F,CAAEN,KAAM,QAASC,KAAM,KAAMC,EAAG,IAAKC,EAAG,IAAKC,QAAS,OAAQC,IAAK,QAASC,IAAK,SACjF,CAAEN,KAAM,eAAgBC,KAAM,KAAMC,EAAG,IAAMC,EAAG,IAAKC,QAAS,WAAYC,KAAM,QAASC,IAAK,SAC9F,CAAEN,KAAM,WAAYC,KAAM,KAAMC,EAAG,IAAKC,EAAG,IAAKC,QAAS,YAAUC,IAAK,MAAQC,KAAM,SACtF,CAAEN,KAAM,YAAaC,KAAM,KAAMC,EAAG,IAAKC,EAAG,IAAMC,QAAS,eAAgBC,KAAM,QAASC,KAAM,SAChG,CAAEN,KAAM,UAAWC,KAAM,KAAMC,EAAG,IAAKC,EAAG,IAAKC,QAAS,QAASC,IAAK,QAASC,KAAM,QACrF,CAAEN,KAAM,eAAgBC,KAAM,KAAMC,EAAG,KAAMC,EAAG,IAAKC,QAAS,SAAUC,IAAK,QAASC,IAAK,SAC3F,CAAEN,KAAM,YAAaC,KAAM,KAAMC,EAAG,KAAMC,EAAG,KAAMC,QAAS,WAAYC,KAAM,QAASC,IAAK,SA+CxFC,EAAW,CACfC,KAAM,UACNC,OAAQ,OACRC,YAAa,IACbC,OAAQ,oCAUK,SAASC,EAASC,GAAkC,IAAjC,MAAEC,EAAQ,IAAI,OAAEC,EAAS,KAAKF,EAC9D,MAAOG,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,OAChDC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,OACxCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAgBC,IAAqBN,EAAAA,EAAAA,UAAS,OAC9CO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,MAC9CS,EAAgBC,IAAqBV,EAAAA,EAAAA,UAAS,MAC9CW,EAAMC,IAAWZ,EAAAA,EAAAA,UAAiB,GAARJ,IAC1BiB,EAAoBC,IAAyBd,EAAAA,EAAAA,WAAS,GACvDe,EAlGR,WAAwC,IAAnBC,EAAUC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAChC,MAAOF,EAAUK,IAAepB,EAAAA,EAAAA,UACZ,qBAAXqB,QAAyBA,OAAOC,WAAaN,GAOtD,OALAO,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAUA,IAAMJ,EAAYC,OAAOC,WAAaN,GAEtD,OADAK,OAAOI,iBAAiB,SAAUD,GAC3B,IAAMH,OAAOK,oBAAoB,SAAUF,EAAQ,GACzD,CAACR,IACGD,CACT,CAwFmBY,IAGjBJ,EAAAA,EAAAA,YAAU,KACR,IAAIK,EACJ,MAAMC,EAAUA,KACdjB,GAAQkB,IACN,IAAIC,EAAOD,EAAO,GAElB,OADIC,EAAe,GAARnC,IAAamC,EAAe,GAARnC,GACxBmC,CAAI,IAEbH,EAAQI,sBAAsBH,EAAQ,EAGxC,OADAD,EAAQI,sBAAsBH,GACvB,IAAMI,qBAAqBL,EAAM,GACvC,CAAChC,KAGJ2B,EAAAA,EAAAA,YAAU,KACR,GAAIV,EAAoB,CACtB,MAAMqB,EAAUC,YAAW,IAAMrB,GAAsB,IAAQ,KAC/D,MAAO,IAAMsB,aAAaF,EAC5B,IACC,CAACrB,IAEJ,MAcMwB,EAAmBC,MAAOC,EAASC,EAAQC,KAC/CrC,GAAW,GACX,IACE,MAAMsC,EAAS,CAAEC,SAAUJ,EAAQpD,IAAKyD,UAAWL,EAAQnD,IAAKoD,SAAQC,UAClEI,QAAaC,EAAAA,EAAmBC,wBAAwBL,GAC1DG,GAAQA,EAAKA,MAAQA,EAAKA,KAAKG,SACjC9C,EAAe2C,EAAKA,KAAKG,SACzBlC,GAAsB,IAEtBZ,EAAe,CAAE+C,MAAO,+BAE5B,CAAE,MAAOA,GACP/C,EAAe,CAAE+C,MAAO,iCAC1B,CACA7C,GAAW,EAAM,EAiCb8C,EAAYnC,EAAW,EAAI,EAC3BoC,EAAYpC,EAAW,GAAK,IAC5BqC,EAAarC,EAAW,GAAK,GAC7BsC,EAAYtC,EAAW,GAAK,GAC5BuC,EAAavC,EAAW,GAAK,GAEnC,OACEwC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,UAAW,EAAGC,GAAI,CACtBC,aAAc,EACdC,SAAU,UACVC,WAAY,oDACZC,EAAG,EACHC,UAAW,oBACXC,UACAC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEtE,MAAO,OAAQuE,SAAUvE,EAAOwE,OAAQ,SAAUC,SAAU,WAAYxE,UAASmE,SAAA,EAE7FC,EAAAA,EAAAA,MAAA,OAAKrE,MAAM,OAAOC,OAAQA,EAAQyE,QAAS,OAAO1E,KAASC,IAAUqE,MAAO,CAAEG,SAAU,WAAYE,KAAM,EAAGC,IAAK,EAAGC,OAAQ,GAAIT,SAAA,EAC/HC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,kBAAgBS,GAAG,gBAAgBC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAKb,SAAA,EAC1DT,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,KAAKC,UAAU,aAC5BxB,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,MAAMC,UAAU,aAC7BxB,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,OAAOC,UAAU,gBAEhCd,EAAAA,EAAAA,MAAA,kBAAgBS,GAAG,WAAWC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAKb,SAAA,EACrDT,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,KAAKC,UAAU,UAAUC,YAAY,SAClDzB,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,MAAMC,UAAU,UAAUC,YAAY,SACnDzB,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,OAAOC,UAAU,UAAUC,YAAY,UAEtDf,EAAAA,EAAAA,MAAA,kBAAgBS,GAAG,YAAYC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAKb,SAAA,EACtDT,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,KAAKC,UAAU,UAAUC,YAAY,SAClDzB,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,MAAMC,UAAU,UAAUC,YAAY,UACnDzB,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,MAAMC,UAAU,OAAOC,YAAY,UAChDzB,EAAAA,EAAAA,KAAA,QAAMuB,OAAO,OAAOC,UAAU,OAAOC,YAAY,gBAIrDzB,EAAAA,EAAAA,KAAA,WACEoB,GAAI/E,EAAQ,EACZgF,GAAI/E,EAAS,EACboF,GAAIC,KAAKC,IAAIvF,EAAOC,GAAU,EAC9BuF,GAAIF,KAAKC,IAAIvF,EAAOC,GAAU,EAC9BP,KAAK,sBACL4E,MAAO,CAAEzE,OAAQ,YAAa4F,QAAS,QAGzC9B,EAAAA,EAAAA,KAAA,WACEoB,GAAI/E,EAAQ,EACZgF,GAAI/E,EAAS,EACboF,GAAIC,KAAKC,IAAIvF,EAAOC,GAAU,EAC9BuF,GAAIF,KAAKC,IAAIvF,EAAOC,GAAU,EAC9BP,KAAK,iBACL4E,MAAO,CAAEoB,aAAc,UAAWC,cAAe,WAGnDhC,EAAAA,EAAAA,KAAA,WACEoB,GAAIhE,EACJiE,GAAI/E,EAAS,EACboF,GAAY,IAARrF,EACJwF,GAAa,IAATvF,EACJP,KAAK,kBACL4E,MAAO,CAAEoB,aAAc,WAAYC,cAAe,OAAQF,QAAS,IAAM5F,OAAQ,mBAGrF8D,EAAAA,EAAAA,KAACiC,EAAAA,EAAQ,CACPtB,MAAO,CACLtE,MAAO,OACPC,OAAQ,OACRwE,SAAU,WACVE,KAAM,EACNC,IAAK,EACLC,OAAQ,EACRc,cAAe,WAGnBhC,EAAAA,EAAAA,KAAA,OACEe,QAAS,OAAO1E,KAASC,IACzBD,MAAM,OACNC,OAAO,OACPqE,MAAO,CAAEG,SAAU,WAAYE,KAAM,EAAGC,IAAK,EAAGC,OAAQ,GAAIT,SAG3D,MAEC,MAAMyB,EAAkB,IAAI5G,GAAW6G,KAAIC,IACzC,MAAM,EAAE3G,EAAC,EAAEC,GAzLzB,SAAoBE,EAAKC,GAGvB,MAAO,CAAEJ,GAFGI,EAAM,OADe6B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACF,KAEtBhC,GAHoCgC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAEjB,KAAtB,GAAK9B,GAEnB,CAqL+ByG,CAAWD,EAAExG,IAAKwG,EAAEvG,IAAKQ,EAAOC,GACjD,MAAO,IAAK8F,EAAG3G,IAAGC,IAAG,IACpB4G,MAAK,CAACC,EAAGC,IAAMD,EAAE9G,EAAI+G,EAAE/G,IAGpBgH,EAAe,GACfC,EAAgBlF,EAAW,EAAI,GAC/BmF,EAAanF,EAAW,EAAI,GAElC,OAAO0E,EAAgBC,KAAI,CAACC,EAAGQ,KAC7B,IAAIC,EAAOC,EAAOC,EAAcC,EAC5BC,EAAY,QAChB,GAAIzF,EACFyF,EAAab,EAAE3G,EAAIY,EAAQ,EAAK,OAAS,QACzCyG,GAAUjD,EAAa,EACvBgD,EAAsB,UAAdI,EAAwB,KAAOrD,EAAY,IAC/CwC,EAAE3G,EAAIoH,EAAQ,IAAGA,GAAST,EAAE3G,GAC5B2G,EAAE3G,EAAIoH,EAAQjD,EAAYvD,IAAOwG,EAAQxG,EAAQ+F,EAAE3G,EAAImE,GACvDwC,EAAE1G,EAAIoH,EAAQ,IAAGA,GAASV,EAAE1G,GAC5B0G,EAAE1G,EAAIoH,EAAQjD,EAAavD,IAAQwG,EAAQxG,EAAS8F,EAAE1G,EAAImE,GAC9DkD,EAAeF,GAAuB,UAAdI,EAAwB,EAAIrD,GACpDoD,EAAeF,EAAQjD,EAAa,MAC/B,CACL,IAAI0B,EAASmB,EACTQ,GAAe,EACnB,KAAOA,GAAc,CACnBJ,IAAUvB,EAAS5B,EAAYE,EAAa,GAC5CgD,GAAUjD,EAAY,EACtB,MAAMuD,EAAU,CACdC,GAAIhB,EAAE3G,EAAIoH,EACVQ,GAAIjB,EAAE3G,EAAIoH,EAAQjD,EAClB0D,GAAIlB,EAAE1G,EAAIoH,EACVS,GAAInB,EAAE1G,EAAIoH,EAAQjD,GAEpBqD,EAAeT,EAAae,MAAKC,KAC7BN,EAAQE,GAAKI,EAAIL,IAAMD,EAAQC,GAAKK,EAAIJ,IAAMF,EAAQI,GAAKE,EAAIH,IAAMH,EAAQG,GAAKG,EAAIF,MAEtFL,IAAc3B,GAAUoB,EAC9B,CACAF,EAAaiB,KAAK,CAChBN,GAAIhB,EAAE3G,EAAIoH,EACVQ,GAAIjB,EAAE3G,EAAIoH,EAAQjD,EAClB0D,GAAIlB,EAAE1G,EAAIoH,EACVS,GAAInB,EAAE1G,EAAIoH,EAAQjD,IAEhBuC,EAAE3G,EAAIoH,EAAQ,IAAGA,GAAST,EAAE3G,GAC5B2G,EAAE3G,EAAIoH,EAAQjD,EAAYvD,IAAOwG,EAAQxG,EAAQ+F,EAAE3G,EAAImE,GACvDwC,EAAE1G,EAAIoH,EAAQ,IAAGA,GAASV,EAAE1G,GAChCqH,EAAeF,EAAQjD,EAAY,EACnCoD,EAAeF,EAAQjD,CACzB,CACA,MAAM8D,EAAYvB,EAAE3G,EAAI,GAClBmI,EAAYxB,EAAE1G,EAAI,GAExB,OACEgF,EAAAA,EAAAA,MAAA,KAAgBmD,UAAW,aAAaF,KAAaC,KAAcjD,MAAO,CAAEmD,OAAQ,WAClFC,QAASA,IA1KEhF,WACzBvC,EAAmBwC,GACnB/B,EAAkB,KAClBE,EAAkB,WACZ2B,EAAiBE,EAAS,IAAK,IAAI,EAsKZgF,CAAmB5B,GAClC6B,aAAcA,IAAMlH,EAAkBqF,EAAE5G,MACxC0I,aAAcA,IAAMnH,EAAkB,MACtCoH,SAAU,EACVC,KAAK,SACL,aAAY,yBAAyBhC,EAAE7G,OAAOkF,SAAA,EAG9CT,EAAAA,EAAAA,KAAA,QAAMoD,GAAI,EAAGE,GAAI,EAAGD,GAAIN,EAAcQ,GAAIP,EAAchH,OAAO,UAAUC,YAAa,OAEtF+D,EAAAA,EAAAA,KAAA,UACEsB,EAAG3B,EACHgB,MAAO,IACF7E,EACHuI,WAAY,8BACZR,UAAW/G,IAAmBsF,EAAE5G,KAAO,cAAgB,WACvDU,OAAQY,IAAmBsF,EAAE5G,KAAO,mCAAqCM,EAASI,WAItFwE,EAAAA,EAAAA,MAAA,KAAGmD,UAAW,aAAahB,KAASC,KAASrC,SAAA,EAC3CT,EAAAA,EAAAA,KAAA,QACE3D,MAAOuD,EACPtD,OAAQuD,EACR6B,GAAI7B,EAAa,EACjB9D,KAAK,OACLC,OAAO,UACPC,YAAa,IACbC,OAAQY,IAAmBsF,EAAE5G,KAAO,mCAAqC,6CAG3EwE,EAAAA,EAAAA,KAAA,SACEsE,KAAM,+DAA+DlC,EAAE5G,WACvEC,EAAG,EACHC,GAAImE,EAAaE,GAAc,EAC/B1D,MAAOyD,EACPxD,OAAQyD,EACRY,MAAO,CAAEP,aAAc,MAGzBJ,EAAAA,EAAAA,KAAA,QACEvE,EAAG,EAAIqE,GAAatC,EAAW,EAAI,IACnC9B,EAAGmE,EAAa,GAAKrC,EAAW,EAAI,GACpC+G,WAAW,mCACXC,SAAUhH,EAAW,GAAK,GAC1BiH,WAAW,MACX1I,KAAK,OACL2I,cAAc,SACdC,kBAAkB,SAAQlE,SAEzB2B,EAAE5G,YAnDD4G,EAAE5G,KAsDN,GAGT,EAnHA,MAqHHwE,EAAAA,EAAAA,KAAC4E,EAAAA,EAAK,CAACC,OAAQtI,EAAiBuI,QA7MlBC,KAClBvI,EAAmB,MACnBG,EAAe,KAAK,EA2MqC8D,UACnDT,EAAAA,EAAAA,KAACgF,EAAAA,EAAG,CAAC7E,GAAI,CACPW,SAAU,WACVG,IAAK,MACLD,KAAM,MACN6C,UAAW,wBACXoB,QAAS,mBACTzE,UAAW,GACXD,EAAG,EACHH,aAAc,EACd8E,SAAU,KACVzE,SACClE,IACCmE,EAAAA,EAAAA,MAAAyE,EAAAA,SAAA,CAAA1E,SAAA,EACEC,EAAAA,EAAAA,MAAC0E,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAA7E,SAAA,CAClClE,EAAgBhB,KAAK,KAAGgB,EAAgBZ,QAAQ,QAEnD+E,EAAAA,EAAAA,MAACsE,EAAAA,EAAG,CAAC7E,GAAI,CAAEoF,QAAS,OAAQC,IAAK,EAAGC,GAAI,GAAIhF,SAAA,EAC1CC,EAAAA,EAAAA,MAACgF,EAAAA,EAAW,CAACC,KAAK,QAAQxF,GAAI,CAAE+E,SAAU,KAAMzE,SAAA,EAC9CT,EAAAA,EAAAA,KAAC4F,EAAAA,EAAU,CAACzE,GAAG,eAAcV,SAAC,YAC9BT,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACLC,QAAQ,eACRC,MAAO/I,EACPgJ,MAAM,SACNC,SArPOlH,UACzB,MAAME,EAASiH,EAAEC,OAAOJ,MACxB9I,EAAkBgC,GACd1C,SACIuC,EAAiBvC,EAAiB0C,EAAQ/B,EAClD,EAgP+CuD,SA3R3B,CACpB,CAAEsF,MAAO,IAAKC,MAAO,QACrB,CAAED,MAAO,IAAKC,MAAO,2CACrB,CAAED,MAAO,IAAKC,MAAO,uBACrB,CAAED,MAAO,IAAKC,MAAO,uBACrB,CAAED,MAAO,IAAKC,MAAO,8BACrB,CAAED,MAAO,IAAKC,MAAO,kDAuRY7D,KAAIiE,IACjBpG,EAAAA,EAAAA,KAACqG,EAAAA,EAAQ,CAAiBN,MAAOK,EAAIL,MAAMtF,SAAE2F,EAAIJ,OAAlCI,EAAIL,eAIzBrF,EAAAA,EAAAA,MAACgF,EAAAA,EAAW,CAACC,KAAK,QAAQxF,GAAI,CAAE+E,SAAU,KAAMzE,SAAA,EAC9CT,EAAAA,EAAAA,KAAC4F,EAAAA,EAAU,CAACzE,GAAG,eAAcV,SAAC,YAC9BT,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACLC,QAAQ,eACRC,MAAO7I,EACP8I,MAAM,SACNC,SA1POlH,UACzB,MAAMG,EAASgH,EAAEC,OAAOJ,MACxB5I,EAAkB+B,GACd3C,SACIuC,EAAiBvC,EAAiBS,EAAgBkC,EAC1D,EAqP+CuB,SA/R3B,CACpB,CAAEsF,MAAO,IAAKC,MAAO,SACrB,CAAED,MAAO,IAAKC,MAAO,WA+RY7D,KAAIiE,IACjBpG,EAAAA,EAAAA,KAACqG,EAAAA,EAAQ,CAAiBN,MAAOK,EAAIL,MAAMtF,SAAE2F,EAAIJ,OAAlCI,EAAIL,iBAK1BnJ,GACCoD,EAAAA,EAAAA,KAACgF,EAAAA,EAAG,CAAC7E,GAAI,CAAEoF,QAAS,OAAQe,eAAgB,SAAUC,WAAY,SAAUC,UAAW,KAAM/F,UAC3FT,EAAAA,EAAAA,KAACyG,EAAAA,EAAgB,MAEjB/J,EACFA,EAAYgD,OACVM,EAAAA,EAAAA,KAACoF,EAAAA,EAAU,CAACsB,MAAM,QAAOjG,SAAE/D,EAAYgD,SAEvCM,EAAAA,EAAAA,KAAC2G,EAAAA,EAAOC,IAAG,CACTC,SAAS,EACTvI,QAAShB,EAAqB,CAAEwJ,MAAO,CAAC,EAAG,KAAM,GAAItG,UAAW,CAAC,kBAAmB,qBAAsB,oBAAuB,CAAC,EAClI6D,WAAY,CAAE0C,SAAU,GAAKC,KAAM,aAAcvG,UAEjDT,EAAAA,EAAAA,KAACgF,EAAAA,EAAG,CAAAvE,SACDwG,OAAOC,QAAQxK,GAAayF,KAAIgF,IAAA,IAAE5L,EAAM6L,GAAKD,EAAA,OAC5CzG,EAAAA,EAAAA,MAAC0E,EAAAA,EAAU,CAAA3E,SAAA,EAAYC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAIlF,EAAK,OAAK,IAAE6L,IAAtB7L,EAAwC,QAK/D,gBAQpB,C","sources":["components/GlobalMap.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ReactComponent as WorldSVG } from '../assets/world.svg';\nimport { Box, Modal, Typography, CircularProgress, Tooltip, Select, MenuItem, FormControl, InputLabel, Card } from '@mui/material';\nimport prayerTimesService from '../services/prayerTimesService';\nimport { motion } from 'framer-motion';\n\n// Responsive hook\nfunction useIsMobile(breakpoint = 600) {\n  const [isMobile, setIsMobile] = useState(\n    typeof window !== 'undefined' ? window.innerWidth < breakpoint : false\n  );\n  useEffect(() => {\n    const handler = () => setIsMobile(window.innerWidth < breakpoint);\n    window.addEventListener('resize', handler);\n    return () => window.removeEventListener('resize', handler);\n  }, [breakpoint]);\n  return isMobile;\n}\n\n// Example country data (expand as needed)\nconst countries = [\n  { name: \"China\", code: \"CN\", x: 1200, y: 350, capital: \"Beijing\", lat: 39.9042, lng: 116.4074 },\n  { name: \"India\", code: \"IN\", x: 1100, y: 400, capital: \"New Delhi\", lat: 28.6139, lng: 77.2090 },\n  { name: \"United States\", code: \"US\", x: 180, y: 220, capital: \"Washington, D.C.\", lat: 38.89511, lng: -77.03637 },\n  { name: \"Indonesia\", code: \"ID\", x: 1350, y: 600, capital: \"Jakarta\", lat: -6.2088, lng: 106.8456 },\n  { name: \"Pakistan\", code: \"PK\", x: 1050, y: 350, capital: \"Islamabad\", lat: 33.6844, lng: 73.0479 },\n  { name: \"Nigeria\", code: \"NG\", x: 850, y: 600, capital: \"Abuja\", lat: 9.0579, lng: 7.4951 },\n  { name: \"Russia\", code: \"RU\", x: 1300, y: 200, capital: \"Moscow\", lat: 55.7558, lng: 37.6173 },\n  { name: \"United Kingdom\", code: \"GB\", x: 700, y: 250, capital: \"London\", lat: 51.5074, lng: -0.1278 },\n  { name: \"Italy\", code: \"IT\", x: 850, y: 350, capital: \"Rome\", lat: 41.9028, lng: 12.4964 },\n  { name: \"South Africa\", code: \"ZA\", x: 1000, y: 900, capital: \"Pretoria\", lat: -25.7479, lng: 28.2293 },\n  { name: \"Colombia\", code: \"CO\", x: 400, y: 600, capital: \"Bogotá\", lat: 4.7110, lng: -74.0721 },\n  { name: \"Argentina\", code: \"AR\", x: 600, y: 1000, capital: \"Buenos Aires\", lat: -34.6037, lng: -58.3816 },\n  { name: \"Morocco\", code: \"MA\", x: 600, y: 500, capital: \"Rabat\", lat: 34.0209, lng: -6.8416 },\n  { name: \"Saudi Arabia\", code: \"SA\", x: 1100, y: 500, capital: \"Riyadh\", lat: 24.7136, lng: 46.6753 },\n  { name: \"Australia\", code: \"AU\", x: 1800, y: 1100, capital: \"Canberra\", lat: -35.2809, lng: 149.1300 },\n];\n\nconst pillStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  background: \"#fff\",\n  borderRadius: 999,\n  boxShadow: \"0 2px 8px rgba(0,0,0,0.10)\",\n  padding: \"0 14px 0 0\",\n  fontSize: 15,\n  fontWeight: 600,\n  border: \"1.5px solid #e0e0e0\",\n  minHeight: 32,\n  minWidth: 70,\n  height: 32,\n  lineHeight: '32px',\n  marginLeft: 8,\n  gap: 8,\n  cursor: 'pointer',\n};\n\nconst flagBoxStyle = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  background: '#fff',\n  borderRadius: 8,\n  border: '1.5px solid #e0e0e0',\n  width: 32,\n  height: 24,\n  marginRight: 8,\n  boxShadow: '0 1px 4px rgba(0,0,0,0.04)'\n};\n\nconst countryTextStyle = {\n  fontFamily: 'IBM Plex Sans, Arial, sans-serif',\n  fontSize: 13,\n  fontWeight: 600,\n  color: '#222',\n  letterSpacing: '0.01em',\n  lineHeight: '24px',\n  whiteSpace: 'nowrap',\n  display: 'flex',\n  alignItems: 'center',\n};\n\nconst dotStyle = {\n  fill: \"#14532d\",\n  stroke: \"#fff\",\n  strokeWidth: 2.5,\n  filter: 'drop-shadow(0 1px 2px #bfa13a33)'\n};\n\n// Helper: Convert lat/lng to SVG x/y using equirectangular projection for SVG viewBox 0 0 2000 857\nfunction latLngToXY(lat, lng, width = 2000, height = 857) {\n  const x = ((lng + 180) * (width / 360));\n  const y = ((90 - lat) * (height / 180));\n  return { x, y };\n}\n\nexport default function GlobalMap({ width = 1000, height = 500 }) {\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [prayerTimes, setPrayerTimes] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [hoveredCountry, setHoveredCountry] = useState(null);\n  const [selectedMethod, setSelectedMethod] = useState('2'); // Default: ISNA\n  const [selectedSchool, setSelectedSchool] = useState('0'); // Default: Shafi\n  const [sunX, setSunX] = useState(width * 0.2);\n  const [animatePrayerTimes, setAnimatePrayerTimes] = useState(false);\n  const isMobile = useIsMobile();\n\n  // Animate sunlight position\n  useEffect(() => {\n    let frame;\n    const animate = () => {\n      setSunX(prev => {\n        let next = prev + 0.5;\n        if (next > width * 0.8) next = width * 0.2;\n        return next;\n      });\n      frame = requestAnimationFrame(animate);\n    };\n    frame = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(frame);\n  }, [width]);\n\n  // Reset animation after it runs\n  useEffect(() => {\n    if (animatePrayerTimes) {\n      const timeout = setTimeout(() => setAnimatePrayerTimes(false), 700);\n      return () => clearTimeout(timeout);\n    }\n  }, [animatePrayerTimes]);\n\n  const methodOptions = [\n    { value: '2', label: 'ISNA' },\n    { value: '1', label: 'University of Islamic Sciences, Karachi' },\n    { value: '3', label: 'Muslim World League' },\n    { value: '4', label: 'Umm Al-Qura, Makkah' },\n    { value: '5', label: 'Egyptian General Authority' },\n    { value: '7', label: 'Institute of Geophysics, University of Tehran' },\n    // ...add more as needed\n  ];\n  const schoolOptions = [\n    { value: '0', label: 'Shafi' },\n    { value: '1', label: 'Hanafi' },\n  ];\n\n  const fetchPrayerTimes = async (country, method, school) => {\n    setLoading(true);\n    try {\n      const params = { latitude: country.lat, longitude: country.lng, method, school };\n      const data = await prayerTimesService.getTimingsByCoordinates(params);\n      if (data && data.data && data.data.timings) {\n        setPrayerTimes(data.data.timings);\n        setAnimatePrayerTimes(true); // Trigger animation\n      } else {\n        setPrayerTimes({ error: 'Prayer times not available.' });\n      }\n    } catch (error) {\n      setPrayerTimes({ error: 'Failed to fetch prayer times.' });\n    }\n    setLoading(false);\n  };\n\n  const handleCountryClick = async (country) => {\n    setSelectedCountry(country);\n    setSelectedMethod('2'); // Reset to default\n    setSelectedSchool('0');\n    await fetchPrayerTimes(country, '2', '0');\n  };\n\n  const handleMethodChange = async (e) => {\n    const method = e.target.value;\n    setSelectedMethod(method);\n    if (selectedCountry) {\n      await fetchPrayerTimes(selectedCountry, method, selectedSchool);\n    }\n  };\n\n  const handleSchoolChange = async (e) => {\n    const school = e.target.value;\n    setSelectedSchool(school);\n    if (selectedCountry) {\n      await fetchPrayerTimes(selectedCountry, selectedMethod, school);\n    }\n  };\n\n  const handleClose = () => {\n    setSelectedCountry(null);\n    setPrayerTimes(null);\n  };\n\n  // Marker style variables for easy adjustment\n  const markerLineWidth = 0.3;\n  const dotRadius = isMobile ? 2 : 3;\n  const pillWidth = isMobile ? 90 : 128;\n  const pillHeight = isMobile ? 24 : 32;\n  const flagWidth = isMobile ? 18 : 28;\n  const flagHeight = isMobile ? 13 : 20;\n\n  return (\n    <Card elevation={8} sx={{\n      borderRadius: 6,\n      overflow: 'visible',\n      background: 'linear-gradient(135deg, #1976d2 0%, #26c6da 100%)', // theme blue to cyan\n      p: 2,\n      boxShadow: '0 8px 32px #0002'\n    }}>\n      <div style={{ width: \"100%\", maxWidth: width, margin: \"0 auto\", position: \"relative\", height }}>\n        {/* Earth curve background with realistic gradient */}\n        <svg width=\"100%\" height={height} viewBox={`0 0 ${width} ${height}`} style={{ position: 'absolute', left: 0, top: 0, zIndex: 0 }}>\n          <defs>\n            <radialGradient id=\"earthGradient\" cx=\"50%\" cy=\"50%\" r=\"80%\">\n              <stop offset=\"0%\" stopColor=\"#e0f7fa\" />\n              <stop offset=\"60%\" stopColor=\"#4dd0e1\" />\n              <stop offset=\"100%\" stopColor=\"#01579b\" />\n            </radialGradient>\n            <radialGradient id=\"sunlight\" cx=\"0.5\" cy=\"0.5\" r=\"0.7\">\n              <stop offset=\"0%\" stopColor=\"#fffde4\" stopOpacity=\"0.7\" />\n              <stop offset=\"60%\" stopColor=\"#fffde4\" stopOpacity=\"0.2\" />\n              <stop offset=\"100%\" stopColor=\"#fffde4\" stopOpacity=\"0\" />\n            </radialGradient>\n            <radialGradient id=\"movingSun\" cx=\"0.5\" cy=\"0.5\" r=\"0.5\">\n              <stop offset=\"0%\" stopColor=\"#fffde4\" stopOpacity=\"0.7\" />\n              <stop offset=\"60%\" stopColor=\"#ffe082\" stopOpacity=\"0.25\" />\n              <stop offset=\"90%\" stopColor=\"#000\" stopOpacity=\"0.25\" />\n              <stop offset=\"100%\" stopColor=\"#000\" stopOpacity=\"0.35\" />\n            </radialGradient>\n          </defs>\n          {/* Full globe: centered circle filling the card */}\n          <ellipse\n            cx={width / 2}\n            cy={height / 2}\n            rx={Math.min(width, height) / 2}\n            ry={Math.min(width, height) / 2}\n            fill=\"url(#earthGradient)\"\n            style={{ filter: 'blur(2px)', opacity: 0.95 }}\n          />\n          {/* Sunlight overlay, centered */}\n          <ellipse\n            cx={width / 2}\n            cy={height / 2}\n            rx={Math.min(width, height) / 2}\n            ry={Math.min(width, height) / 2}\n            fill=\"url(#sunlight)\"\n            style={{ mixBlendMode: 'lighter', pointerEvents: 'none' }}\n          />\n          {/* Moving sun shadow/ellipse */}\n          <ellipse\n            cx={sunX}\n            cy={height / 2}\n            rx={width * 0.18}\n            ry={height * 0.45}\n            fill=\"url(#movingSun)\"\n            style={{ mixBlendMode: 'multiply', pointerEvents: 'none', opacity: 0.55, filter: 'blur(8px)' }}\n          />\n        </svg>\n        <WorldSVG \n          style={{ \n            width: \"100%\", \n            height: \"100%\", \n            position: \"absolute\", \n            left: 0, \n            top: 0, \n            zIndex: 0, \n            pointerEvents: \"none\"\n          }} \n        />\n        <svg\n          viewBox={`0 0 ${width} ${height}`}\n          width=\"100%\"\n          height=\"100%\"\n          style={{ position: \"absolute\", left: 0, top: 0, zIndex: 1 }}\n        >\n          {/* Dynamic pill label positioning and marker lines */}\n          {(() => {\n            // Sort by x position\n            const sortedCountries = [...countries].map(c => {\n              const { x, y } = latLngToXY(c.lat, c.lng, width, height);\n              return { ...c, x, y };\n            }).sort((a, b) => a.x - b.x);\n\n            // Track placed pill label bounding boxes (desktop only)\n            const placedLabels = [];\n            const defaultOffset = isMobile ? 0 : 40; // px above marker\n            const offsetStep = isMobile ? 0 : 24; // px to stack higher if overlap\n\n            return sortedCountries.map((c, idx) => {\n              let pillX, pillY, markerLineX2, markerLineY2;\n              let direction = 'right';\n              if (isMobile) {\n                direction = (c.x > width / 2) ? 'left' : 'right';\n                pillY = -(pillHeight / 2);\n                pillX = direction === 'right' ? 10 : -(pillWidth + 10);\n                if (c.x + pillX < 0) pillX = -c.x;\n                if (c.x + pillX + pillWidth > width) pillX = width - c.x - pillWidth;\n                if (c.y + pillY < 0) pillY = -c.y;\n                if (c.y + pillY + pillHeight > height) pillY = height - c.y - pillHeight;\n                markerLineX2 = pillX + (direction === 'right' ? 0 : pillWidth);\n                markerLineY2 = pillY + pillHeight / 2;\n              } else {\n                let offset = defaultOffset;\n                let foundOverlap = true;\n                while (foundOverlap) {\n                  pillY = -(offset + dotRadius + pillHeight + 8);\n                  pillX = -(pillWidth / 2);\n                  const thisBox = {\n                    x1: c.x + pillX,\n                    x2: c.x + pillX + pillWidth,\n                    y1: c.y + pillY,\n                    y2: c.y + pillY + pillHeight\n                  };\n                  foundOverlap = placedLabels.some(box =>\n                    !(thisBox.x2 < box.x1 || thisBox.x1 > box.x2 || thisBox.y2 < box.y1 || thisBox.y1 > box.y2)\n                  );\n                  if (foundOverlap) offset += offsetStep;\n                }\n                placedLabels.push({\n                  x1: c.x + pillX,\n                  x2: c.x + pillX + pillWidth,\n                  y1: c.y + pillY,\n                  y2: c.y + pillY + pillHeight\n                });\n                if (c.x + pillX < 0) pillX = -c.x;\n                if (c.x + pillX + pillWidth > width) pillX = width - c.x - pillWidth;\n                if (c.y + pillY < 0) pillY = -c.y;\n                markerLineX2 = pillX + pillWidth / 2;\n                markerLineY2 = pillY + pillHeight;\n              }\n              const adjustedX = c.x - 15;\n              const adjustedY = c.y + 20;\n              // SVG pill rendering for Safari compatibility\n              return (\n                <g key={c.code} transform={`translate(${adjustedX},${adjustedY})`} style={{ cursor: 'pointer' }}\n                  onClick={() => handleCountryClick(c)}\n                  onMouseEnter={() => setHoveredCountry(c.code)}\n                  onMouseLeave={() => setHoveredCountry(null)}\n                  tabIndex={0}\n                  role=\"button\"\n                  aria-label={`Show prayer times for ${c.name}`}\n                >\n                  {/* Marker line */}\n                  <line x1={0} y1={0} x2={markerLineX2} y2={markerLineY2} stroke=\"#bfa13a\" strokeWidth={1.5} />\n                  {/* Dot at the marker */}\n                  <circle\n                    r={dotRadius}\n                    style={{\n                      ...dotStyle,\n                      transition: 'transform 0.2s, filter 0.2s',\n                      transform: hoveredCountry === c.code ? 'scale(1.25)' : 'scale(1)',\n                      filter: hoveredCountry === c.code ? 'drop-shadow(0 2px 6px #bfa13a66)' : dotStyle.filter,\n                    }}\n                  />\n                  {/* SVG pill label */}\n                  <g transform={`translate(${pillX},${pillY})`}>\n                    <rect\n                      width={pillWidth}\n                      height={pillHeight}\n                      rx={pillHeight / 2}\n                      fill=\"#fff\"\n                      stroke=\"#e0e0e0\"\n                      strokeWidth={1.5}\n                      filter={hoveredCountry === c.code ? 'drop-shadow(0 2px 8px #bfa13a33)' : 'drop-shadow(0 2px 8px rgba(0,0,0,0.10))'}\n                    />\n                    {/* Flag as SVG image */}\n                    <image\n                      href={`https://purecatamphetamine.github.io/country-flag-icons/3x2/${c.code}.svg`}\n                      x={8}\n                      y={(pillHeight - flagHeight) / 2}\n                      width={flagWidth}\n                      height={flagHeight}\n                      style={{ borderRadius: 4 }}\n                    />\n                    {/* Country code text */}\n                    <text\n                      x={8 + flagWidth + (isMobile ? 5 : 10)}\n                      y={pillHeight / 2 + (isMobile ? 4 : 6)}\n                      fontFamily=\"IBM Plex Sans, Arial, sans-serif\"\n                      fontSize={isMobile ? 13 : 16}\n                      fontWeight=\"600\"\n                      fill=\"#222\"\n                      letterSpacing=\"0.01em\"\n                      alignmentBaseline=\"middle\"\n                    >\n                      {c.code}\n                    </text>\n                  </g>\n                </g>\n              );\n            });\n          })()}\n        </svg>\n        <Modal open={!!selectedCountry} onClose={handleClose}>\n          <Box sx={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            bgcolor: 'background.paper',\n            boxShadow: 24,\n            p: 4,\n            borderRadius: 2,\n            minWidth: 340,\n          }}>\n            {selectedCountry && (\n              <>\n                <Typography variant=\"h6\" gutterBottom>\n                  {selectedCountry.name} ({selectedCountry.capital})\n                </Typography>\n                <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n                  <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                    <InputLabel id=\"method-label\">Method</InputLabel>\n                    <Select\n                      labelId=\"method-label\"\n                      value={selectedMethod}\n                      label=\"Method\"\n                      onChange={handleMethodChange}\n                    >\n                      {methodOptions.map(opt => (\n                        <MenuItem key={opt.value} value={opt.value}>{opt.label}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                  <FormControl size=\"small\" sx={{ minWidth: 100 }}>\n                    <InputLabel id=\"school-label\">School</InputLabel>\n                    <Select\n                      labelId=\"school-label\"\n                      value={selectedSchool}\n                      label=\"School\"\n                      onChange={handleSchoolChange}\n                    >\n                      {schoolOptions.map(opt => (\n                        <MenuItem key={opt.value} value={opt.value}>{opt.label}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Box>\n                {loading ? (\n                  <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 120 }}>\n                    <CircularProgress />\n                  </Box>\n                ) : prayerTimes ? (\n                  prayerTimes.error ? (\n                    <Typography color=\"error\">{prayerTimes.error}</Typography>\n                  ) : (\n                    <motion.div\n                      initial={false}\n                      animate={animatePrayerTimes ? { scale: [1, 1.08, 1], boxShadow: ['0 0 0px #26c6da', '0 0 24px #26c6da88', '0 0 0px #26c6da'] } : {}}\n                      transition={{ duration: 0.7, ease: 'easeInOut' }}\n                    >\n                      <Box>\n                        {Object.entries(prayerTimes).map(([name, time]) => (\n                          <Typography key={name}><b>{name}:</b> {time}</Typography>\n                        ))}\n                      </Box>\n                    </motion.div>\n                  )\n                ) : null}\n              </>\n            )}\n          </Box>\n        </Modal>\n      </div>\n    </Card>\n  );\n}\n"],"names":["countries","name","code","x","y","capital","lat","lng","dotStyle","fill","stroke","strokeWidth","filter","GlobalMap","_ref","width","height","selectedCountry","setSelectedCountry","useState","prayerTimes","setPrayerTimes","loading","setLoading","hoveredCountry","setHoveredCountry","selectedMethod","setSelectedMethod","selectedSchool","setSelectedSchool","sunX","setSunX","animatePrayerTimes","setAnimatePrayerTimes","isMobile","breakpoint","arguments","length","undefined","setIsMobile","window","innerWidth","useEffect","handler","addEventListener","removeEventListener","useIsMobile","frame","animate","prev","next","requestAnimationFrame","cancelAnimationFrame","timeout","setTimeout","clearTimeout","fetchPrayerTimes","async","country","method","school","params","latitude","longitude","data","prayerTimesService","getTimingsByCoordinates","timings","error","dotRadius","pillWidth","pillHeight","flagWidth","flagHeight","_jsx","Card","elevation","sx","borderRadius","overflow","background","p","boxShadow","children","_jsxs","style","maxWidth","margin","position","viewBox","left","top","zIndex","id","cx","cy","r","offset","stopColor","stopOpacity","rx","Math","min","ry","opacity","mixBlendMode","pointerEvents","WorldSVG","sortedCountries","map","c","latLngToXY","sort","a","b","placedLabels","defaultOffset","offsetStep","idx","pillX","pillY","markerLineX2","markerLineY2","direction","foundOverlap","thisBox","x1","x2","y1","y2","some","box","push","adjustedX","adjustedY","transform","cursor","onClick","handleCountryClick","onMouseEnter","onMouseLeave","tabIndex","role","transition","href","fontFamily","fontSize","fontWeight","letterSpacing","alignmentBaseline","Modal","open","onClose","handleClose","Box","bgcolor","minWidth","_Fragment","Typography","variant","gutterBottom","display","gap","mb","FormControl","size","InputLabel","Select","labelId","value","label","onChange","e","target","opt","MenuItem","justifyContent","alignItems","minHeight","CircularProgress","color","motion","div","initial","scale","duration","ease","Object","entries","_ref2","time"],"sourceRoot":""}