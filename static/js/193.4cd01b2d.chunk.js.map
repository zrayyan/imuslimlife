{"version":3,"file":"static/js/193.4cd01b2d.chunk.js","mappings":"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","sources":["components/animations/KaabaClock.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Box, Typography, useTheme } from '@mui/material';\nimport { formatTime12Hour } from '../../utils/formatters';\n\nconst KaabaClock = ({\n    prayerTime,\n    remaining,\n    progress,\n    prayerName,\n    cityName,\n    islamicDate,\n    isCompact = false,\n    isNearPrayer = false,\n    clockSize = 280,\n}) => {\n    const theme = useTheme();\n    const canvasRef = useRef(null);\n    const [currentTime, setCurrentTime] = useState(new Date());\n    const [fadeIn, setFadeIn] = useState(0);\n    \n    // Animation frame reference and animation settings\n    const animationRef = useRef(null);\n    const pilgrims = useRef([]);\n    const pilgrimCount = isCompact ? 20 : 40; // Fewer pilgrims for cleaner look with clock hands\n    const rotationSpeed = 0.003;\n    const rayCount = 8;\n    \n    // Set up the clock and animations\n    useEffect(() => {\n        // Start fade-in animation\n        const fadeTimer = setTimeout(() => {\n            setFadeIn(1);\n        }, 100);\n\n        // Update the current time every second\n        const timer = setInterval(() => {\n            setCurrentTime(new Date());\n        }, 1000);\n\n        // Initialize pilgrims for tawaf\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const centerX = canvas.width / 2;\n            const centerY = canvas.height / 2;\n            const kaabaSize = clockSize * 0.2; // Kaaba size in relation to canvas\n            const tawafRadius = kaabaSize * 1.65; // Radius of the tawaf circle\n            \n            pilgrims.current = Array(pilgrimCount).fill().map(() => {\n                const angle = Math.random() * Math.PI * 2;\n                const distance = tawafRadius * (0.95 + Math.random() * 0.15);\n                const speed = rotationSpeed * (0.7 + Math.random() * 0.6);\n                const pilgrimSize = kaabaSize * (0.05 + Math.random() * 0.04);\n                \n                return {\n                    angle,\n                    distance,\n                    speed,\n                    size: pilgrimSize,\n                    color: Math.random() > 0.5 ? '#ffffff' : '#f0f0f0'\n                };\n            });\n        }\n\n        // Clean up timers\n        return () => {\n            clearTimeout(fadeTimer);\n            clearInterval(timer);\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n        };\n    }, [clockSize, isCompact]);\n\n    // Draw the Kaaba clock\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        \n        const ctx = canvas.getContext('2d');\n        \n        // Set up canvas with device pixel ratio\n        const dpr = window.devicePixelRatio || 1;\n        const size = clockSize;\n        canvas.width = size * dpr;\n        canvas.height = size * dpr;\n        ctx.scale(dpr, dpr);\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n        \n        const centerX = size / 2;\n        const centerY = size / 2;\n        \n        // Size calculations\n        const kaabaSize = size * 0.2; // Kaaba size in relation to canvas\n        const tawafRadius = kaabaSize * 1.65; // Radius of the tawaf circle\n        const maqamSize = kaabaSize * 0.12; // Size of the Maqam Ibrahim\n        const clockRadius = (size / 2) - (size * 0.05); // Outer clock radius\n        \n        // Light rays positions\n        const rays = Array(rayCount).fill().map((_, i) => {\n            const rayAngle = (i / rayCount) * Math.PI * 2;\n            return rayAngle;\n        });\n        \n        // Animation function for combined Kaaba & clock\n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            // Draw clock face background\n            ctx.beginPath();\n            ctx.arc(centerX, centerY, clockRadius, 0, 2 * Math.PI);\n            const bgGradient = ctx.createRadialGradient(\n                centerX, centerY, 0,\n                centerX, centerY, clockRadius\n            );\n            bgGradient.addColorStop(0, '#f8f7f2'); // Light center\n            bgGradient.addColorStop(1, '#f0efe9'); // Slightly darker edge\n            ctx.fillStyle = bgGradient;\n            ctx.fill();\n            ctx.strokeStyle = theme.palette.divider;\n            ctx.lineWidth = size * 0.005;\n            ctx.stroke();\n            \n            // Draw light rays (behind everything)\n            ctx.save();\n            rays.forEach((angle) => {\n                const rayLength = kaabaSize * 3;\n                ctx.beginPath();\n                ctx.moveTo(centerX, centerY);\n                const rayEndX = centerX + Math.cos(angle) * rayLength;\n                const rayEndY = centerY + Math.sin(angle) * rayLength;\n                \n                const gradient = ctx.createLinearGradient(centerX, centerY, rayEndX, rayEndY);\n                gradient.addColorStop(0, 'rgba(212, 175, 55, 0.4)');\n                gradient.addColorStop(1, 'rgba(212, 175, 55, 0)');\n                \n                ctx.lineTo(rayEndX, rayEndY);\n                ctx.lineWidth = kaabaSize * 0.1;\n                ctx.strokeStyle = gradient;\n                ctx.stroke();\n            });\n            ctx.restore();\n            \n            // Draw hour markers (clock numbers)\n            for (let i = 1; i <= 12; i++) {\n                const angle = (i * Math.PI / 6) - Math.PI / 2; // Start at 12 o'clock\n                const numRadius = clockRadius * 0.85; // Position of the numbers\n                \n                const x = centerX + numRadius * Math.cos(angle);\n                const y = centerY + numRadius * Math.sin(angle);\n                \n                ctx.fillStyle = theme.palette.text.primary;\n                ctx.font = `bold ${size * 0.04}px Arial`;\n                ctx.textAlign = 'center';\n                ctx.textBaseline = 'middle';\n                ctx.fillText(i.toString(), x, y);\n            }\n            \n            // Draw minute ticks\n            for (let i = 0; i < 60; i++) {\n                if (i % 5 !== 0) { // Skip hour positions\n                    const angle = (i * Math.PI / 30) - Math.PI / 2;\n                    const innerRadius = clockRadius * 0.9;\n                    const outerRadius = clockRadius * 0.95;\n                    \n                    ctx.beginPath();\n                    ctx.moveTo(\n                        centerX + innerRadius * Math.cos(angle),\n                        centerY + innerRadius * Math.sin(angle)\n                    );\n                    ctx.lineTo(\n                        centerX + outerRadius * Math.cos(angle),\n                        centerY + outerRadius * Math.sin(angle)\n                    );\n                    \n                    ctx.strokeStyle = theme.palette.text.secondary;\n                    ctx.lineWidth = size * 0.002;\n                    ctx.stroke();\n                }\n            }\n            \n            // Draw circular tawaf path\n            ctx.beginPath();\n            ctx.arc(centerX, centerY, tawafRadius, 0, Math.PI * 2);\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = 'rgba(150, 150, 150, 0.2)';\n            ctx.stroke();\n            \n            // Draw Maqam Ibrahim (in front of the path, behind pilgrims)\n            const maqamX = centerX + tawafRadius * 0.6;\n            const maqamY = centerY;\n            \n            // Draw maqam shadow\n            ctx.beginPath();\n            ctx.arc(maqamX, maqamY + maqamSize * 0.1, maqamSize * 0.85, 0, Math.PI * 2);\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n            ctx.fill();\n            \n            // Draw maqam base\n            ctx.beginPath();\n            ctx.arc(maqamX, maqamY, maqamSize, 0, Math.PI * 2);\n            ctx.fillStyle = '#d4d0c8';\n            ctx.fill();\n            ctx.strokeStyle = '#a9a9a9';\n            ctx.lineWidth = 1;\n            ctx.stroke();\n            \n            // Draw maqam details\n            ctx.beginPath();\n            ctx.arc(maqamX, maqamY, maqamSize * 0.7, 0, Math.PI * 2);\n            ctx.fillStyle = '#e8e4dc';\n            ctx.fill();\n            \n            // Draw footprints on maqam\n            ctx.beginPath();\n            ctx.ellipse(\n                maqamX - maqamSize * 0.25, \n                maqamY, \n                maqamSize * 0.2, \n                maqamSize * 0.1, \n                0, 0, Math.PI * 2\n            );\n            ctx.ellipse(\n                maqamX + maqamSize * 0.25, \n                maqamY, \n                maqamSize * 0.2, \n                maqamSize * 0.1, \n                0, 0, Math.PI * 2\n            );\n            ctx.fillStyle = 'rgba(100, 100, 100, 0.3)';\n            ctx.fill();\n            \n            // Update and draw pilgrims\n            pilgrims.current.forEach((pilgrim) => {\n                // Update position\n                pilgrim.angle -= pilgrim.speed;\n                \n                // Calculate position\n                const x = centerX + Math.cos(pilgrim.angle) * pilgrim.distance;\n                const y = centerY + Math.sin(pilgrim.angle) * pilgrim.distance;\n                \n                // Draw pilgrim shadow\n                ctx.beginPath();\n                ctx.ellipse(x, y + pilgrim.size * 0.2, pilgrim.size * 0.8, pilgrim.size * 0.3, 0, 0, Math.PI * 2);\n                ctx.fillStyle = 'rgba(0, 0, 0, 0.15)';\n                ctx.fill();\n                \n                // Draw pilgrim\n                ctx.beginPath();\n                ctx.arc(x, y, pilgrim.size, 0, Math.PI * 2);\n                ctx.fillStyle = pilgrim.color;\n                ctx.fill();\n                ctx.strokeStyle = '#d0d0d0';\n                ctx.lineWidth = 0.5;\n                ctx.stroke();\n            });\n            \n            // Draw Kaaba\n            ctx.fillStyle = '#000000';\n            ctx.beginPath();\n            ctx.rect(\n                centerX - kaabaSize / 2,\n                centerY - kaabaSize / 2,\n                kaabaSize,\n                kaabaSize\n            );\n            ctx.fill();\n            \n            // Draw the Kaaba's Kiswah texture - subtle pattern\n            ctx.strokeStyle = 'rgba(100, 100, 100, 0.4)';\n            ctx.lineWidth = 0.5;\n            \n            // Horizontal and vertical lines for Kiswah pattern\n            for (let i = 1; i < 10; i++) {\n                const y = centerY - kaabaSize / 2 + (kaabaSize / 10) * i;\n                ctx.beginPath();\n                ctx.moveTo(centerX - kaabaSize / 2, y);\n                ctx.lineTo(centerX + kaabaSize / 2, y);\n                ctx.stroke();\n                \n                const x = centerX - kaabaSize / 2 + (kaabaSize / 10) * i;\n                ctx.beginPath();\n                ctx.moveTo(x, centerY - kaabaSize / 2);\n                ctx.lineTo(x, centerY + kaabaSize / 2);\n                ctx.stroke();\n            }\n            \n            // Draw the Kaaba's golden band\n            const bandHeight = kaabaSize * 0.15;\n            ctx.fillStyle = '#d4af37'; // Gold color\n            ctx.beginPath();\n            ctx.rect(\n                centerX - kaabaSize / 2,\n                centerY - kaabaSize / 2 + kaabaSize / 3,\n                kaabaSize,\n                bandHeight\n            );\n            ctx.fill();\n            \n            // Draw border around Kaaba\n            ctx.strokeStyle = '#444444';\n            ctx.lineWidth = 1;\n            ctx.strokeRect(\n                centerX - kaabaSize / 2,\n                centerY - kaabaSize / 2,\n                kaabaSize,\n                kaabaSize\n            );\n            \n            // Draw Kaaba door\n            const doorWidth = kaabaSize * 0.3;\n            const doorHeight = kaabaSize * 0.4;\n            const doorX = centerX + kaabaSize * 0.05;\n            const doorY = centerY - kaabaSize * 0.05;\n            \n            ctx.fillStyle = '#d4af37'; // Gold color for door\n            ctx.beginPath();\n            ctx.rect(\n                doorX - doorWidth / 2,\n                doorY - doorHeight / 2,\n                doorWidth,\n                doorHeight\n            );\n            ctx.fill();\n            ctx.strokeStyle = '#8b7500'; // Dark gold border\n            ctx.lineWidth = 1;\n            ctx.strokeRect(\n                doorX - doorWidth / 2,\n                doorY - doorHeight / 2,\n                doorWidth,\n                doorHeight\n            );\n            \n            // Door details\n            ctx.fillStyle = '#8b7500';\n            ctx.beginPath();\n            ctx.rect(\n                doorX - doorWidth / 2 + doorWidth * 0.15,\n                doorY - doorHeight / 2 + doorHeight * 0.15,\n                doorWidth * 0.7,\n                doorHeight * 0.7\n            );\n            ctx.fill();\n            \n            // Draw the Black Stone (Hajar al-Aswad)\n            const stoneSize = kaabaSize * 0.08;\n            const stoneX = centerX - kaabaSize / 2;\n            const stoneY = centerY - kaabaSize * 0.1;\n            \n            ctx.beginPath();\n            ctx.arc(stoneX, stoneY, stoneSize, 0, Math.PI * 2);\n            ctx.fillStyle = '#333333';\n            ctx.fill();\n            ctx.strokeStyle = '#d4af37'; // Gold border\n            ctx.lineWidth = 2;\n            ctx.stroke();\n            \n            // Draw a glow around the Black Stone\n            ctx.beginPath();\n            ctx.arc(stoneX, stoneY, stoneSize * 1.3, 0, Math.PI * 2);\n            const glowGradient = ctx.createRadialGradient(\n                stoneX, stoneY, stoneSize,\n                stoneX, stoneY, stoneSize * 1.3\n            );\n            glowGradient.addColorStop(0, 'rgba(212, 175, 55, 0.5)');\n            glowGradient.addColorStop(1, 'rgba(212, 175, 55, 0)');\n            ctx.fillStyle = glowGradient;\n            ctx.fill();\n            \n            // Draw the clock hands using current time\n            const hours = currentTime.getHours() % 12;\n            const minutes = currentTime.getMinutes();\n            const seconds = currentTime.getSeconds();\n            \n            // Hour hand\n            const hourAngle = (hours + minutes / 60) * Math.PI / 6 - Math.PI / 2;\n            const hourHandLength = clockRadius * 0.5;\n            \n            ctx.beginPath();\n            ctx.moveTo(centerX, centerY);\n            ctx.lineTo(\n                centerX + hourHandLength * Math.cos(hourAngle),\n                centerY + hourHandLength * Math.sin(hourAngle)\n            );\n            ctx.strokeStyle = theme.palette.primary.main;\n            ctx.lineWidth = size * 0.02;\n            ctx.lineCap = 'round';\n            ctx.stroke();\n            \n            // Minute hand\n            const minuteAngle = minutes * Math.PI / 30 - Math.PI / 2;\n            const minuteHandLength = clockRadius * 0.7;\n            \n            ctx.beginPath();\n            ctx.moveTo(centerX, centerY);\n            ctx.lineTo(\n                centerX + minuteHandLength * Math.cos(minuteAngle),\n                centerY + minuteHandLength * Math.sin(minuteAngle)\n            );\n            ctx.strokeStyle = theme.palette.secondary.main;\n            ctx.lineWidth = size * 0.01;\n            ctx.lineCap = 'round';\n            ctx.stroke();\n            \n            // Second hand with glow effect\n            const secondAngle = seconds * Math.PI / 30 - Math.PI / 2;\n            const secondHandLength = clockRadius * 0.8;\n            \n            // Glow effect\n            ctx.beginPath();\n            ctx.moveTo(centerX, centerY);\n            ctx.lineTo(\n                centerX + secondHandLength * Math.cos(secondAngle),\n                centerY + secondHandLength * Math.sin(secondAngle)\n            );\n            ctx.strokeStyle = `${theme.palette.error.main}66`; // Semi-transparent red\n            ctx.lineWidth = size * 0.008;\n            ctx.lineCap = 'round';\n            ctx.shadowColor = theme.palette.error.main;\n            ctx.shadowBlur = size * 0.01;\n            ctx.stroke();\n            ctx.shadowBlur = 0; // Reset shadow\n            \n            // Actual second hand\n            ctx.beginPath();\n            ctx.moveTo(centerX, centerY);\n            ctx.lineTo(\n                centerX + secondHandLength * Math.cos(secondAngle),\n                centerY + secondHandLength * Math.sin(secondAngle)\n            );\n            ctx.strokeStyle = theme.palette.error.main;\n            ctx.lineWidth = size * 0.004;\n            ctx.lineCap = 'round';\n            ctx.stroke();\n            \n            // Draw clock center\n            ctx.beginPath();\n            ctx.arc(centerX, centerY, size * 0.02, 0, 2 * Math.PI);\n            ctx.fillStyle = theme.palette.secondary.main;\n            ctx.fill();\n            \n            ctx.beginPath();\n            ctx.arc(centerX, centerY, size * 0.01, 0, 2 * Math.PI);\n            ctx.fillStyle = theme.palette.primary.main;\n            ctx.fill();\n            \n            // Progress indicator (arc) if we are showing prayer countdown\n            if (!isCompact && progress !== undefined) {\n                const progressRadius = clockRadius + (size * 0.025);\n                \n                // Background arc\n                ctx.beginPath();\n                ctx.arc(centerX, centerY, progressRadius, 0, 2 * Math.PI);\n                ctx.strokeStyle = `${theme.palette.divider}80`; // Semi-transparent\n                ctx.lineWidth = size * 0.02;\n                ctx.stroke();\n                \n                // Progress arc\n                ctx.beginPath();\n                ctx.arc(\n                    centerX, centerY, progressRadius,\n                    -Math.PI / 2, // Start at 12 o'clock\n                    -Math.PI / 2 + (2 * Math.PI * progress), // End based on progress\n                    false // Counter-clockwise = false\n                );\n                const progressGradient = ctx.createLinearGradient(\n                    centerX - progressRadius, centerY,\n                    centerX + progressRadius, centerY\n                );\n                progressGradient.addColorStop(0, theme.palette.secondary.light);\n                progressGradient.addColorStop(1, theme.palette.secondary.main);\n                \n                ctx.strokeStyle = progressGradient;\n                ctx.lineWidth = size * 0.02;\n                ctx.lineCap = 'round';\n                ctx.stroke();\n            }\n            \n            animationRef.current = requestAnimationFrame(animate);\n        };\n        \n        // Start animation\n        animate();\n        \n        // Cleanup\n        return () => {\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n        };\n    }, [clockSize, currentTime, isCompact, progress, theme]);\n\n    // Format remaining time for display\n    const formatRemaining = () => {\n        if (!remaining) return '';\n        \n        const hours = Math.floor(remaining / 3600000);\n        const minutes = Math.floor((remaining % 3600000) / 60000);\n        const seconds = Math.floor((remaining % 60000) / 1000);\n        \n        return `${hours}h ${minutes}m ${seconds}s`;\n    };\n\n    return (\n        <Box\n            sx={{\n                position: 'relative',\n                width: clockSize,\n                height: clockSize,\n                opacity: fadeIn,\n                transition: 'opacity 0.5s ease',\n                margin: '0 auto',\n            }}\n        >\n            <canvas\n                ref={canvasRef}\n                style={{ display: 'block' }}\n                width={clockSize}\n                height={clockSize}\n            />\n            \n            {/* Digital display overlay */}\n            <Box\n                sx={{\n                    position: 'absolute',\n                    bottom: clockSize * 0.12,\n                    left: '50%',\n                    transform: 'translateX(-50%)',\n                    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                    padding: `${clockSize * 0.02}px ${clockSize * 0.04}px`,\n                    borderRadius: clockSize * 0.02,\n                    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n                    textAlign: 'center',\n                    width: 'auto',\n                    minWidth: clockSize * 0.5\n                }}\n            >\n                {prayerName && (\n                    <Typography\n                        sx={{\n                            fontSize: clockSize * 0.06,\n                            fontWeight: 600,\n                            color: theme.palette.primary.main,\n                            mb: 0.5,\n                            lineHeight: 1\n                        }}\n                    >\n                        {prayerName}\n                    </Typography>\n                )}\n                \n                <Typography\n                    sx={{\n                        fontSize: clockSize * 0.05,\n                        fontWeight: 500,\n                        fontFamily: 'monospace',\n                        color: isNearPrayer ? theme.palette.secondary.dark : theme.palette.text.primary,\n                        lineHeight: 1.2\n                    }}\n                >\n                    {remaining ? formatRemaining() : formatTime12Hour(currentTime.toTimeString().substring(0, 5))}\n                </Typography>\n            </Box>\n            \n            {/* Location/Islamic date display (optional) */}\n            {!isCompact && (islamicDate || cityName) && (\n                <Box\n                    sx={{\n                        position: 'absolute',\n                        top: clockSize * 0.08,\n                        left: '50%',\n                        transform: 'translateX(-50%)',\n                        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                        padding: `${clockSize * 0.01}px ${clockSize * 0.02}px`,\n                        borderRadius: clockSize * 0.01,\n                        boxShadow: '0 1px 4px rgba(0,0,0,0.1)',\n                        textAlign: 'center',\n                    }}\n                >\n                    {cityName && (\n                        <Typography\n                            sx={{\n                                fontSize: clockSize * 0.04,\n                                fontWeight: 500,\n                                color: theme.palette.text.primary,\n                                lineHeight: 1.2\n                            }}\n                        >\n                            {cityName}\n                        </Typography>\n                    )}\n                    \n                    {islamicDate && (\n                        <Typography\n                            sx={{\n                                fontSize: clockSize * 0.035,\n                                fontStyle: 'italic',\n                                color: theme.palette.text.secondary,\n                                lineHeight: 1.2\n                            }}\n                        >\n                            {islamicDate}\n                        </Typography>\n                    )}\n                </Box>\n            )}\n        </Box>\n    );\n};\n\nexport default KaabaClock;"],"names":["_ref","prayerTime","remaining","progress","prayerName","cityName","islamicDate","isCompact","isNearPrayer","clockSize","theme","useTheme","canvasRef","useRef","currentTime","setCurrentTime","useState","Date","fadeIn","setFadeIn","animationRef","pilgrims","pilgrimCount","useEffect","fadeTimer","setTimeout","timer","setInterval","canvas","current","width","height","kaabaSize","tawafRadius","Array","fill","map","angle","Math","random","PI","distance","speed","size","color","clearTimeout","clearInterval","cancelAnimationFrame","ctx","getContext","dpr","window","devicePixelRatio","scale","style","centerX","centerY","maqamSize","clockRadius","rays","_","i","animate","clearRect","beginPath","arc","bgGradient","createRadialGradient","addColorStop","fillStyle","strokeStyle","palette","divider","lineWidth","stroke","save","forEach","rayLength","moveTo","rayEndX","cos","rayEndY","sin","gradient","createLinearGradient","lineTo","restore","numRadius","x","y","text","primary","font","textAlign","textBaseline","fillText","toString","innerRadius","outerRadius","secondary","maqamX","maqamY","ellipse","pilgrim","rect","bandHeight","strokeRect","doorWidth","doorHeight","doorX","doorY","stoneSize","stoneX","stoneY","glowGradient","hours","getHours","minutes","getMinutes","seconds","getSeconds","hourAngle","hourHandLength","main","lineCap","minuteAngle","minuteHandLength","secondAngle","secondHandLength","error","shadowColor","shadowBlur","undefined","progressRadius","progressGradient","light","requestAnimationFrame","_jsxs","Box","sx","position","opacity","transition","margin","children","_jsx","ref","display","bottom","left","transform","backgroundColor","padding","borderRadius","boxShadow","minWidth","Typography","fontSize","fontWeight","mb","lineHeight","fontFamily","dark","formatRemaining","floor","formatTime12Hour","toTimeString","substring","top","fontStyle"],"sourceRoot":""}